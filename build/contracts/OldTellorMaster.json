{
  "contractName": "OldTellorMaster",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tellorContract",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newTellor",
          "type": "address"
        }
      ],
      "name": "NewTellorAddress",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "allowedToTrade",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_challenge",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_miner",
          "type": "address"
        }
      ],
      "name": "didMine",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "didVote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getAddressVars",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        }
      ],
      "name": "getAllDisputeVars",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[9]",
          "name": "",
          "type": "uint256[9]"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentVariables",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "getDisputeIdByDisputeHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getDisputeUintVars",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getLastNewValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getLastNewValueById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getMinedBlockNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getMinersByRequestIdAndTimestamp",
      "outputs": [
        {
          "internalType": "address[5]",
          "name": "",
          "type": "address[5]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getNewValueCountbyRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_request",
          "type": "bytes32"
        }
      ],
      "name": "getRequestIdByQueryHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getRequestIdByRequestQIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getRequestIdByTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRequestQ",
      "outputs": [
        {
          "internalType": "uint256[51]",
          "name": "",
          "type": "uint256[51]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getRequestUintVars",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestVars",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getStakerInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getSubmissionsByTimestamp",
      "outputs": [
        {
          "internalType": "uint256[5]",
          "name": "",
          "type": "uint256[5]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getSymbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTimestampbyRequestIDandIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getUintVar",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVariablesOnDeck",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "isInDispute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "retrieveData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_newDeity",
          "type": "address"
        }
      ],
      "name": "changeDeity",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_tellorContract",
          "type": "address"
        }
      ],
      "name": "changeTellorContract",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tellorContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTellor\",\"type\":\"address\"}],\"name\":\"NewTellorAddress\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allowedToTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDeity\",\"type\":\"address\"}],\"name\":\"changeDeity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tellorContract\",\"type\":\"address\"}],\"name\":\"changeTellorContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_challenge\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_miner\",\"type\":\"address\"}],\"name\":\"didMine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"didVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getAddressVars\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getAllDisputeVars\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[9]\",\"name\":\"\",\"type\":\"uint256[9]\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentVariables\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getDisputeIdByDisputeHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getDisputeUintVars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastNewValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getLastNewValueById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinedBlockNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinersByRequestIdAndTimestamp\",\"outputs\":[{\"internalType\":\"address[5]\",\"name\":\"\",\"type\":\"address[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getNewValueCountbyRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_request\",\"type\":\"bytes32\"}],\"name\":\"getRequestIdByQueryHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRequestIdByRequestQIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getRequestIdByTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRequestQ\",\"outputs\":[{\"internalType\":\"uint256[51]\",\"name\":\"\",\"type\":\"uint256[51]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getRequestUintVars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestVars\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getSubmissionsByTimestamp\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTimestampbyRequestIDandIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getUintVar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVariablesOnDeck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"isInDispute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"retrieveData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the Master contract with all tellor getter functions and delegate call to Tellor.  The logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer,  TellorGettersLibrary, and TellorStake\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"_spender\":\"address\",\"_user\":\"address\"},\"return\":\"Returns the remaining allowance of tokens granted to the _spender from the _user\"},\"allowedToTrade(address,uint256)\":{\"details\":\"This function returns whether or not a given user is allowed to trade a given amount  \",\"params\":{\"_amount\":\"uint of amount\",\"_user\":\"address\"},\"return\":\"true if the user is alloed to trade the amount specified\"},\"balanceOf(address)\":{\"details\":\"Gets balance of owner specified\",\"params\":{\"_user\":\"is the owner address used to look up the balance\"},\"return\":\"Returns the balance associated with the passed in _user\"},\"balanceOfAt(address,uint256)\":{\"details\":\"Queries the balance of _user at a specific _blockNumber\",\"params\":{\"_blockNumber\":\"The block number when the balance is queried\",\"_user\":\"The address from which the balance will be retrieved\"},\"return\":\"The balance at _blockNumber\"},\"changeDeity(address)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp Only needs to be in library\",\"params\":{\"_newDeity\":\"the new Deity in the contract\"}},\"changeTellorContract(address)\":{\"details\":\"allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\",\"params\":{\"_tellorContract\":\"the address of the new Tellor Contract\"}},\"constructor\":{\"details\":\"The constructor sets the original `tellorStorageOwner` of the contract to the sender account, the tellor contract to the Tellor master address and owner to the Tellor master owner address \",\"params\":{\"_tellorContract\":\"is the address for the tellor contract\"}},\"didMine(bytes32,address)\":{\"details\":\"This function tells you if a given challenge has been completed by a given miner\",\"params\":{\"_challenge\":\"the challenge to search for\",\"_miner\":\"address that you want to know if they solved the challenge\"},\"return\":\"true if the _miner address provided solved the \"},\"didVote(uint256,address)\":{\"details\":\"Checks if an address voted in a given dispute\",\"params\":{\"_address\":\"to look up\",\"_disputeId\":\"to look up\"},\"return\":\"bool of whether or not party voted\"},\"getAddressVars(bytes32)\":{\"details\":\"allows Tellor to read data from the addressVars mapping\",\"params\":{\"_data\":\"is the keccak256(\\\"variable_name\\\") of the variable that is being accessed.  These are examples of how the variables are saved within other functions: addressVars[keccak256(\\\"_owner\\\")] addressVars[keccak256(\\\"tellorContract\\\")]\"}},\"getAllDisputeVars(uint256)\":{\"details\":\"Gets all dispute variables\",\"params\":{\"_disputeId\":\"to look up\"},\"return\":\"bytes32 hash of dispute bool executed where true if it has been voted onbool disputeVotePassedbool isPropFork true if the dispute is a proposed forkaddress of reportedMineraddress of reportingPartyaddress of proposedForkAddressuint of requestIduint of timestampuint of valueuint of minExecutionDateuint of numberOfVotesuint of blocknumberuint of minerSlotuint of quorumuint of feeint count of the current tally\"},\"getCurrentVariables()\":{\"details\":\"Getter function for variables for the requestId being currently mined(currentRequestId)\",\"return\":\"current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request \"},\"getDisputeIdByDisputeHash(bytes32)\":{\"details\":\"Checks if a given hash of miner,requestId has been disputed\",\"params\":{\"_hash\":\"is the sha256(abi.encodePacked(_miners[2],_requestId));\"},\"return\":\"uint disputeId\"},\"getDisputeUintVars(uint256,bytes32)\":{\"details\":\"Checks for uint variables in the disputeUintVars mapping based on the disuputeId\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the disputeUintVars under the Dispute struct\",\"_disputeId\":\"is the dispute id;\"},\"return\":\"uint value for the bytes32 data submitted\"},\"getLastNewValue()\":{\"details\":\"Gets the a value for the latest timestamp available\",\"return\":\"value for timestamp of last proof of work submitedtrue if the is a timestamp for the lastNewValue\"},\"getLastNewValueById(uint256)\":{\"details\":\"Gets the a value for the latest timestamp available\",\"params\":{\"_requestId\":\"being requested\"},\"return\":\"value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't\"},\"getMinedBlockNum(uint256,uint256)\":{\"details\":\"Gets blocknumber for mined timestamp \",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up blocknumber\"},\"return\":\"uint of the blocknumber which the dispute was mined\"},\"getMinersByRequestIdAndTimestamp(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp \",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up miners for\"},\"return\":\"the 5 miners' addresses\"},\"getName()\":{\"details\":\"Get the name of the token return string of the token name\"},\"getNewValueCountbyRequestId(uint256)\":{\"details\":\"Counts the number of values that have been submited for the request  if called for the currentRequest being mined it can tell you how many miners have submitted a value for that request so far\",\"params\":{\"_requestId\":\"the requestId to look up\"},\"return\":\"uint count of the number of values received for the requestId\"},\"getRequestIdByQueryHash(bytes32)\":{\"details\":\"Getter function for requestId based on the queryHash\",\"params\":{\"_request\":\"is the hash(of string api and granularity) to check if a request already exists\"},\"return\":\"uint requestId\"},\"getRequestIdByRequestQIndex(uint256)\":{\"details\":\"Getter function for the specified requestQ index\",\"params\":{\"_index\":\"to look up in the requestQ array\"},\"return\":\"uint of reqeuestId\"},\"getRequestIdByTimestamp(uint256)\":{\"details\":\"Getter function for requestId based on timestamp \",\"params\":{\"_timestamp\":\"to check requestId\"},\"return\":\"uint of reqeuestId\"},\"getRequestQ()\":{\"details\":\"Getter function for the requestQ array\",\"return\":\"the requestQ arrray\"},\"getRequestUintVars(uint256,bytes32)\":{\"details\":\"Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct for the requestId specified\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the apiUintVars under the requestDetails struct\",\"_requestId\":\"to look up\"},\"return\":\"uint value of the apiUintVars specified in _data for the requestId specified\"},\"getRequestVars(uint256)\":{\"details\":\"Gets the API struct variables that are not mappings\",\"params\":{\"_requestId\":\"to look up\"},\"return\":\"string of api to querystring of symbol of api to querybytes32 hash of stringbytes32 of the granularity(decimal places) requesteduint of index in requestQ arrayuint of current payout/tip for this requestId\"},\"getStakerInfo(address)\":{\"details\":\"This function allows users to retireve all information about a staker\",\"params\":{\"_staker\":\"address of staker inquiring about\"},\"return\":\"uint current state of stakeruint startDate of staking\"},\"getSubmissionsByTimestamp(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp \",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestampt to look up miners for\"},\"return\":\"address[5] array of 5 addresses ofminers that mined the requestId\"},\"getSymbol()\":{\"details\":\"Get the symbol of the token return string of the token symbol\"},\"getTimestampbyRequestIDandIndex(uint256,uint256)\":{\"details\":\"Gets the timestamp for the value based on their index\",\"params\":{\"_index\":\"is the value index to look up\",\"_requestID\":\"is the requestId to look up\"},\"return\":\"uint timestamp\"},\"getUintVar(bytes32)\":{\"details\":\"Getter for the variables saved under the TellorStorageStruct uintVars variable\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the uintVars under the TellorStorageStruct struct This is an example of how data is saved into the mapping within other functions:  self.uintVars[keccak256(\\\"stakerCount\\\")]\"},\"return\":\"uint of specified variable  \"},\"getVariablesOnDeck()\":{\"details\":\"Getter function for next requestId on queue/request with highest payout at time the function is called\",\"return\":\"onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string\"},\"isInDispute(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp \",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up miners for\"},\"return\":\"bool true if requestId/timestamp is under dispute\"},\"retrieveData(uint256,uint256)\":{\"details\":\"Retreive value from oracle based on timestamp\",\"params\":{\"_requestId\":\"being requested\",\"_timestamp\":\"to retreive data/value from\"},\"return\":\"value for timestamp submitted\"},\"totalSupply()\":{\"details\":\"Getter for the total_supply of oracle tokens\",\"return\":\"uint total supply\"}},\"title\":\"Tellor Master\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/C/company/code/tellorlegacy/contracts/oldContracts/OldTellorMaster.sol\":\"OldTellorMaster\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/C/company/code/tellorlegacy/contracts/oldContracts/OldTellorGetters.sol\":{\"keccak256\":\"0x08963376472ab11fa19a71d5327fd73afedb6ae78d05864be712fe06d9b5f22d\",\"urls\":[\"bzz-raw://b5e46d96b1adee902fbdba933527474cc721f0a4e34bdcea7a74f06c89f701fe\",\"dweb:/ipfs/QmQJMLv4bCowct5vS19Gs4bfPHeYCsmVamBJCkmFfVSZN7\"]},\"/C/company/code/tellorlegacy/contracts/oldContracts/OldTellorMaster.sol\":{\"keccak256\":\"0xa10cd7a38ab25a6c4ef9a6e580fe6783e13c8db351c93b789ee21db9c23da85b\",\"urls\":[\"bzz-raw://3ea9e2d0bf6f27014ea8a2ec0ce6f2d7f8c73bd12ff1f9d9f7cf805dcfbf654f\",\"dweb:/ipfs/QmPyQM4c5Mo7voyrNzhKZM4LKV58uJWCiTLE2h9u7J7xAG\"]},\"/C/company/code/tellorlegacy/contracts/oldContracts/libraries/OldSafeMath.sol\":{\"keccak256\":\"0xa460d5574b654a029d0b1f412f6d59b8d8da68b188325213bfac7441e39c804f\",\"urls\":[\"bzz-raw://2291a8eeb2126e766c6caaa20d8f1e926c6fe42d5556db3346269e2e4fee204a\",\"dweb:/ipfs/QmQJuiwwqynhydJ51X7bqCwKQkPrLoTVRxxKefhsimWpUs\"]},\"/C/company/code/tellorlegacy/contracts/oldContracts/libraries/OldTellorDispute.sol\":{\"keccak256\":\"0x5eb2f795b02c168b0ebd540801f02e907bbc22ce832b49b6cbd7c4cfad38491d\",\"urls\":[\"bzz-raw://7a1c72b9dc928f7a577a3adbfc35f85680e340089ea80ea06ce6a029c52a723f\",\"dweb:/ipfs/Qma9CZ7oP7ngf88tqyLUAxQeivt3ZniNsN98rBbdv7EKBn\"]},\"/C/company/code/tellorlegacy/contracts/oldContracts/libraries/OldTellorGettersLibrary.sol\":{\"keccak256\":\"0xf8ac4fb21674a10ccce197578e77269999a8fcaa4612e482555df20495e139a0\",\"urls\":[\"bzz-raw://0e673ab958601eba77b5b1f1cd098c8a95433266cf568d9de4719a03d874d6a7\",\"dweb:/ipfs/QmcmE1FazuNGWJNDCqiC2i5LBwWNRd3ggF3cK6whgzTBH5\"]},\"/C/company/code/tellorlegacy/contracts/oldContracts/libraries/OldTellorStake.sol\":{\"keccak256\":\"0x7ce7b0685c8679d46147daff7063ac14066eb9b9415977d0daedc3a902a741d4\",\"urls\":[\"bzz-raw://7c0f8337a6a95e60a30b26c16585dd1fb274ea3f65ce7d9bafdb33478f1ed234\",\"dweb:/ipfs/QmVV2nJPftMkwtb1uoDfrXYRYFTQbUoSAanXeiqrKMscwL\"]},\"/C/company/code/tellorlegacy/contracts/oldContracts/libraries/OldTellorStorage.sol\":{\"keccak256\":\"0xec653433edca5b868777b795c0f58bcdef23f4590e8797345a5ab93a7e034118\",\"urls\":[\"bzz-raw://3bb0d28dc7228998dc67ea9305ebe8c2623ec438b6335694b41ad6d4abc1cf84\",\"dweb:/ipfs/QmReNLG1rWXmJzMHfDeHKgbJYnmXYsTJRPV42ZnChowSKD\"]},\"/C/company/code/tellorlegacy/contracts/oldContracts/libraries/OldTellorTransfer.sol\":{\"keccak256\":\"0x714579fe36e04a8d1b6bafc33a6cfd1cf343babf4e22f8eb9044f2463a3db2c7\",\"urls\":[\"bzz-raw://efd5d35a014afa408ff951a5d99bb22343360ec32856f85b1ac9e54ffab49960\",\"dweb:/ipfs/QmeahNMKjs8EASTmvdZAAHy6SgRneAkuJDSQyJfuVWQcAg\"]},\"/C/company/code/tellorlegacy/contracts/oldContracts/libraries/OldUtilities.sol\":{\"keccak256\":\"0xbf097622ae979e8ee04e449c3712492450fc9e4e0aca94053d5ce2afb33d6933\",\"urls\":[\"bzz-raw://459ece1bdeecdefa436dcebce71c9aa8caf3c8ecc060ec02706747cdad8652d1\",\"dweb:/ipfs/QmaGWyUScHGGUoXFpVxPpE9EXy8eKRrDrXYVyTehCrNXxa\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051620031ce380380620031ce8339818101604052602081101561003557600080fd5b8101908080519060200190929190505050600073__OldTellorStake________________________6383442e5690916040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b15801561009857600080fd5b505af41580156100ac573d6000803e3d6000fd5b50505050336000603f01600060405180807f5f6f776e6572000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150612f0c80620002c26000396000f3fe6080604052600436106101f95760003560e01c806370a082311161010d578063ae0a8279116100a0578063da3799411161006f578063da37994114610f66578063dd62ed3e14610fb5578063e0ae93c11461103a578063e1eee6d614611093578063fc7cf0a0146111cf576101f9565b8063ae0a827914610d2a578063af0b132714610d7b578063b541302914610eba578063c775b54214610f0d576101f9565b806393fa4915116100dc57806393fa491514610b38578063999cf26c14610b91578063a22e407a14610c04578063a7c438bc14610cb7576101f9565b806370a08231146109b5578063733bdef014610a1a57806377fbb66314610a865780637f6fd5d914610adf576101f9565b80633180f8df116101905780634ee2cd7e1161015f5780634ee2cd7e146107b4578063612c8f7f146108235780636173c0b81461087257806363bb82ad146108c157806369026d6314610934576101f9565b80633180f8df1461065d5780633df0777b146106b757806346eee1c41461071457806347abd7f114610763576101f9565b806317d7de7c116101cc57806317d7de7c146104b557806318160ddd1461054557806319e8e03b146105705780631db842f01461060e576101f9565b80630f0b424d146102da57806311c9851214610329578063133bee5e146103aa5780631507040114610425575b600080603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060606000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905060008082516020840185600019f43d604051816000823e82600081146102d6578282f35b8282fd5b3480156102e657600080fd5b50610313600480360360208110156102fd57600080fd5b8101908080359060200190929190505050611205565b6040518082815260200191505060405180910390f35b34801561033557600080fd5b5061036c6004803603604081101561034c57600080fd5b810190808035906020019092919080359060200190929190505050611222565b6040518082600560200280838360005b8381101561039757808201518184015260208101905061037c565b5050505090500191505060405180910390f35b3480156103b657600080fd5b506103e3600480360360208110156103cd57600080fd5b8101908080359060200190929190505050611248565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043157600080fd5b5061043a611265565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561047a57808201518184015260208101905061045f565b50505050905090810190601f1680156104a75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104c157600080fd5b506104ca6112a2565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561050a5780820151818401526020810190506104ef565b50505050905090810190601f1680156105375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561055157600080fd5b5061055a6112df565b6040518082815260200191505060405180910390f35b34801561057c57600080fd5b506105856112f0565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105d15780820151818401526020810190506105b6565b50505050905090810190601f1680156105fe5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561061a57600080fd5b506106476004803603602081101561063157600080fd5b810190808035906020019092919050505061130a565b6040518082815260200191505060405180910390f35b34801561066957600080fd5b506106966004803603602081101561068057600080fd5b8101908080359060200190929190505050611327565b60405180838152602001821515151581526020019250505060405180910390f35b3480156106c357600080fd5b506106fa600480360360408110156106da57600080fd5b810190808035906020019092919080359060200190929190505050611347565b604051808215151515815260200191505060405180910390f35b34801561072057600080fd5b5061074d6004803603602081101561073757600080fd5b8101908080359060200190929190505050611367565b6040518082815260200191505060405180910390f35b34801561076f57600080fd5b506107b26004803603602081101561078657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611384565b005b3480156107c057600080fd5b5061080d600480360360408110156107d757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061139b565b6040518082815260200191505060405180910390f35b34801561082f57600080fd5b5061085c6004803603602081101561084657600080fd5b810190808035906020019092919050505061146d565b6040518082815260200191505060405180910390f35b34801561087e57600080fd5b506108ab6004803603602081101561089557600080fd5b810190808035906020019092919050505061148a565b6040518082815260200191505060405180910390f35b3480156108cd57600080fd5b5061091a600480360360408110156108e457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114a7565b604051808215151515815260200191505060405180910390f35b34801561094057600080fd5b506109776004803603604081101561095757600080fd5b8101908080359060200190929190803590602001909291905050506114c7565b6040518082600560200280838360005b838110156109a2578082015181840152602081019050610987565b5050505090500191505060405180910390f35b3480156109c157600080fd5b50610a04600480360360208110156109d857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114ed565b6040518082815260200191505060405180910390f35b348015610a2657600080fd5b50610a6960048036036020811015610a3d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115b6565b604051808381526020018281526020019250505060405180910390f35b348015610a9257600080fd5b50610ac960048036036040811015610aa957600080fd5b8101908080359060200190929190803590602001909291905050506115d6565b6040518082815260200191505060405180910390f35b348015610aeb57600080fd5b50610b2260048036036040811015610b0257600080fd5b8101908080359060200190929190803590602001909291905050506115f6565b6040518082815260200191505060405180910390f35b348015610b4457600080fd5b50610b7b60048036036040811015610b5b57600080fd5b810190808035906020019092919080359060200190929190505050611616565b6040518082815260200191505060405180910390f35b348015610b9d57600080fd5b50610bea60048036036040811015610bb457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611636565b604051808215151515815260200191505060405180910390f35b348015610c1057600080fd5b50610c19611708565b6040518087815260200186815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610c77578082015181840152602081019050610c5c565b50505050905090810190601f168015610ca45780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b348015610cc357600080fd5b50610d1060048036036040811015610cda57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611730565b604051808215151515815260200191505060405180910390f35b348015610d3657600080fd5b50610d7960048036036020811015610d4d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611750565b005b348015610d8757600080fd5b50610db460048036036020811015610d9e57600080fd5b8101908080359060200190929190505050611767565b604051808a81526020018915151515815260200188151515158152602001871515151581526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600960200280838360005b83811015610e99578082015181840152602081019050610e7e565b50505050905001828152602001995050505050505050505060405180910390f35b348015610ec657600080fd5b50610ecf6117af565b6040518082603360200280838360005b83811015610efa578082015181840152602081019050610edf565b5050505090500191505060405180910390f35b348015610f1957600080fd5b50610f5060048036036040811015610f3057600080fd5b8101908080359060200190929190803590602001909291905050506117c6565b6040518082815260200191505060405180910390f35b348015610f7257600080fd5b50610f9f60048036036020811015610f8957600080fd5b81019080803590602001909291905050506117e6565b6040518082815260200191505060405180910390f35b348015610fc157600080fd5b5061102460048036036040811015610fd857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611803565b6040518082815260200191505060405180910390f35b34801561104657600080fd5b5061107d6004803603604081101561105d57600080fd5b810190808035906020019092919080359060200190929190505050611901565b6040518082815260200191505060405180910390f35b34801561109f57600080fd5b506110cc600480360360208110156110b657600080fd5b8101908080359060200190929190505050611921565b604051808060200180602001878152602001868152602001858152602001848152602001838103835289818151815260200191508051906020019080838360005b8381101561112857808201518184015260208101905061110d565b50505050905090810190601f1680156111555780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b8381101561118e578082015181840152602081019050611173565b50505050905090810190601f1680156111bb5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156111db57600080fd5b506111e4611953565b60405180838152602001821515151581526020019250505060405180910390f35b600061121b82600061196890919063ffffffff16565b9050919050565b61122a612e4d565b611240838360006119889092919063ffffffff16565b905092915050565b600061125e8260006119fe90919063ffffffff16565b9050919050565b60606040518060400160405280600281526020017f5454000000000000000000000000000000000000000000000000000000000000815250905090565b60606040518060400160405280600f81526020017f54656c6c6f722054726962757465730000000000000000000000000000000000815250905090565b60006112eb6000611a3e565b905090565b60008060606112ff6000611a92565b925092509250909192565b6000611320826000611bc690919063ffffffff16565b9050919050565b60008061133e836000611be690919063ffffffff16565b91509150915091565b600061135f83836000611c5f9092919063ffffffff16565b905092915050565b600061137d826000611ca190919063ffffffff16565b9050919050565b611398816000611cc790919063ffffffff16565b50565b60008073__OldTellorTransfer_____________________6389c247e2909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561142a57600080fd5b505af415801561143e573d6000803e3d6000fd5b505050506040513d602081101561145457600080fd5b8101908080519060200190929190505050905092915050565b6000611483826000611df690919063ffffffff16565b9050919050565b60006114a0826000611e1690919063ffffffff16565b9050919050565b60006114bf83836000611e449092919063ffffffff16565b905092915050565b6114cf612e6f565b6114e583836000611eaf9092919063ffffffff16565b905092915050565b60008073__OldTellorTransfer_____________________63bb0a519e9091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561157457600080fd5b505af4158015611588573d6000803e3d6000fd5b505050506040513d602081101561159e57600080fd5b81019080805190602001909291905050509050919050565b6000806115cd836000611f5b90919063ffffffff16565b91509150915091565b60006115ee83836000611ff39092919063ffffffff16565b905092915050565b600061160e8383600061202c9092919063ffffffff16565b905092915050565b600061162e838360006120619092919063ffffffff16565b905092915050565b60008073__OldTellorTransfer_____________________6375f7b5b2909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b1580156116c557600080fd5b505af41580156116d9573d6000803e3d6000fd5b505050506040513d60208110156116ef57600080fd5b8101908080519060200190929190505050905092915050565b6000806000606060008061171c6000612096565b955095509550955095509550909192939495565b6000611748838360006123a09092919063ffffffff16565b905092915050565b61176481600061240e90919063ffffffff16565b50565b600080600080600080600061177a612e91565b60006117908a60006125a090919063ffffffff16565b9850985098509850985098509850985098509193959799909294969850565b6117b7612eb4565b6117c16000612976565b905090565b60006117de838360006129c59092919063ffffffff16565b905092915050565b60006117fc8260006129fa90919063ffffffff16565b9050919050565b60008073__OldTellorTransfer_____________________63adf5211b909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b1580156118be57600080fd5b505af41580156118d2573d6000803e3d6000fd5b505050506040513d60208110156118e857600080fd5b8101908080519060200190929190505050905092915050565b600061191983836000612a1a9092919063ffffffff16565b905092915050565b60608060008060008061193e876000612a4f90919063ffffffff16565b95509550955095509550955091939550919395565b6000806119606000612cae565b915091509091565b600082604201600083815260200190815260200160002054905092915050565b611990612e4d565b83604801600084815260200190815260200160002060090160008381526020019081526020016000206005806020026040519081016040528092919082600580156119f0576020028201915b8154815260200190600101908083116119dc575b505050505090509392505050565b600082603f01600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b600081604001600060405180807f746f74616c5f737570706c790000000000000000000000000000000000000000815250600c01905060405180910390208152602001908152602001600020549050919050565b60008060606000611aa285612d70565b905080856048016000838152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054866048016000848152602001908152602001600020600001808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bb15780601f10611b8657610100808354040283529160200191611bb1565b820191906000526020600020905b815481529060010190602001808311611b9457829003601f168201915b50505050509050935093509350509193909250565b600082604901600083815260200190815260200160002054905092915050565b60008060008460480160008581526020019081526020016000209050600081600301805490501115611c4c57611c40858583600301600185600301805490500381548110611c3057fe5b9060005260206000200154612061565b60019250925050611c58565b60008081915092509250505b9250929050565b6000836048016000848152602001908152602001600020600701600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b600082604801600083815260200190815260200160002060030180549050905092915050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d6957600080fd5b8082603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600082604001600083815260200190815260200160002054905092915050565b60006032821115611e2657600080fd5b82604301600083815260200190815260200160002054905092915050565b600083604101600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b611eb7612e6f565b8360480160008481526020019081526020016000206008016000838152602001908152602001600020600580602002604051908101604052809291908260058015611f4d576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611f03575b505050505090509392505050565b6000808360470160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548460470160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154915091509250929050565b6000836048016000848152602001908152602001600020600301828154811061201857fe5b906000526020600020015490509392505050565b600083604401600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600083604801600084815260200190815260200160002060060160008381526020019081526020016000205490509392505050565b60008060006060600080866000015487604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205488604001600060405180807f646966666963756c747900000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020548960480160008b604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205481526020019081526020016000206000018a60480160008c604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020548b60480160008d604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123845780601f1061235957610100808354040283529160200191612384565b820191906000526020600020905b81548152906001019060200180831161236757829003601f168201915b5050505050925095509550955095509550955091939550919395565b600083604401600084815260200190815260200160002060060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146124b057600080fd5b8082603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b60008060008060008060006125b3612e91565b6000808b60440160008c8152602001908152602001600020905080600001548160020160009054906101000a900460ff168260020160019054906101000a900460ff168360020160029054906101000a900460ff168460020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180610120016040528089600501600060405180807f726571756573744964000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f76616c756500000000000000000000000000000000000000000000000000000081525060050190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e457865637574696f6e446174650000000000000000000000000000000081525060100190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6e756d6265724f66566f74657300000000000000000000000000000000000000815250600d0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f626c6f636b4e756d626572000000000000000000000000000000000000000000815250600b0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e6572536c6f74000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f71756f72756d000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6665650000000000000000000000000000000000000000000000000000000000815250600301905060405180910390208152602001908152602001600020548152508860010154995099509950995099509950995099509950509295985092959850929598565b61297e612eb4565b816001016033806020026040519081016040528092919082603380156129b9576020028201915b8154815260200190600101908083116129a5575b50505050509050919050565b600083604801600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600082604a01600083815260200190815260200160002054905092915050565b600083604801600084815260200190815260200160002060040160008381526020019081526020016000205490509392505050565b606080600080600080600088604801600089815260200190815260200160002090508060000181600101826002015483600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205484600401600060405180807f7265717565737451506f736974696f6e000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205485600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054858054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612bf45780601f10612bc957610100808354040283529160200191612bf4565b820191906000526020600020905b815481529060010190602001808311612bd757829003601f168201915b50505050509550848054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c905780601f10612c6557610100808354040283529160200191612c90565b820191906000526020600020905b815481529060010190602001808311612c7357829003601f168201915b50505050509450965096509650965096509650509295509295509295565b600080612d658384604201600086604001600060405180807f74696d654f664c6173744e657756616c756500000000000000000000000000008152506012019050604051809103902081526020019081526020016000205481526020019081526020016000205485604001600060405180807f74696d654f664c6173744e657756616c7565000000000000000000000000000081525060120190506040518091039020815260200190815260200160002054612061565b600191509150915091565b6000806000612dbd84600101603380602002604051908101604052809291908260338015612db3576020028201915b815481526020019060010190808311612d9f575b5050505050612de4565b80925081935050508360430160008281526020019081526020016000205492505050919050565b60008082600160338110612df457fe5b602002015191506000600190505b6033811015612e475782848260338110612e1857fe5b60200201511115612e3a57838160338110612e2f57fe5b602002015192508091505b8080600101915050612e02565b50915091565b6040518060a00160405280600590602082028038833980820191505090505090565b6040518060a00160405280600590602082028038833980820191505090505090565b604051806101200160405280600990602082028038833980820191505090505090565b60405180610660016040528060339060208202803883398082019150509050509056fea265627a7a72315820f141952f69fc0ff8703817369f731c791c5517f41b73844e50a298c8f138ac3464736f6c63430005100032",
  "deployedBytecode": "0x6080604052600436106101f95760003560e01c806370a082311161010d578063ae0a8279116100a0578063da3799411161006f578063da37994114610f66578063dd62ed3e14610fb5578063e0ae93c11461103a578063e1eee6d614611093578063fc7cf0a0146111cf576101f9565b8063ae0a827914610d2a578063af0b132714610d7b578063b541302914610eba578063c775b54214610f0d576101f9565b806393fa4915116100dc57806393fa491514610b38578063999cf26c14610b91578063a22e407a14610c04578063a7c438bc14610cb7576101f9565b806370a08231146109b5578063733bdef014610a1a57806377fbb66314610a865780637f6fd5d914610adf576101f9565b80633180f8df116101905780634ee2cd7e1161015f5780634ee2cd7e146107b4578063612c8f7f146108235780636173c0b81461087257806363bb82ad146108c157806369026d6314610934576101f9565b80633180f8df1461065d5780633df0777b146106b757806346eee1c41461071457806347abd7f114610763576101f9565b806317d7de7c116101cc57806317d7de7c146104b557806318160ddd1461054557806319e8e03b146105705780631db842f01461060e576101f9565b80630f0b424d146102da57806311c9851214610329578063133bee5e146103aa5780631507040114610425575b600080603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060606000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905060008082516020840185600019f43d604051816000823e82600081146102d6578282f35b8282fd5b3480156102e657600080fd5b50610313600480360360208110156102fd57600080fd5b8101908080359060200190929190505050611205565b6040518082815260200191505060405180910390f35b34801561033557600080fd5b5061036c6004803603604081101561034c57600080fd5b810190808035906020019092919080359060200190929190505050611222565b6040518082600560200280838360005b8381101561039757808201518184015260208101905061037c565b5050505090500191505060405180910390f35b3480156103b657600080fd5b506103e3600480360360208110156103cd57600080fd5b8101908080359060200190929190505050611248565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043157600080fd5b5061043a611265565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561047a57808201518184015260208101905061045f565b50505050905090810190601f1680156104a75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104c157600080fd5b506104ca6112a2565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561050a5780820151818401526020810190506104ef565b50505050905090810190601f1680156105375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561055157600080fd5b5061055a6112df565b6040518082815260200191505060405180910390f35b34801561057c57600080fd5b506105856112f0565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105d15780820151818401526020810190506105b6565b50505050905090810190601f1680156105fe5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561061a57600080fd5b506106476004803603602081101561063157600080fd5b810190808035906020019092919050505061130a565b6040518082815260200191505060405180910390f35b34801561066957600080fd5b506106966004803603602081101561068057600080fd5b8101908080359060200190929190505050611327565b60405180838152602001821515151581526020019250505060405180910390f35b3480156106c357600080fd5b506106fa600480360360408110156106da57600080fd5b810190808035906020019092919080359060200190929190505050611347565b604051808215151515815260200191505060405180910390f35b34801561072057600080fd5b5061074d6004803603602081101561073757600080fd5b8101908080359060200190929190505050611367565b6040518082815260200191505060405180910390f35b34801561076f57600080fd5b506107b26004803603602081101561078657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611384565b005b3480156107c057600080fd5b5061080d600480360360408110156107d757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061139b565b6040518082815260200191505060405180910390f35b34801561082f57600080fd5b5061085c6004803603602081101561084657600080fd5b810190808035906020019092919050505061146d565b6040518082815260200191505060405180910390f35b34801561087e57600080fd5b506108ab6004803603602081101561089557600080fd5b810190808035906020019092919050505061148a565b6040518082815260200191505060405180910390f35b3480156108cd57600080fd5b5061091a600480360360408110156108e457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114a7565b604051808215151515815260200191505060405180910390f35b34801561094057600080fd5b506109776004803603604081101561095757600080fd5b8101908080359060200190929190803590602001909291905050506114c7565b6040518082600560200280838360005b838110156109a2578082015181840152602081019050610987565b5050505090500191505060405180910390f35b3480156109c157600080fd5b50610a04600480360360208110156109d857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114ed565b6040518082815260200191505060405180910390f35b348015610a2657600080fd5b50610a6960048036036020811015610a3d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115b6565b604051808381526020018281526020019250505060405180910390f35b348015610a9257600080fd5b50610ac960048036036040811015610aa957600080fd5b8101908080359060200190929190803590602001909291905050506115d6565b6040518082815260200191505060405180910390f35b348015610aeb57600080fd5b50610b2260048036036040811015610b0257600080fd5b8101908080359060200190929190803590602001909291905050506115f6565b6040518082815260200191505060405180910390f35b348015610b4457600080fd5b50610b7b60048036036040811015610b5b57600080fd5b810190808035906020019092919080359060200190929190505050611616565b6040518082815260200191505060405180910390f35b348015610b9d57600080fd5b50610bea60048036036040811015610bb457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611636565b604051808215151515815260200191505060405180910390f35b348015610c1057600080fd5b50610c19611708565b6040518087815260200186815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610c77578082015181840152602081019050610c5c565b50505050905090810190601f168015610ca45780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b348015610cc357600080fd5b50610d1060048036036040811015610cda57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611730565b604051808215151515815260200191505060405180910390f35b348015610d3657600080fd5b50610d7960048036036020811015610d4d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611750565b005b348015610d8757600080fd5b50610db460048036036020811015610d9e57600080fd5b8101908080359060200190929190505050611767565b604051808a81526020018915151515815260200188151515158152602001871515151581526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600960200280838360005b83811015610e99578082015181840152602081019050610e7e565b50505050905001828152602001995050505050505050505060405180910390f35b348015610ec657600080fd5b50610ecf6117af565b6040518082603360200280838360005b83811015610efa578082015181840152602081019050610edf565b5050505090500191505060405180910390f35b348015610f1957600080fd5b50610f5060048036036040811015610f3057600080fd5b8101908080359060200190929190803590602001909291905050506117c6565b6040518082815260200191505060405180910390f35b348015610f7257600080fd5b50610f9f60048036036020811015610f8957600080fd5b81019080803590602001909291905050506117e6565b6040518082815260200191505060405180910390f35b348015610fc157600080fd5b5061102460048036036040811015610fd857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611803565b6040518082815260200191505060405180910390f35b34801561104657600080fd5b5061107d6004803603604081101561105d57600080fd5b810190808035906020019092919080359060200190929190505050611901565b6040518082815260200191505060405180910390f35b34801561109f57600080fd5b506110cc600480360360208110156110b657600080fd5b8101908080359060200190929190505050611921565b604051808060200180602001878152602001868152602001858152602001848152602001838103835289818151815260200191508051906020019080838360005b8381101561112857808201518184015260208101905061110d565b50505050905090810190601f1680156111555780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b8381101561118e578082015181840152602081019050611173565b50505050905090810190601f1680156111bb5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156111db57600080fd5b506111e4611953565b60405180838152602001821515151581526020019250505060405180910390f35b600061121b82600061196890919063ffffffff16565b9050919050565b61122a612e4d565b611240838360006119889092919063ffffffff16565b905092915050565b600061125e8260006119fe90919063ffffffff16565b9050919050565b60606040518060400160405280600281526020017f5454000000000000000000000000000000000000000000000000000000000000815250905090565b60606040518060400160405280600f81526020017f54656c6c6f722054726962757465730000000000000000000000000000000000815250905090565b60006112eb6000611a3e565b905090565b60008060606112ff6000611a92565b925092509250909192565b6000611320826000611bc690919063ffffffff16565b9050919050565b60008061133e836000611be690919063ffffffff16565b91509150915091565b600061135f83836000611c5f9092919063ffffffff16565b905092915050565b600061137d826000611ca190919063ffffffff16565b9050919050565b611398816000611cc790919063ffffffff16565b50565b60008073__OldTellorTransfer_____________________6389c247e2909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561142a57600080fd5b505af415801561143e573d6000803e3d6000fd5b505050506040513d602081101561145457600080fd5b8101908080519060200190929190505050905092915050565b6000611483826000611df690919063ffffffff16565b9050919050565b60006114a0826000611e1690919063ffffffff16565b9050919050565b60006114bf83836000611e449092919063ffffffff16565b905092915050565b6114cf612e6f565b6114e583836000611eaf9092919063ffffffff16565b905092915050565b60008073__OldTellorTransfer_____________________63bb0a519e9091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561157457600080fd5b505af4158015611588573d6000803e3d6000fd5b505050506040513d602081101561159e57600080fd5b81019080805190602001909291905050509050919050565b6000806115cd836000611f5b90919063ffffffff16565b91509150915091565b60006115ee83836000611ff39092919063ffffffff16565b905092915050565b600061160e8383600061202c9092919063ffffffff16565b905092915050565b600061162e838360006120619092919063ffffffff16565b905092915050565b60008073__OldTellorTransfer_____________________6375f7b5b2909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b1580156116c557600080fd5b505af41580156116d9573d6000803e3d6000fd5b505050506040513d60208110156116ef57600080fd5b8101908080519060200190929190505050905092915050565b6000806000606060008061171c6000612096565b955095509550955095509550909192939495565b6000611748838360006123a09092919063ffffffff16565b905092915050565b61176481600061240e90919063ffffffff16565b50565b600080600080600080600061177a612e91565b60006117908a60006125a090919063ffffffff16565b9850985098509850985098509850985098509193959799909294969850565b6117b7612eb4565b6117c16000612976565b905090565b60006117de838360006129c59092919063ffffffff16565b905092915050565b60006117fc8260006129fa90919063ffffffff16565b9050919050565b60008073__OldTellorTransfer_____________________63adf5211b909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b1580156118be57600080fd5b505af41580156118d2573d6000803e3d6000fd5b505050506040513d60208110156118e857600080fd5b8101908080519060200190929190505050905092915050565b600061191983836000612a1a9092919063ffffffff16565b905092915050565b60608060008060008061193e876000612a4f90919063ffffffff16565b95509550955095509550955091939550919395565b6000806119606000612cae565b915091509091565b600082604201600083815260200190815260200160002054905092915050565b611990612e4d565b83604801600084815260200190815260200160002060090160008381526020019081526020016000206005806020026040519081016040528092919082600580156119f0576020028201915b8154815260200190600101908083116119dc575b505050505090509392505050565b600082603f01600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b600081604001600060405180807f746f74616c5f737570706c790000000000000000000000000000000000000000815250600c01905060405180910390208152602001908152602001600020549050919050565b60008060606000611aa285612d70565b905080856048016000838152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054866048016000848152602001908152602001600020600001808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bb15780601f10611b8657610100808354040283529160200191611bb1565b820191906000526020600020905b815481529060010190602001808311611b9457829003601f168201915b50505050509050935093509350509193909250565b600082604901600083815260200190815260200160002054905092915050565b60008060008460480160008581526020019081526020016000209050600081600301805490501115611c4c57611c40858583600301600185600301805490500381548110611c3057fe5b9060005260206000200154612061565b60019250925050611c58565b60008081915092509250505b9250929050565b6000836048016000848152602001908152602001600020600701600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b600082604801600083815260200190815260200160002060030180549050905092915050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d6957600080fd5b8082603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600082604001600083815260200190815260200160002054905092915050565b60006032821115611e2657600080fd5b82604301600083815260200190815260200160002054905092915050565b600083604101600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b611eb7612e6f565b8360480160008481526020019081526020016000206008016000838152602001908152602001600020600580602002604051908101604052809291908260058015611f4d576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611f03575b505050505090509392505050565b6000808360470160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548460470160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154915091509250929050565b6000836048016000848152602001908152602001600020600301828154811061201857fe5b906000526020600020015490509392505050565b600083604401600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600083604801600084815260200190815260200160002060060160008381526020019081526020016000205490509392505050565b60008060006060600080866000015487604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205488604001600060405180807f646966666963756c747900000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020548960480160008b604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205481526020019081526020016000206000018a60480160008c604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020548b60480160008d604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123845780601f1061235957610100808354040283529160200191612384565b820191906000526020600020905b81548152906001019060200180831161236757829003601f168201915b5050505050925095509550955095509550955091939550919395565b600083604401600084815260200190815260200160002060060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146124b057600080fd5b8082603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b60008060008060008060006125b3612e91565b6000808b60440160008c8152602001908152602001600020905080600001548160020160009054906101000a900460ff168260020160019054906101000a900460ff168360020160029054906101000a900460ff168460020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180610120016040528089600501600060405180807f726571756573744964000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f76616c756500000000000000000000000000000000000000000000000000000081525060050190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e457865637574696f6e446174650000000000000000000000000000000081525060100190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6e756d6265724f66566f74657300000000000000000000000000000000000000815250600d0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f626c6f636b4e756d626572000000000000000000000000000000000000000000815250600b0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e6572536c6f74000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f71756f72756d000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6665650000000000000000000000000000000000000000000000000000000000815250600301905060405180910390208152602001908152602001600020548152508860010154995099509950995099509950995099509950509295985092959850929598565b61297e612eb4565b816001016033806020026040519081016040528092919082603380156129b9576020028201915b8154815260200190600101908083116129a5575b50505050509050919050565b600083604801600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600082604a01600083815260200190815260200160002054905092915050565b600083604801600084815260200190815260200160002060040160008381526020019081526020016000205490509392505050565b606080600080600080600088604801600089815260200190815260200160002090508060000181600101826002015483600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205484600401600060405180807f7265717565737451506f736974696f6e000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205485600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054858054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612bf45780601f10612bc957610100808354040283529160200191612bf4565b820191906000526020600020905b815481529060010190602001808311612bd757829003601f168201915b50505050509550848054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c905780601f10612c6557610100808354040283529160200191612c90565b820191906000526020600020905b815481529060010190602001808311612c7357829003601f168201915b50505050509450965096509650965096509650509295509295509295565b600080612d658384604201600086604001600060405180807f74696d654f664c6173744e657756616c756500000000000000000000000000008152506012019050604051809103902081526020019081526020016000205481526020019081526020016000205485604001600060405180807f74696d654f664c6173744e657756616c7565000000000000000000000000000081525060120190506040518091039020815260200190815260200160002054612061565b600191509150915091565b6000806000612dbd84600101603380602002604051908101604052809291908260338015612db3576020028201915b815481526020019060010190808311612d9f575b5050505050612de4565b80925081935050508360430160008281526020019081526020016000205492505050919050565b60008082600160338110612df457fe5b602002015191506000600190505b6033811015612e475782848260338110612e1857fe5b60200201511115612e3a57838160338110612e2f57fe5b602002015192508091505b8080600101915050612e02565b50915091565b6040518060a00160405280600590602082028038833980820191505090505090565b6040518060a00160405280600590602082028038833980820191505090505090565b604051806101200160405280600990602082028038833980820191505090505090565b60405180610660016040528060339060208202803883398082019150509050509056fea265627a7a72315820f141952f69fc0ff8703817369f731c791c5517f41b73844e50a298c8f138ac3464736f6c63430005100032",
  "sourceMap": "339:2188:3:-;;;741:327;8:9:-1;5:2;;;30:1;27;20:12;5:2;741:327:3;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;741:327:3;;;;;;;;;;;;;;;;797:6;:11;;;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;797:13:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;797:13:3;;;;863:10;821:6;:18;;:39;840:19;;;;;;;;;;;;;;;;;;;821:39;;;;;;;;;;;;:52;;;;;;;;;;;;;;;;;;926:10;884:6;:18;;:39;903:19;;;;;;;;;;;;;;;;;;;884:39;;;;;;;;;;;;:52;;;;;;;;;;;;;;;;;;996:15;947:6;:18;;:47;966:27;;;;;;;;;;;;;;;;;;;947:47;;;;;;;;;;;;:64;;;;;;;;;;;;;;;;;;1027:33;1044:15;1027:33;;;;;;;;;;;;;;;;;;;;;;741:327;339:2188;;;;;;",
  "deployedSourceMap": "339:2188:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1887:12;1902:6;:18;;:47;1921:27;;;;;;;;;;;;;;;;;;;1902:47;;;;;;;;;;;;;;;;;;;;;1887:62;;1960:22;1985:8;;1960:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1960:33:3;;;;;;;;2112:1;2109;2097:9;2091:16;2084:4;2073:9;2069:20;2063:4;2059:1;2055:6;2042:72;2140:14;2185:4;2179:11;2227:4;2224:1;2219:3;2204:28;2428:6;2440:1;2435:28;;;;2499:4;2494:3;2487:17;2435:28;2456:4;2451:3;2444:17;8823:149:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8823:149:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8823:149:2;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11584:187;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11584:187:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11584:187:2;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11584:187:2;;;;;;;;;;;;;;;;3447:123;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3447:123:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3447:123:2;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;11877:87;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11877:87:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11877:87:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7711:98;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7711:98:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;7711:98:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14380:97;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14380:97:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;13313:134;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13313:134:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;13313:134:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9195:148;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9195:148:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9195:148:2;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6593:142;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6593:142:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6593:142:2;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13733:149;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13733:149:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13733:149:2;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;8182:153;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8182:153:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8182:153:2;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1285:96:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1285:96:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1285:96:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;2142:148:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2142:148:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2142:148:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;12958:110;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12958:110:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12958:110:2;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8511:145;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8511:145:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8511:145:2;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2604:139;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2604:139:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2604:139:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7403:204;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7403:204:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7403:204:2;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;7403:204:2;;;;;;;;;;;;;;;;1748:113;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1748:113:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1748:113:2;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11152:127;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11152:127:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11152:127:2;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;12190:181;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12190:181:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12190:181:2;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5858:155;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5858:155:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5858:155:2;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;14110:153;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14110:153:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14110:153:2;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1398:141;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1398:141:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1398:141:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4849:155;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4849:155:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4849:155:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2948:140;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2948:140:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2948:140:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1578:126:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1578:126:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1578:126:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;4354:199:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4354:199:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4354:199:2;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4354:199:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9456:105;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9456:105:2;;;:::i;:::-;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;9456:105:2;;;;;;;;;;;;;;;;6988:159;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6988:159:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6988:159:2;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5207:143;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5207:143:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5207:143:2;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;999:138;;8:9:-1;5:2;;;30:1;27;20:12;5:2;999:138:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;999:138:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10143:155;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10143:155:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10143:155:2;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10725:177;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10725:177:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10725:177:2;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10725:177:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10725:177:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6233:109;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6233:109:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8823:149;8895:4;8922:42;8953:10;8922:6;:30;;:42;;;;:::i;:::-;8915:49;;8823:149;;;:::o;11584:187::-;11675:14;;:::i;:::-;11708:55;11741:10;11752;11708:6;:32;;:55;;;;;:::i;:::-;11701:62;;11584:187;;;;:::o;3447:123::-;3508:7;3534:28;3556:5;3534:6;:21;;:28;;;;:::i;:::-;3527:35;;3447:123;;;:::o;11877:87::-;11920:13;11945:11;;;;;;;;;;;;;;;;;;;11877:87;:::o;7711:98::-;7752:13;7777:24;;;;;;;;;;;;;;;;;;;7711:98;:::o;14380:97::-;14426:4;14449:20;:6;:18;:20::i;:::-;14442:27;;14380:97;:::o;13313:134::-;13365:4;13371;13376:13;13412:27;:6;:25;:27::i;:::-;13405:34;;;;;;13313:134;;;:::o;9195:148::-;9268:4;9295:40;9326:8;9295:6;:30;;:40;;;;:::i;:::-;9288:47;;9195:148;;;:::o;6593:142::-;6661:4;6666;6689:38;6716:10;6689:6;:26;;:38;;;;:::i;:::-;6682:45;;;;6593:142;;;:::o;13733:149::-;13810:4;13833:41;13852:10;13863;13833:6;:18;;:41;;;;;:::i;:::-;13826:48;;13733:149;;;;:::o;8182:153::-;8258:4;8281:46;8316:10;8281:6;:34;;:46;;;;:::i;:::-;8274:53;;8182:153;;;:::o;1285:96:3:-;1344:29;1363:9;1344:6;:18;;:29;;;;:::i;:::-;1285:96;:::o;2142:148:2:-;2220:4;2244:6;:18;;;;2263:5;2269:12;2244:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2244:38:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2244:38:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2244:38:2;;;;;;;;;;;;;;;;2237:45;;2142:148;;;;:::o;12958:110::-;13013:4;13036:24;13054:5;13036:6;:17;;:24;;;;:::i;:::-;13029:31;;12958:110;;;:::o;8511:145::-;8583:4;8606:42;8641:6;8606;:34;;:42;;;;:::i;:::-;8599:49;;8511:145;;;:::o;2604:139::-;2679:4;2702:33;2717:10;2728:6;2702;:14;;:33;;;;;:::i;:::-;2695:40;;2604:139;;;;:::o;7403:204::-;7501:17;;:::i;:::-;7537:62;7577:10;7588;7537:6;:39;;:62;;;;;:::i;:::-;7530:69;;7403:204;;;;:::o;1748:113::-;1805:4;1830:6;:16;;;;1847:5;1830:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1830:23:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1830:23:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1830:23:2;;;;;;;;;;;;;;;;1823:30;;1748:113;;;:::o;11152:127::-;11214:4;11219;11242:29;11263:7;11242:6;:20;;:29;;;;:::i;:::-;11235:36;;;;11152:127;;;:::o;12190:181::-;12283:4;12306:57;12345:10;12356:6;12306;:38;;:57;;;;;:::i;:::-;12299:64;;12190:181;;;;:::o;5858:155::-;5939:4;5962:43;5988:10;5999:5;5962:6;:25;;:43;;;;;:::i;:::-;5955:50;;5858:155;;;;:::o;14110:153::-;14189:4;14213:42;14233:10;14244;14213:6;:19;;:42;;;;;:::i;:::-;14206:49;;14110:153;;;;:::o;1398:141::-;1472:4;1495:6;:21;;;;1517:5;1523:7;1495:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1495:36:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1495:36:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1495:36:2;;;;;;;;;;;;;;;;1488:43;;1398:141;;;;:::o;4849:155::-;4902:7;4911:4;4917;4922:13;4936:4;4941;4968:28;:6;:26;:28::i;:::-;4961:35;;;;;;;;;;;;4849:155;;;;;;:::o;2948:140::-;3022:4;3045:35;3060:10;3071:8;3045:6;:14;;:35;;;;;:::i;:::-;3038:42;;2948:140;;;;:::o;1578:126:3:-;1652:44;1680:15;1652:6;:27;;:44;;;;:::i;:::-;1578:126;:::o;4354:199:2:-;4418:7;4427:4;4433;4439;4445:7;4454;4463;4471:14;;:::i;:::-;4487:3;4509:36;4534:10;4509:6;:24;;:36;;;;:::i;:::-;4502:43;;;;;;;;;;;;;;;;;;4354:199;;;;;;;;;;;:::o;9456:105::-;9499:15;;:::i;:::-;9533:20;:6;:18;:20::i;:::-;9526:27;;9456:105;:::o;6988:159::-;7070:4;7093:46;7117:10;7128;7093:6;:23;;:46;;;;;:::i;:::-;7086:53;;6988:159;;;;:::o;5207:143::-;5279:4;5303:39;5336:5;5303:6;:32;;:39;;;;:::i;:::-;5295:47;;5207:143;;;:::o;999:138::-;1074:4;1097:6;:16;;;;1114:5;1120:8;1097:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1097:32:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1097:32:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1097:32:2;;;;;;;;;;;;;;;;1090:39;;999:138;;;;:::o;10143:155::-;10224:4;10247:43;10273:10;10284:5;10247:6;:25;;:43;;;;;:::i;:::-;10240:50;;10143:155;;;;:::o;10725:177::-;10788:13;10803;10817:7;10825:4;10831;10837;10861:33;10883:10;10861:6;:21;;:33;;;;:::i;:::-;10854:40;;;;;;;;;;;;10725:177;;;;;;;:::o;6233:109::-;6282:4;6287;6310:24;:6;:22;:24::i;:::-;6303:31;;;;6233:109;;:::o;10039:195:6:-;10162:4;10189;:25;;:37;10215:10;10189:37;;;;;;;;;;;;10182:44;;10039:195;;;;:::o;13400:244::-;13542:14;;:::i;:::-;13575:4;:19;;:31;13595:10;13575:31;;;;;;;;;;;:49;;:61;13625:10;13575:61;;;;;;;;;;;13568:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13400:244;;;;;:::o;2921:169::-;3033:7;3059:4;:16;;:23;3076:5;3059:23;;;;;;;;;;;;;;;;;;;;;3052:30;;2921:169;;;;:::o;17056:166::-;17151:4;17174;:13;;:40;17188:25;;;;;;;;;;;;;;;;;;;17174:40;;;;;;;;;;;;17167:47;;17056:166;;;:::o;15092:334::-;15193:4;15199;15204:13;15230:17;15250:21;15266:4;15250:15;:21::i;:::-;15230:41;;15290:12;15303:4;:19;;:33;15323:12;15303:33;;;;;;;;;;;:45;;:68;15349:21;;;;;;;;;;;;;;;;;;;15303:68;;;;;;;;;;;;15372:4;:19;;:33;15392:12;15372:33;;;;;;;;;;;:45;;15282:136;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15092:334;;;;;:::o;10455:198::-;10581:4;10608;:25;;:37;10634:10;10608:37;;;;;;;;;;;;10601:44;;10455:198;;;;:::o;7450:467::-;7568:4;7573;7589:41;7633:4;:19;;:31;7653:10;7633:31;;;;;;;;;;;7589:75;;7715:1;7679:8;:26;;:33;;;;:37;7676:234;;;7740:95;7753:4;7758:10;7769:8;:26;;7832:1;7796:8;:26;;:33;;;;:37;7769:65;;;;;;;;;;;;;;;;7740:12;:95::i;:::-;7836:4;7732:109;;;;;;;7676:234;7890:1;7892:5;7882:16;;;;;;;;7450:467;;;;;;:::o;16261:212::-;16389:4;16412;:19;;:31;16432:10;16412:31;;;;;;;;;;;:41;;:53;16454:10;16412:53;;;;;;;;;;;;;;;;;;;;;16405:60;;16261:212;;;;;:::o;9259:214::-;9386:4;9409;:19;;:31;9429:10;9409:31;;;;;;;;;;;:49;;:56;;;;9402:63;;9259:214;;;;:::o;845:237::-;1004:10;963:51;;:4;:16;;:37;980:19;;;;;;;;;;;;;;;;;;;963:37;;;;;;;;;;;;;;;;;;;;;:51;;;955:60;;;;;;1065:9;1026:4;:16;;:37;1043:19;;;;;;;;;;;;;;;;;;;1026:37;;;;;;;;;;;;:48;;;;;;;;;;;;;;;;;;845:237;;:::o;14689:158::-;14796:4;14819;:13;;:20;14833:5;14819:20;;;;;;;;;;;;14812:27;;14689:158;;;;:::o;9649:223::-;9772:4;9806:2;9796:6;:12;;9788:21;;;;;;9827:4;:29;;:37;9857:6;9827:37;;;;;;;;;;;;9820:44;;9649:223;;;;:::o;1945:198::-;2070:4;2093;:22;;:34;2116:10;2093:34;;;;;;;;;;;:42;2128:6;2093:42;;;;;;;;;;;;;;;;;;;;;;;;;2086:49;;1945:198;;;;;:::o;8638:250::-;8787:17;;:::i;:::-;8823:4;:19;;:31;8843:10;8823:31;;;;;;;;;;;:45;;:57;8869:10;8823:57;;;;;;;;;;;8816:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8638:250;;;;;:::o;12872:229::-;12984:4;12989;13013;:18;;:27;13032:7;13013:27;;;;;;;;;;;;;;;:41;;;13055:4;:18;;:27;13074:7;13055:27;;;;;;;;;;;;;;;:37;;;13005:88;;;;12872:229;;;;;:::o;13871:231::-;14014:4;14037;:19;;:31;14057:10;14037:31;;;;;;;;;;;:49;;14087:6;14037:57;;;;;;;;;;;;;;;;14030:64;;13871:231;;;;;:::o;6480:214::-;6611:4;6634;:17;;:29;6652:10;6634:29;;;;;;;;;;;:45;;:52;6680:5;6634:52;;;;;;;;;;;;6627:59;;6480:214;;;;;:::o;16722:217::-;16852:4;16876;:19;;:31;16896:10;16876:31;;;;;;;;;;;:43;;:55;16920:10;16876:55;;;;;;;;;;;;16869:62;;16722:217;;;;;:::o;5017:566::-;5119:7;5128:4;5134;5139:13;5153:4;5158;5186;:21;;;5208:4;:13;;:44;5222:29;;;;;;;;;;;;;;;;;;;5208:44;;;;;;;;;;;;5253:4;:13;;:38;5267:23;;;;;;;;;;;;;;;;;;;5253:38;;;;;;;;;;;;5292:4;:19;;:65;5312:4;:13;;:44;5326:29;;;;;;;;;;;;;;;;;;;5312:44;;;;;;;;;;;;5292:65;;;;;;;;;;;:77;;5370:4;:19;;:65;5390:4;:13;;:44;5404:29;;;;;;;;;;;;;;;;;;;5390:44;;;;;;;;;;;;5370:65;;;;;;;;;;;:77;;:103;5448:24;;;;;;;;;;;;;;;;;;;5370:103;;;;;;;;;;;;5474:4;:19;;:65;5494:4;:13;;:44;5508:29;;;;;;;;;;;;;;;;;;;5494:44;;;;;;;;;;;;5474:65;;;;;;;;;;;:77;;:100;5552:21;;;;;;;;;;;;;;;;;;;5474:100;;;;;;;;;;;;5178:397;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5017:566;;;;;;;:::o;2362:200::-;2486:4;2509;:17;;:29;2527:10;2509:29;;;;;;;;;;;:35;;:45;2545:8;2509:45;;;;;;;;;;;;;;;;;;;;;;;;;2502:52;;2362:200;;;;;:::o;1289:314::-;1462:10;1421:51;;:4;:16;;:37;1438:19;;;;;;;;;;;;;;;;;;;1421:37;;;;;;;;;;;;;;;;;;;;;:51;;;1413:60;;;;;;1531:15;1484:4;:16;;:45;1501:27;;;;;;;;;;;;;;;;;;;1484:45;;;;;;;;;;;;:62;;;;;;;;;;;;;;;;;;1562:33;1579:15;1562:33;;;;;;;;;;;;;;;;;;;;;;1289:314;;:::o;3874:851::-;3990:7;3999:4;4005;4011;4017:7;4026;4035;4043:14;;:::i;:::-;4059:3;4074:37;4114:4;:17;;:29;4132:10;4114:29;;;;;;;;;;;4074:69;;4161:4;:9;;;4171:4;:13;;;;;;;;;;;;4186:4;:22;;;;;;;;;;;;4210:4;:15;;;;;;;;;;;;4227:4;:18;;;;;;;;;;;;4247:4;:19;;;;;;;;;;;;4267:4;:24;;;;;;;;;;;;4154:563;;;;;;;;4293:4;:20;;:44;4314:22;;;;;;;;;;;;;;;;;;;4293:44;;;;;;;;;;;;4154:563;;;;4339:4;:20;;:44;4360:22;;;;;;;;;;;;;;;;;;;4339:44;;;;;;;;;;;;4154:563;;;;4385:4;:20;;:40;4406:18;;;;;;;;;;;;;;;;;;;4385:40;;;;;;;;;;;;4154:563;;;;4427:4;:20;;:51;4448:29;;;;;;;;;;;;;;;;;;;4427:51;;;;;;;;;;;;4154:563;;;;4480:4;:20;;:48;4501:26;;;;;;;;;;;;;;;;;;;4480:48;;;;;;;;;;;;4154:563;;;;4530:4;:20;;:46;4551:24;;;;;;;;;;;;;;;;;;;4530:46;;;;;;;;;;;;4154:563;;;;4578:4;:20;;:44;4599:22;;;;;;;;;;;;;;;;;;;4578:44;;;;;;;;;;;;4154:563;;;;4624:4;:20;;:41;4645:19;;;;;;;;;;;;;;;;;;;4624:41;;;;;;;;;;;;4154:563;;;;4666:4;:20;;:38;4687:16;;;;;;;;;;;;;;;;;;;4666:38;;;;;;;;;;;;4154:563;;;4706:4;:10;;;4154:563;;;;;;;;;;;;;;;;;;;3874:851;;;;;;;;;;;:::o;10766:149::-;10860:15;;:::i;:::-;10894:4;:13;;10887:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10766:149;;;:::o;8162:220::-;8294:4;8317;:19;;:31;8337:10;8317:31;;;;;;;;;;;:45;;:57;8363:10;8317:57;;;;;;;;;;;;8310:64;;8162:220;;;;;:::o;5788:188::-;5910:4;5934;:27;;:34;5962:5;5934:34;;;;;;;;;;;;5926:42;;5788:188;;;;:::o;11497:212::-;11628:4;11651;:19;;:31;11671:10;11651:31;;;;;;;;;;;:43;;:50;11695:5;11651:50;;;;;;;;;;;;11644:57;;11497:212;;;;;:::o;12136:486::-;12249:13;12263;12278:7;12286:4;12292;12298;12315:41;12359:4;:19;;:31;12379:10;12359:31;;;;;;;;;;;12315:75;;12410:8;:20;;12431:8;:19;;12451:8;:18;;;12471:8;:20;;:46;12492:24;;;;;;;;;;;;;;;;;;;12471:46;;;;;;;;;;;;12518:8;:20;;:51;12539:29;;;;;;;;;;;;;;;;;;;12518:51;;;;;;;;;;;;12570:8;:20;;:43;12591:21;;;;;;;;;;;;;;;;;;;12570:43;;;;;;;;;;;;12402:212;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12136:486;;;;;;;;:::o;6918:281::-;7016:4;7021;7045:140;7058:4;7063;:25;;:73;7089:4;:13;;:46;7103:31;;;;;;;;;;;;;;;;;;;7089:46;;;;;;;;;;;;7063:73;;;;;;;;;;;;7138:4;:13;;:46;7152:31;;;;;;;;;;;;;;;;;;;7138:46;;;;;;;;;;;;7045:12;:140::i;:::-;7186:4;7037:154;;;;6918:281;;;:::o;15676:303::-;15774:15;15805:9;15829:11;15871:34;15891:4;:13;;15871:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:19;:34::i;:::-;15855:50;;;;;;;;15934:4;:29;;:37;15964:6;15934:37;;;;;;;;;;;;15921:50;;15676:303;;;;;:::o;322:310:11:-;382:11;394:16;429:4;434:1;429:7;;;;;;;;;;;423:13;;470:6;477:1;470:8;;466:159;483:11;479:1;:15;466:159;;;527:3;517:4;522:1;517:7;;;;;;;;;;;:13;514:100;;;556:4;561:1;556:7;;;;;;;;;;;550:13;;593:1;582:12;;514:100;495:3;;;;;;;466:159;;;;322:310;;;:::o;339:2188:3:-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;339:2188:3;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;339:2188:3;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;339:2188:3;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;339:2188:3;;;;:::o",
  "source": "pragma solidity ^0.5.0;\r\n\r\nimport \"./OldTellorGetters.sol\";\r\n\r\n/**\r\n* @title Tellor Master\r\n* @dev This is the Master contract with all tellor getter functions and delegate call to Tellor. \r\n* The logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer, \r\n* TellorGettersLibrary, and TellorStake\r\n*/\r\ncontract OldTellorMaster is OldTellorGetters{\r\n    \r\n    event NewTellorAddress(address _newTellor);\r\n\r\n    /**\r\n    * @dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\r\n    * account, the tellor contract to the Tellor master address and owner to the Tellor master owner address \r\n    * @param _tellorContract is the address for the tellor contract\r\n    */\r\n    constructor (address _tellorContract)  public{\r\n        tellor.init();\r\n        tellor.addressVars[keccak256(\"_owner\")] = msg.sender;\r\n        tellor.addressVars[keccak256(\"_deity\")] = msg.sender;\r\n        tellor.addressVars[keccak256(\"tellorContract\")]= _tellorContract;\r\n        emit NewTellorAddress(_tellorContract);\r\n    }\r\n    \r\n\r\n    /**\r\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \r\n    * @dev Only needs to be in library\r\n    * @param _newDeity the new Deity in the contract\r\n    */\r\n\r\n    function changeDeity(address _newDeity) external{\r\n        tellor.changeDeity(_newDeity);\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\r\n    * @param _tellorContract the address of the new Tellor Contract\r\n    */\r\n    function changeTellorContract(address _tellorContract) external{\r\n        tellor.changeTellorContract(_tellorContract);\r\n    }\r\n  \r\n\r\n    /**\r\n    * @dev This is the fallback function that allows contracts to call the tellor contract at the address stored\r\n    */\r\n    function () external payable {\r\n        address addr = tellor.addressVars[keccak256(\"tellorContract\")];\r\n        bytes memory _calldata = msg.data;\r\n        assembly {\r\n            let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\r\n            let size := returndatasize\r\n            let ptr := mload(0x40)\r\n            returndatacopy(ptr, 0, size)\r\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\r\n            // if the call returned error data, forward it\r\n            switch result case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n}",
  "sourcePath": "C:\\company\\code\\tellorlegacy\\contracts\\oldContracts\\OldTellorMaster.sol",
  "ast": {
    "absolutePath": "/C/company/code/tellorlegacy/contracts/oldContracts/OldTellorMaster.sol",
    "exportedSymbols": {
      "OldTellorMaster": [
        907
      ]
    },
    "id": 908,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 809,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:3"
      },
      {
        "absolutePath": "/C/company/code/tellorlegacy/contracts/oldContracts/OldTellorGetters.sol",
        "file": "./OldTellorGetters.sol",
        "id": 810,
        "nodeType": "ImportDirective",
        "scope": 908,
        "sourceUnit": 808,
        "src": "27:32:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 811,
              "name": "OldTellorGetters",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 807,
              "src": "367:16:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_OldTellorGetters_$807",
                "typeString": "contract OldTellorGetters"
              }
            },
            "id": 812,
            "nodeType": "InheritanceSpecifier",
            "src": "367:16:3"
          }
        ],
        "contractDependencies": [
          807
        ],
        "contractKind": "contract",
        "documentation": "@title Tellor Master\n@dev This is the Master contract with all tellor getter functions and delegate call to Tellor. \nThe logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer, \nTellorGettersLibrary, and TellorStake",
        "fullyImplemented": true,
        "id": 907,
        "linearizedBaseContracts": [
          907,
          807
        ],
        "name": "OldTellorMaster",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 816,
            "name": "NewTellorAddress",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 815,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 814,
                  "indexed": false,
                  "name": "_newTellor",
                  "nodeType": "VariableDeclaration",
                  "scope": 816,
                  "src": "419:18:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 813,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "419:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "418:20:3"
            },
            "src": "396:43:3"
          },
          {
            "body": {
              "id": 862,
              "nodeType": "Block",
              "src": "786:282:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 821,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 322,
                        "src": "797:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$5085_storage",
                          "typeString": "struct OldTellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 823,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "init",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4738,
                      "src": "797:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_TellorStorageStruct_$5085_storage_ptr_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$5085_storage_ptr_$",
                        "typeString": "function (struct OldTellorStorage.TellorStorageStruct storage pointer)"
                      }
                    },
                    "id": 824,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "797:13:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 825,
                  "nodeType": "ExpressionStatement",
                  "src": "797:13:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 835,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 826,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 322,
                          "src": "821:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$5085_storage",
                            "typeString": "struct OldTellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 831,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5035,
                        "src": "821:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 832,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6f776e6572",
                            "id": 829,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "850:8:3",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            },
                            "value": "_owner"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            }
                          ],
                          "id": 828,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 18962,
                          "src": "840:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 830,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "840:19:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "821:39:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 833,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 18968,
                        "src": "863:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 834,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "863:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "821:52:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 836,
                  "nodeType": "ExpressionStatement",
                  "src": "821:52:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 846,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 837,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 322,
                          "src": "884:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$5085_storage",
                            "typeString": "struct OldTellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 842,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5035,
                        "src": "884:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 843,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6465697479",
                            "id": 840,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "913:8:3",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            },
                            "value": "_deity"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            }
                          ],
                          "id": 839,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 18962,
                          "src": "903:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 841,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "903:19:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "884:39:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 844,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 18968,
                        "src": "926:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 845,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "926:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "884:52:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 847,
                  "nodeType": "ExpressionStatement",
                  "src": "884:52:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 856,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 848,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 322,
                          "src": "947:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$5085_storage",
                            "typeString": "struct OldTellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 853,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5035,
                        "src": "947:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 854,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "74656c6c6f72436f6e7472616374",
                            "id": 851,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "976:16:3",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            },
                            "value": "tellorContract"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            }
                          ],
                          "id": 850,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 18962,
                          "src": "966:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 852,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "966:27:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "947:47:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 855,
                      "name": "_tellorContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 818,
                      "src": "996:15:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "947:64:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 857,
                  "nodeType": "ExpressionStatement",
                  "src": "947:64:3"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 859,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 818,
                        "src": "1044:15:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 858,
                      "name": "NewTellorAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 816,
                      "src": "1027:16:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 860,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1027:33:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 861,
                  "nodeType": "EmitStatement",
                  "src": "1022:38:3"
                }
              ]
            },
            "documentation": "@dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\naccount, the tellor contract to the Tellor master address and owner to the Tellor master owner address \n@param _tellorContract is the address for the tellor contract",
            "id": 863,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 819,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 818,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 863,
                  "src": "754:23:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 817,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "754:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "753:25:3"
            },
            "returnParameters": {
              "id": 820,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "786:0:3"
            },
            "scope": 907,
            "src": "741:327:3",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 874,
              "nodeType": "Block",
              "src": "1333:48:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 871,
                        "name": "_newDeity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 865,
                        "src": "1363:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 868,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 322,
                        "src": "1344:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$5085_storage",
                          "typeString": "struct OldTellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 870,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeDeity",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2112,
                      "src": "1344:18:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$5085_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$5085_storage_ptr_$",
                        "typeString": "function (struct OldTellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 872,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1344:29:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 873,
                  "nodeType": "ExpressionStatement",
                  "src": "1344:29:3"
                }
              ]
            },
            "documentation": "@dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \n@dev Only needs to be in library\n@param _newDeity the new Deity in the contract",
            "id": 875,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeDeity",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 866,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 865,
                  "name": "_newDeity",
                  "nodeType": "VariableDeclaration",
                  "scope": 875,
                  "src": "1306:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 864,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1306:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1305:19:3"
            },
            "returnParameters": {
              "id": 867,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1333:0:3"
            },
            "scope": 907,
            "src": "1285:96:3",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 886,
              "nodeType": "Block",
              "src": "1641:63:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 883,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 877,
                        "src": "1680:15:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 880,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 322,
                        "src": "1652:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$5085_storage",
                          "typeString": "struct OldTellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 882,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeTellorContract",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2146,
                      "src": "1652:27:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$5085_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$5085_storage_ptr_$",
                        "typeString": "function (struct OldTellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 884,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1652:44:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 885,
                  "nodeType": "ExpressionStatement",
                  "src": "1652:44:3"
                }
              ]
            },
            "documentation": "@dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\n@param _tellorContract the address of the new Tellor Contract",
            "id": 887,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeTellorContract",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 878,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 877,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 887,
                  "src": "1608:23:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 876,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1608:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1607:25:3"
            },
            "returnParameters": {
              "id": 879,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1641:0:3"
            },
            "scope": 907,
            "src": "1578:126:3",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 905,
              "nodeType": "Block",
              "src": "1876:648:3",
              "statements": [
                {
                  "assignments": [
                    891
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 891,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 905,
                      "src": "1887:12:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 890,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1887:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 898,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 892,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 322,
                        "src": "1902:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$5085_storage",
                          "typeString": "struct OldTellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 893,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "addressVars",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 5035,
                      "src": "1902:18:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 897,
                    "indexExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "74656c6c6f72436f6e7472616374",
                          "id": 895,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1931:16:3",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          },
                          "value": "tellorContract"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          }
                        ],
                        "id": 894,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 18962,
                        "src": "1921:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 896,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1921:27:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1902:47:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1887:62:3"
                },
                {
                  "assignments": [
                    900
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 900,
                      "name": "_calldata",
                      "nodeType": "VariableDeclaration",
                      "scope": 905,
                      "src": "1960:22:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 899,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1960:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 903,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 901,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18968,
                      "src": "1985:3:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 902,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "data",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "1985:8:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_calldata_ptr",
                      "typeString": "bytes calldata"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1960:33:3"
                },
                {
                  "externalReferences": [
                    {
                      "_calldata": {
                        "declaration": 900,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2097:9:3",
                        "valueSize": 1
                      }
                    },
                    {
                      "_calldata": {
                        "declaration": 900,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2073:9:3",
                        "valueSize": 1
                      }
                    },
                    {
                      "addr": {
                        "declaration": 891,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2063:4:3",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 904,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n    let size := returndatasize()\n    let ptr := mload(0x40)\n    returndatacopy(ptr, 0, size)\n    switch result\n    case 0 { revert(ptr, size) }\n    default { return(ptr, size) }\n}",
                  "src": "2004:513:3"
                }
              ]
            },
            "documentation": "@dev This is the fallback function that allows contracts to call the tellor contract at the address stored",
            "id": 906,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 888,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1856:2:3"
            },
            "returnParameters": {
              "id": 889,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1876:0:3"
            },
            "scope": 907,
            "src": "1847:677:3",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 908,
        "src": "339:2188:3"
      }
    ],
    "src": "0:2527:3"
  },
  "legacyAST": {
    "absolutePath": "/C/company/code/tellorlegacy/contracts/oldContracts/OldTellorMaster.sol",
    "exportedSymbols": {
      "OldTellorMaster": [
        907
      ]
    },
    "id": 908,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 809,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:3"
      },
      {
        "absolutePath": "/C/company/code/tellorlegacy/contracts/oldContracts/OldTellorGetters.sol",
        "file": "./OldTellorGetters.sol",
        "id": 810,
        "nodeType": "ImportDirective",
        "scope": 908,
        "sourceUnit": 808,
        "src": "27:32:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 811,
              "name": "OldTellorGetters",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 807,
              "src": "367:16:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_OldTellorGetters_$807",
                "typeString": "contract OldTellorGetters"
              }
            },
            "id": 812,
            "nodeType": "InheritanceSpecifier",
            "src": "367:16:3"
          }
        ],
        "contractDependencies": [
          807
        ],
        "contractKind": "contract",
        "documentation": "@title Tellor Master\n@dev This is the Master contract with all tellor getter functions and delegate call to Tellor. \nThe logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer, \nTellorGettersLibrary, and TellorStake",
        "fullyImplemented": true,
        "id": 907,
        "linearizedBaseContracts": [
          907,
          807
        ],
        "name": "OldTellorMaster",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 816,
            "name": "NewTellorAddress",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 815,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 814,
                  "indexed": false,
                  "name": "_newTellor",
                  "nodeType": "VariableDeclaration",
                  "scope": 816,
                  "src": "419:18:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 813,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "419:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "418:20:3"
            },
            "src": "396:43:3"
          },
          {
            "body": {
              "id": 862,
              "nodeType": "Block",
              "src": "786:282:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 821,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 322,
                        "src": "797:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$5085_storage",
                          "typeString": "struct OldTellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 823,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "init",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4738,
                      "src": "797:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_TellorStorageStruct_$5085_storage_ptr_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$5085_storage_ptr_$",
                        "typeString": "function (struct OldTellorStorage.TellorStorageStruct storage pointer)"
                      }
                    },
                    "id": 824,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "797:13:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 825,
                  "nodeType": "ExpressionStatement",
                  "src": "797:13:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 835,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 826,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 322,
                          "src": "821:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$5085_storage",
                            "typeString": "struct OldTellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 831,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5035,
                        "src": "821:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 832,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6f776e6572",
                            "id": 829,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "850:8:3",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            },
                            "value": "_owner"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            }
                          ],
                          "id": 828,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 18962,
                          "src": "840:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 830,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "840:19:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "821:39:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 833,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 18968,
                        "src": "863:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 834,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "863:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "821:52:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 836,
                  "nodeType": "ExpressionStatement",
                  "src": "821:52:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 846,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 837,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 322,
                          "src": "884:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$5085_storage",
                            "typeString": "struct OldTellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 842,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5035,
                        "src": "884:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 843,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6465697479",
                            "id": 840,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "913:8:3",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            },
                            "value": "_deity"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            }
                          ],
                          "id": 839,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 18962,
                          "src": "903:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 841,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "903:19:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "884:39:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 844,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 18968,
                        "src": "926:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 845,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "926:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "884:52:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 847,
                  "nodeType": "ExpressionStatement",
                  "src": "884:52:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 856,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 848,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 322,
                          "src": "947:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$5085_storage",
                            "typeString": "struct OldTellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 853,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5035,
                        "src": "947:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 854,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "74656c6c6f72436f6e7472616374",
                            "id": 851,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "976:16:3",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            },
                            "value": "tellorContract"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            }
                          ],
                          "id": 850,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 18962,
                          "src": "966:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 852,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "966:27:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "947:47:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 855,
                      "name": "_tellorContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 818,
                      "src": "996:15:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "947:64:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 857,
                  "nodeType": "ExpressionStatement",
                  "src": "947:64:3"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 859,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 818,
                        "src": "1044:15:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 858,
                      "name": "NewTellorAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 816,
                      "src": "1027:16:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 860,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1027:33:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 861,
                  "nodeType": "EmitStatement",
                  "src": "1022:38:3"
                }
              ]
            },
            "documentation": "@dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\naccount, the tellor contract to the Tellor master address and owner to the Tellor master owner address \n@param _tellorContract is the address for the tellor contract",
            "id": 863,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 819,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 818,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 863,
                  "src": "754:23:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 817,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "754:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "753:25:3"
            },
            "returnParameters": {
              "id": 820,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "786:0:3"
            },
            "scope": 907,
            "src": "741:327:3",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 874,
              "nodeType": "Block",
              "src": "1333:48:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 871,
                        "name": "_newDeity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 865,
                        "src": "1363:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 868,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 322,
                        "src": "1344:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$5085_storage",
                          "typeString": "struct OldTellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 870,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeDeity",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2112,
                      "src": "1344:18:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$5085_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$5085_storage_ptr_$",
                        "typeString": "function (struct OldTellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 872,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1344:29:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 873,
                  "nodeType": "ExpressionStatement",
                  "src": "1344:29:3"
                }
              ]
            },
            "documentation": "@dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \n@dev Only needs to be in library\n@param _newDeity the new Deity in the contract",
            "id": 875,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeDeity",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 866,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 865,
                  "name": "_newDeity",
                  "nodeType": "VariableDeclaration",
                  "scope": 875,
                  "src": "1306:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 864,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1306:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1305:19:3"
            },
            "returnParameters": {
              "id": 867,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1333:0:3"
            },
            "scope": 907,
            "src": "1285:96:3",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 886,
              "nodeType": "Block",
              "src": "1641:63:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 883,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 877,
                        "src": "1680:15:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 880,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 322,
                        "src": "1652:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$5085_storage",
                          "typeString": "struct OldTellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 882,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeTellorContract",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2146,
                      "src": "1652:27:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$5085_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$5085_storage_ptr_$",
                        "typeString": "function (struct OldTellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 884,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1652:44:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 885,
                  "nodeType": "ExpressionStatement",
                  "src": "1652:44:3"
                }
              ]
            },
            "documentation": "@dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\n@param _tellorContract the address of the new Tellor Contract",
            "id": 887,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeTellorContract",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 878,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 877,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 887,
                  "src": "1608:23:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 876,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1608:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1607:25:3"
            },
            "returnParameters": {
              "id": 879,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1641:0:3"
            },
            "scope": 907,
            "src": "1578:126:3",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 905,
              "nodeType": "Block",
              "src": "1876:648:3",
              "statements": [
                {
                  "assignments": [
                    891
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 891,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 905,
                      "src": "1887:12:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 890,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1887:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 898,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 892,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 322,
                        "src": "1902:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$5085_storage",
                          "typeString": "struct OldTellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 893,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "addressVars",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 5035,
                      "src": "1902:18:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 897,
                    "indexExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "74656c6c6f72436f6e7472616374",
                          "id": 895,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1931:16:3",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          },
                          "value": "tellorContract"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          }
                        ],
                        "id": 894,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 18962,
                        "src": "1921:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 896,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1921:27:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1902:47:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1887:62:3"
                },
                {
                  "assignments": [
                    900
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 900,
                      "name": "_calldata",
                      "nodeType": "VariableDeclaration",
                      "scope": 905,
                      "src": "1960:22:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 899,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1960:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 903,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 901,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18968,
                      "src": "1985:3:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 902,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "data",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "1985:8:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_calldata_ptr",
                      "typeString": "bytes calldata"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1960:33:3"
                },
                {
                  "externalReferences": [
                    {
                      "_calldata": {
                        "declaration": 900,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2097:9:3",
                        "valueSize": 1
                      }
                    },
                    {
                      "_calldata": {
                        "declaration": 900,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2073:9:3",
                        "valueSize": 1
                      }
                    },
                    {
                      "addr": {
                        "declaration": 891,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2063:4:3",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 904,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n    let size := returndatasize()\n    let ptr := mload(0x40)\n    returndatacopy(ptr, 0, size)\n    switch result\n    case 0 { revert(ptr, size) }\n    default { return(ptr, size) }\n}",
                  "src": "2004:513:3"
                }
              ]
            },
            "documentation": "@dev This is the fallback function that allows contracts to call the tellor contract at the address stored",
            "id": 906,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 888,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1856:2:3"
            },
            "returnParameters": {
              "id": 889,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1876:0:3"
            },
            "scope": 907,
            "src": "1847:677:3",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 908,
        "src": "339:2188:3"
      }
    ],
    "src": "0:2527:3"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.23",
  "updatedAt": "2020-10-04T01:22:39.740Z",
  "devdoc": {
    "details": "This is the Master contract with all tellor getter functions and delegate call to Tellor.  The logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer,  TellorGettersLibrary, and TellorStake",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "_spender": "address",
          "_user": "address"
        },
        "return": "Returns the remaining allowance of tokens granted to the _spender from the _user"
      },
      "allowedToTrade(address,uint256)": {
        "details": "This function returns whether or not a given user is allowed to trade a given amount  ",
        "params": {
          "_amount": "uint of amount",
          "_user": "address"
        },
        "return": "true if the user is alloed to trade the amount specified"
      },
      "balanceOf(address)": {
        "details": "Gets balance of owner specified",
        "params": {
          "_user": "is the owner address used to look up the balance"
        },
        "return": "Returns the balance associated with the passed in _user"
      },
      "balanceOfAt(address,uint256)": {
        "details": "Queries the balance of _user at a specific _blockNumber",
        "params": {
          "_blockNumber": "The block number when the balance is queried",
          "_user": "The address from which the balance will be retrieved"
        },
        "return": "The balance at _blockNumber"
      },
      "changeDeity(address)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp Only needs to be in library",
        "params": {
          "_newDeity": "the new Deity in the contract"
        }
      },
      "changeTellorContract(address)": {
        "details": "allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized",
        "params": {
          "_tellorContract": "the address of the new Tellor Contract"
        }
      },
      "constructor": {
        "details": "The constructor sets the original `tellorStorageOwner` of the contract to the sender account, the tellor contract to the Tellor master address and owner to the Tellor master owner address ",
        "params": {
          "_tellorContract": "is the address for the tellor contract"
        }
      },
      "didMine(bytes32,address)": {
        "details": "This function tells you if a given challenge has been completed by a given miner",
        "params": {
          "_challenge": "the challenge to search for",
          "_miner": "address that you want to know if they solved the challenge"
        },
        "return": "true if the _miner address provided solved the "
      },
      "didVote(uint256,address)": {
        "details": "Checks if an address voted in a given dispute",
        "params": {
          "_address": "to look up",
          "_disputeId": "to look up"
        },
        "return": "bool of whether or not party voted"
      },
      "getAddressVars(bytes32)": {
        "details": "allows Tellor to read data from the addressVars mapping",
        "params": {
          "_data": "is the keccak256(\"variable_name\") of the variable that is being accessed.  These are examples of how the variables are saved within other functions: addressVars[keccak256(\"_owner\")] addressVars[keccak256(\"tellorContract\")]"
        }
      },
      "getAllDisputeVars(uint256)": {
        "details": "Gets all dispute variables",
        "params": {
          "_disputeId": "to look up"
        },
        "return": "bytes32 hash of dispute bool executed where true if it has been voted onbool disputeVotePassedbool isPropFork true if the dispute is a proposed forkaddress of reportedMineraddress of reportingPartyaddress of proposedForkAddressuint of requestIduint of timestampuint of valueuint of minExecutionDateuint of numberOfVotesuint of blocknumberuint of minerSlotuint of quorumuint of feeint count of the current tally"
      },
      "getCurrentVariables()": {
        "details": "Getter function for variables for the requestId being currently mined(currentRequestId)",
        "return": "current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request "
      },
      "getDisputeIdByDisputeHash(bytes32)": {
        "details": "Checks if a given hash of miner,requestId has been disputed",
        "params": {
          "_hash": "is the sha256(abi.encodePacked(_miners[2],_requestId));"
        },
        "return": "uint disputeId"
      },
      "getDisputeUintVars(uint256,bytes32)": {
        "details": "Checks for uint variables in the disputeUintVars mapping based on the disuputeId",
        "params": {
          "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the disputeUintVars under the Dispute struct",
          "_disputeId": "is the dispute id;"
        },
        "return": "uint value for the bytes32 data submitted"
      },
      "getLastNewValue()": {
        "details": "Gets the a value for the latest timestamp available",
        "return": "value for timestamp of last proof of work submitedtrue if the is a timestamp for the lastNewValue"
      },
      "getLastNewValueById(uint256)": {
        "details": "Gets the a value for the latest timestamp available",
        "params": {
          "_requestId": "being requested"
        },
        "return": "value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't"
      },
      "getMinedBlockNum(uint256,uint256)": {
        "details": "Gets blocknumber for mined timestamp ",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestamp to look up blocknumber"
        },
        "return": "uint of the blocknumber which the dispute was mined"
      },
      "getMinersByRequestIdAndTimestamp(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp ",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestamp to look up miners for"
        },
        "return": "the 5 miners' addresses"
      },
      "getName()": {
        "details": "Get the name of the token return string of the token name"
      },
      "getNewValueCountbyRequestId(uint256)": {
        "details": "Counts the number of values that have been submited for the request  if called for the currentRequest being mined it can tell you how many miners have submitted a value for that request so far",
        "params": {
          "_requestId": "the requestId to look up"
        },
        "return": "uint count of the number of values received for the requestId"
      },
      "getRequestIdByQueryHash(bytes32)": {
        "details": "Getter function for requestId based on the queryHash",
        "params": {
          "_request": "is the hash(of string api and granularity) to check if a request already exists"
        },
        "return": "uint requestId"
      },
      "getRequestIdByRequestQIndex(uint256)": {
        "details": "Getter function for the specified requestQ index",
        "params": {
          "_index": "to look up in the requestQ array"
        },
        "return": "uint of reqeuestId"
      },
      "getRequestIdByTimestamp(uint256)": {
        "details": "Getter function for requestId based on timestamp ",
        "params": {
          "_timestamp": "to check requestId"
        },
        "return": "uint of reqeuestId"
      },
      "getRequestQ()": {
        "details": "Getter function for the requestQ array",
        "return": "the requestQ arrray"
      },
      "getRequestUintVars(uint256,bytes32)": {
        "details": "Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct for the requestId specified",
        "params": {
          "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the apiUintVars under the requestDetails struct",
          "_requestId": "to look up"
        },
        "return": "uint value of the apiUintVars specified in _data for the requestId specified"
      },
      "getRequestVars(uint256)": {
        "details": "Gets the API struct variables that are not mappings",
        "params": {
          "_requestId": "to look up"
        },
        "return": "string of api to querystring of symbol of api to querybytes32 hash of stringbytes32 of the granularity(decimal places) requesteduint of index in requestQ arrayuint of current payout/tip for this requestId"
      },
      "getStakerInfo(address)": {
        "details": "This function allows users to retireve all information about a staker",
        "params": {
          "_staker": "address of staker inquiring about"
        },
        "return": "uint current state of stakeruint startDate of staking"
      },
      "getSubmissionsByTimestamp(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp ",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestampt to look up miners for"
        },
        "return": "address[5] array of 5 addresses ofminers that mined the requestId"
      },
      "getSymbol()": {
        "details": "Get the symbol of the token return string of the token symbol"
      },
      "getTimestampbyRequestIDandIndex(uint256,uint256)": {
        "details": "Gets the timestamp for the value based on their index",
        "params": {
          "_index": "is the value index to look up",
          "_requestID": "is the requestId to look up"
        },
        "return": "uint timestamp"
      },
      "getUintVar(bytes32)": {
        "details": "Getter for the variables saved under the TellorStorageStruct uintVars variable",
        "params": {
          "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the uintVars under the TellorStorageStruct struct This is an example of how data is saved into the mapping within other functions:  self.uintVars[keccak256(\"stakerCount\")]"
        },
        "return": "uint of specified variable  "
      },
      "getVariablesOnDeck()": {
        "details": "Getter function for next requestId on queue/request with highest payout at time the function is called",
        "return": "onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string"
      },
      "isInDispute(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp ",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestamp to look up miners for"
        },
        "return": "bool true if requestId/timestamp is under dispute"
      },
      "retrieveData(uint256,uint256)": {
        "details": "Retreive value from oracle based on timestamp",
        "params": {
          "_requestId": "being requested",
          "_timestamp": "to retreive data/value from"
        },
        "return": "value for timestamp submitted"
      },
      "totalSupply()": {
        "details": "Getter for the total_supply of oracle tokens",
        "return": "uint total supply"
      }
    },
    "title": "Tellor Master"
  },
  "userdoc": {
    "methods": {}
  }
}