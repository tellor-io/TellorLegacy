{
  "contractName": "OldTellorMaster2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tellorContract",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newTellor",
          "type": "address"
        }
      ],
      "name": "NewTellorAddress",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "allowedToTrade",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_challenge",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_miner",
          "type": "address"
        }
      ],
      "name": "didMine",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "didVote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getAddressVars",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        }
      ],
      "name": "getAllDisputeVars",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[9]",
          "name": "",
          "type": "uint256[9]"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentVariables",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "getDisputeIdByDisputeHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getDisputeUintVars",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getLastNewValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getLastNewValueById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getMinedBlockNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getMinersByRequestIdAndTimestamp",
      "outputs": [
        {
          "internalType": "address[5]",
          "name": "",
          "type": "address[5]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getNewValueCountbyRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_request",
          "type": "bytes32"
        }
      ],
      "name": "getRequestIdByQueryHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getRequestIdByRequestQIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getRequestIdByTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRequestQ",
      "outputs": [
        {
          "internalType": "uint256[51]",
          "name": "",
          "type": "uint256[51]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getRequestUintVars",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestVars",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getStakerInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getSubmissionsByTimestamp",
      "outputs": [
        {
          "internalType": "uint256[5]",
          "name": "",
          "type": "uint256[5]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTimestampbyRequestIDandIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getUintVar",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVariablesOnDeck",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "isInDispute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "retrieveData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_newDeity",
          "type": "address"
        }
      ],
      "name": "changeDeity",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_tellorContract",
          "type": "address"
        }
      ],
      "name": "changeTellorContract",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tellorContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTellor\",\"type\":\"address\"}],\"name\":\"NewTellorAddress\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allowedToTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDeity\",\"type\":\"address\"}],\"name\":\"changeDeity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tellorContract\",\"type\":\"address\"}],\"name\":\"changeTellorContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_challenge\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_miner\",\"type\":\"address\"}],\"name\":\"didMine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"didVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getAddressVars\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getAllDisputeVars\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[9]\",\"name\":\"\",\"type\":\"uint256[9]\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentVariables\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getDisputeIdByDisputeHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getDisputeUintVars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastNewValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getLastNewValueById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinedBlockNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinersByRequestIdAndTimestamp\",\"outputs\":[{\"internalType\":\"address[5]\",\"name\":\"\",\"type\":\"address[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getNewValueCountbyRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_request\",\"type\":\"bytes32\"}],\"name\":\"getRequestIdByQueryHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRequestIdByRequestQIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getRequestIdByTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRequestQ\",\"outputs\":[{\"internalType\":\"uint256[51]\",\"name\":\"\",\"type\":\"uint256[51]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getRequestUintVars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestVars\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getSubmissionsByTimestamp\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTimestampbyRequestIDandIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getUintVar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVariablesOnDeck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"isInDispute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"retrieveData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the Master contract with all tellor getter functions and delegate call to Tellor. The logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer, TellorGettersLibrary, and TellorStake\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"_spender\":\"address\",\"_user\":\"address\"},\"return\":\"Returns the remaining allowance of tokens granted to the _spender from the _user\"},\"allowedToTrade(address,uint256)\":{\"details\":\"This function returns whether or not a given user is allowed to trade a given amount\",\"params\":{\"_amount\":\"uint of amount\",\"_user\":\"address\"},\"return\":\"true if the user is alloed to trade the amount specified\"},\"balanceOf(address)\":{\"details\":\"Gets balance of owner specified\",\"params\":{\"_user\":\"is the owner address used to look up the balance\"},\"return\":\"Returns the balance associated with the passed in _user\"},\"balanceOfAt(address,uint256)\":{\"details\":\"Queries the balance of _user at a specific _blockNumber\",\"params\":{\"_blockNumber\":\"The block number when the balance is queried\",\"_user\":\"The address from which the balance will be retrieved\"},\"return\":\"The balance at _blockNumber\"},\"changeDeity(address)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestampOnly needs to be in library\",\"params\":{\"_newDeity\":\"the new Deity in the contract\"}},\"changeTellorContract(address)\":{\"details\":\"allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\",\"params\":{\"_tellorContract\":\"the address of the new Tellor Contract\"}},\"constructor\":{\"details\":\"The constructor sets the original `tellorStorageOwner` of the contract to the sender account, the tellor contract to the Tellor master address and owner to the Tellor master owner address\",\"params\":{\"_tellorContract\":\"is the address for the tellor contract\"}},\"didMine(bytes32,address)\":{\"details\":\"This function tells you if a given challenge has been completed by a given miner\",\"params\":{\"_challenge\":\"the challenge to search for\",\"_miner\":\"address that you want to know if they solved the challenge\"},\"return\":\"true if the _miner address provided solved the\"},\"didVote(uint256,address)\":{\"details\":\"Checks if an address voted in a given dispute\",\"params\":{\"_address\":\"to look up\",\"_disputeId\":\"to look up\"},\"return\":\"bool of whether or not party voted\"},\"getAddressVars(bytes32)\":{\"details\":\"allows Tellor to read data from the addressVars mapping\",\"params\":{\"_data\":\"is the keccak256(\\\"variable_name\\\") of the variable that is being accessed. These are examples of how the variables are saved within other functions: addressVars[keccak256(\\\"_owner\\\")] addressVars[keccak256(\\\"tellorContract\\\")]\"}},\"getAllDisputeVars(uint256)\":{\"details\":\"Gets all dispute variables\",\"params\":{\"_disputeId\":\"to look up\"},\"return\":\"bytes32 hash of disputebool executed where true if it has been voted onbool disputeVotePassedbool isPropFork true if the dispute is a proposed forkaddress of reportedMineraddress of reportingPartyaddress of proposedForkAddressuint of requestIduint of timestampuint of valueuint of minExecutionDateuint of numberOfVotesuint of blocknumberuint of minerSlotuint of quorumuint of feeint count of the current tally\"},\"getCurrentVariables()\":{\"details\":\"Getter function for variables for the requestId being currently mined(currentRequestId)\",\"return\":\"current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request\"},\"getDisputeIdByDisputeHash(bytes32)\":{\"details\":\"Checks if a given hash of miner,requestId has been disputed\",\"params\":{\"_hash\":\"is the sha256(abi.encodePacked(_miners[2],_requestId));\"},\"return\":\"uint disputeId\"},\"getDisputeUintVars(uint256,bytes32)\":{\"details\":\"Checks for uint variables in the disputeUintVars mapping based on the disuputeId\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is the variables/strings used to save the data in the mapping. The variables names are commented out under the disputeUintVars under the Dispute struct\",\"_disputeId\":\"is the dispute id;\"},\"return\":\"uint value for the bytes32 data submitted\"},\"getLastNewValue()\":{\"details\":\"Gets the a value for the latest timestamp available\",\"return\":\"value for timestamp of last proof of work submitedtrue if the is a timestamp for the lastNewValue\"},\"getLastNewValueById(uint256)\":{\"details\":\"Gets the a value for the latest timestamp available\",\"params\":{\"_requestId\":\"being requested\"},\"return\":\"value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't\"},\"getMinedBlockNum(uint256,uint256)\":{\"details\":\"Gets blocknumber for mined timestamp\",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up blocknumber\"},\"return\":\"uint of the blocknumber which the dispute was mined\"},\"getMinersByRequestIdAndTimestamp(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp\",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up miners for\"},\"return\":\"the 5 miners' addresses\"},\"getNewValueCountbyRequestId(uint256)\":{\"details\":\"Counts the number of values that have been submited for the request if called for the currentRequest being mined it can tell you how many miners have submitted a value for that request so far\",\"params\":{\"_requestId\":\"the requestId to look up\"},\"return\":\"uint count of the number of values received for the requestId\"},\"getRequestIdByQueryHash(bytes32)\":{\"details\":\"Getter function for requestId based on the queryHash\",\"params\":{\"_request\":\"is the hash(of string api and granularity) to check if a request already exists\"},\"return\":\"uint requestId\"},\"getRequestIdByRequestQIndex(uint256)\":{\"details\":\"Getter function for the specified requestQ index\",\"params\":{\"_index\":\"to look up in the requestQ array\"},\"return\":\"uint of reqeuestId\"},\"getRequestIdByTimestamp(uint256)\":{\"details\":\"Getter function for requestId based on timestamp\",\"params\":{\"_timestamp\":\"to check requestId\"},\"return\":\"uint of reqeuestId\"},\"getRequestQ()\":{\"details\":\"Getter function for the requestQ array\",\"return\":\"the requestQ arrray\"},\"getRequestUintVars(uint256,bytes32)\":{\"details\":\"Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct for the requestId specified\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is the variables/strings used to save the data in the mapping. The variables names are commented out under the apiUintVars under the requestDetails struct\",\"_requestId\":\"to look up\"},\"return\":\"uint value of the apiUintVars specified in _data for the requestId specified\"},\"getRequestVars(uint256)\":{\"details\":\"Gets the API struct variables that are not mappings\",\"params\":{\"_requestId\":\"to look up\"},\"return\":\"string of api to querystring of symbol of api to querybytes32 hash of stringbytes32 of the granularity(decimal places) requesteduint of index in requestQ arrayuint of current payout/tip for this requestId\"},\"getStakerInfo(address)\":{\"details\":\"This function allows users to retireve all information about a staker\",\"params\":{\"_staker\":\"address of staker inquiring about\"},\"return\":\"uint current state of stakeruint startDate of staking\"},\"getSubmissionsByTimestamp(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp\",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestampt to look up miners for\"},\"return\":\"address[5] array of 5 addresses ofminers that mined the requestId\"},\"getTimestampbyRequestIDandIndex(uint256,uint256)\":{\"details\":\"Gets the timestamp for the value based on their index\",\"params\":{\"_index\":\"is the value index to look up\",\"_requestID\":\"is the requestId to look up\"},\"return\":\"uint timestamp\"},\"getUintVar(bytes32)\":{\"details\":\"Getter for the variables saved under the TellorStorageStruct uintVars variable\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is the variables/strings used to save the data in the mapping. The variables names are commented out under the uintVars under the TellorStorageStruct struct This is an example of how data is saved into the mapping within other functions: self.uintVars[keccak256(\\\"stakerCount\\\")]\"},\"return\":\"uint of specified variable\"},\"getVariablesOnDeck()\":{\"details\":\"Getter function for next requestId on queue/request with highest payout at time the function is called\",\"return\":\"onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string\"},\"isInDispute(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp\",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up miners for\"},\"return\":\"bool true if requestId/timestamp is under dispute\"},\"retrieveData(uint256,uint256)\":{\"details\":\"Retreive value from oracle based on timestamp\",\"params\":{\"_requestId\":\"being requested\",\"_timestamp\":\"to retreive data/value from\"},\"return\":\"value for timestamp submitted\"},\"totalSupply()\":{\"details\":\"Getter for the total_supply of oracle tokens\",\"return\":\"uint total supply\"}},\"title\":\"Tellor Master\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/C/company/code/tellorlegacy/contracts/oldContracts2/Old2TellorMaster.sol\":\"OldTellorMaster2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/C/company/code/tellorlegacy/contracts/oldContracts2/Old2TellorGetters.sol\":{\"keccak256\":\"0xcb3ab56773cf45c53439c996bfc83f616ea06068fc2b2c183da5183e3e1fdf56\",\"urls\":[\"bzz-raw://d8ac43aebada4f48d1da415e50e3e0365779964b706647c7978dcec699795ca6\",\"dweb:/ipfs/QmRc5QsdTuX9pNCgMEmG6qyfQZ4YfNEbVBaStu7s53jrVi\"]},\"/C/company/code/tellorlegacy/contracts/oldContracts2/Old2TellorMaster.sol\":{\"keccak256\":\"0x0b5088e7a34bddf3a4a55e820a5da6a97790a8bb229ba0827f804448d2d616d5\",\"urls\":[\"bzz-raw://009f1b8f5ab0285f74222a636be1b92af6cd88c77f364fc93ebc94a1085835b9\",\"dweb:/ipfs/QmNnzHrBrmWyMRmyGVVouup1d5eWadbTLXi2d5eeeJAtc2\"]},\"/C/company/code/tellorlegacy/contracts/oldContracts2/libraries/Old2SafeMath.sol\":{\"keccak256\":\"0x4c739bf840e32050daed076d0d1fb01f3ecaae4513fd6d22920115a3ece1857e\",\"urls\":[\"bzz-raw://605afafd211b5578087a99a1726aa712346b614544ffba3e0ee2ac2ebe0cc1ce\",\"dweb:/ipfs/Qmd1KntV1XCwvk5B21kjcSvXq2tAgLTUDGz9cM5FNNAwNj\"]},\"/C/company/code/tellorlegacy/contracts/oldContracts2/libraries/Old2TellorDispute.sol\":{\"keccak256\":\"0xb8f6660c58e8d86f94818259cec54b43674828349b05ffc6617911ca3722e74d\",\"urls\":[\"bzz-raw://5dda7999def6f21cf1066e977e1f8e66fdd64e2c30a8535775f5d4ee221e8a4a\",\"dweb:/ipfs/QmUNCK7dnzfnvg6Hq6NVtG8mZ7U4bdSu9gXvMk8ga2RPsZ\"]},\"/C/company/code/tellorlegacy/contracts/oldContracts2/libraries/Old2TellorGettersLibrary.sol\":{\"keccak256\":\"0xdbf7f287289a7d01dc6f4d55647a64d4c8d3be4167a6a973990f53ff4b694962\",\"urls\":[\"bzz-raw://4f6613c7407b066fdfa6c479865b2687079d99caf63e01da4d4acaaf361dca7d\",\"dweb:/ipfs/QmQog2iLGVJNbonXEz7GUhLPsGLWe2bDoLtCfnL6H9eFah\"]},\"/C/company/code/tellorlegacy/contracts/oldContracts2/libraries/Old2TellorStake.sol\":{\"keccak256\":\"0x182eee45c44ce4029e8fc5a52adabb836c97fd257706de5ca695c6df4ffff231\",\"urls\":[\"bzz-raw://1f48aa75873de135eb6de46230595b9fe221f761de5b8cba1a5a287fff3d2424\",\"dweb:/ipfs/QmQ6zYpzGVxVBTUDcNLysSjRSj2j3dwrGRscBpRzmo7LwU\"]},\"/C/company/code/tellorlegacy/contracts/oldContracts2/libraries/Old2TellorStorage.sol\":{\"keccak256\":\"0xc8cdaa3ad2c6b9ff1d7da10b92294ddbf7ae43a7ff31a444ac1a2ad034a27346\",\"urls\":[\"bzz-raw://676bb6e03d356b6603ceb733fa3a5f0cbd752eb12a9f8b59325d2b2f606d55e4\",\"dweb:/ipfs/QmSrZoFzWVxq7V9JK7j785xMDmVPQKatPiRj3xq4MpKx3h\"]},\"/C/company/code/tellorlegacy/contracts/oldContracts2/libraries/Old2TellorTransfer.sol\":{\"keccak256\":\"0x8f0c71efcd23d9d45278a8e3bd8a05fac0172781c8593440f95ed3457675b129\",\"urls\":[\"bzz-raw://29e1dc92b04b1c8f3b7735debe447914dc8eaef8821118738416eb06674088ec\",\"dweb:/ipfs/QmTiUNSAkbxZyifx1V61sDXcmmX3Ew4iHMsLcGoJBhqkrV\"]},\"/C/company/code/tellorlegacy/contracts/oldContracts2/libraries/Old2Utilities.sol\":{\"keccak256\":\"0x646b65c1570a50499be2a36950efa97ac96dcd9ad0ade5bf263559fdfda35e69\",\"urls\":[\"bzz-raw://2e843f31ab52a476e0094582e89fb237aa7723dde1ef946888cba830bf6f56ac\",\"dweb:/ipfs/Qmdg7GsiftoG4muBqau7sXNWoDLKPrkkzsMtM9fnMX52rp\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162003159380380620031598339818101604052602081101561003557600080fd5b8101908080519060200190929190505050600073__Old2TellorStake_______________________63a991c6fd90916040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b15801561009857600080fd5b505af41580156100ac573d6000803e3d6000fd5b50505050336000603f01600060405180807f5f6f776e6572000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150612e9780620002c26000396000f3fe6080604052600436106101e35760003560e01c8063733bdef011610102578063af0b132711610095578063dd62ed3e11610064578063dd62ed3e14610e7f578063e0ae93c114610f04578063e1eee6d614610f5d578063fc7cf0a014611099576101e3565b8063af0b132714610c45578063b541302914610d84578063c775b54214610dd7578063da37994114610e30576101e3565b8063999cf26c116100d1578063999cf26c14610a5b578063a22e407a14610ace578063a7c438bc14610b81578063ae0a827914610bf4576101e3565b8063733bdef0146108e457806377fbb663146109505780637f6fd5d9146109a957806393fa491514610a02576101e3565b806346eee1c41161017a5780636173c0b8116101495780636173c0b81461073c57806363bb82ad1461078b57806369026d63146107fe57806370a082311461087f576101e3565b806346eee1c4146105de57806347abd7f11461062d5780634ee2cd7e1461067e578063612c8f7f146106ed576101e3565b806319e8e03b116101b657806319e8e03b1461043a5780631db842f0146104d85780633180f8df146105275780633df0777b14610581576101e3565b80630f0b424d146102c457806311c9851214610313578063133bee5e1461039457806318160ddd1461040f575b600080603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060606000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905060008082516020840185600019f43d604051816000823e82600081146102c0578282f35b8282fd5b3480156102d057600080fd5b506102fd600480360360208110156102e757600080fd5b81019080803590602001909291905050506110cf565b6040518082815260200191505060405180910390f35b34801561031f57600080fd5b506103566004803603604081101561033657600080fd5b8101908080359060200190929190803590602001909291905050506110ec565b6040518082600560200280838360005b83811015610381578082015181840152602081019050610366565b5050505090500191505060405180910390f35b3480156103a057600080fd5b506103cd600480360360208110156103b757600080fd5b8101908080359060200190929190505050611112565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561041b57600080fd5b5061042461112f565b6040518082815260200191505060405180910390f35b34801561044657600080fd5b5061044f611140565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561049b578082015181840152602081019050610480565b50505050905090810190601f1680156104c85780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156104e457600080fd5b50610511600480360360208110156104fb57600080fd5b810190808035906020019092919050505061115a565b6040518082815260200191505060405180910390f35b34801561053357600080fd5b506105606004803603602081101561054a57600080fd5b8101908080359060200190929190505050611177565b60405180838152602001821515151581526020019250505060405180910390f35b34801561058d57600080fd5b506105c4600480360360408110156105a457600080fd5b810190808035906020019092919080359060200190929190505050611197565b604051808215151515815260200191505060405180910390f35b3480156105ea57600080fd5b506106176004803603602081101561060157600080fd5b81019080803590602001909291905050506111b7565b6040518082815260200191505060405180910390f35b34801561063957600080fd5b5061067c6004803603602081101561065057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111d4565b005b34801561068a57600080fd5b506106d7600480360360408110156106a157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111eb565b6040518082815260200191505060405180910390f35b3480156106f957600080fd5b506107266004803603602081101561071057600080fd5b81019080803590602001909291905050506112bd565b6040518082815260200191505060405180910390f35b34801561074857600080fd5b506107756004803603602081101561075f57600080fd5b81019080803590602001909291905050506112da565b6040518082815260200191505060405180910390f35b34801561079757600080fd5b506107e4600480360360408110156107ae57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112f7565b604051808215151515815260200191505060405180910390f35b34801561080a57600080fd5b506108416004803603604081101561082157600080fd5b810190808035906020019092919080359060200190929190505050611317565b6040518082600560200280838360005b8381101561086c578082015181840152602081019050610851565b5050505090500191505060405180910390f35b34801561088b57600080fd5b506108ce600480360360208110156108a257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061133d565b6040518082815260200191505060405180910390f35b3480156108f057600080fd5b506109336004803603602081101561090757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611406565b604051808381526020018281526020019250505060405180910390f35b34801561095c57600080fd5b506109936004803603604081101561097357600080fd5b810190808035906020019092919080359060200190929190505050611426565b6040518082815260200191505060405180910390f35b3480156109b557600080fd5b506109ec600480360360408110156109cc57600080fd5b810190808035906020019092919080359060200190929190505050611446565b6040518082815260200191505060405180910390f35b348015610a0e57600080fd5b50610a4560048036036040811015610a2557600080fd5b810190808035906020019092919080359060200190929190505050611466565b6040518082815260200191505060405180910390f35b348015610a6757600080fd5b50610ab460048036036040811015610a7e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611486565b604051808215151515815260200191505060405180910390f35b348015610ada57600080fd5b50610ae3611558565b6040518087815260200186815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610b41578082015181840152602081019050610b26565b50505050905090810190601f168015610b6e5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b348015610b8d57600080fd5b50610bda60048036036040811015610ba457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611580565b604051808215151515815260200191505060405180910390f35b348015610c0057600080fd5b50610c4360048036036020811015610c1757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115a0565b005b348015610c5157600080fd5b50610c7e60048036036020811015610c6857600080fd5b81019080803590602001909291905050506115b7565b604051808a81526020018915151515815260200188151515158152602001871515151581526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600960200280838360005b83811015610d63578082015181840152602081019050610d48565b50505050905001828152602001995050505050505050505060405180910390f35b348015610d9057600080fd5b50610d996115ff565b6040518082603360200280838360005b83811015610dc4578082015181840152602081019050610da9565b5050505090500191505060405180910390f35b348015610de357600080fd5b50610e1a60048036036040811015610dfa57600080fd5b810190808035906020019092919080359060200190929190505050611616565b6040518082815260200191505060405180910390f35b348015610e3c57600080fd5b50610e6960048036036020811015610e5357600080fd5b8101908080359060200190929190505050611636565b6040518082815260200191505060405180910390f35b348015610e8b57600080fd5b50610eee60048036036040811015610ea257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611653565b6040518082815260200191505060405180910390f35b348015610f1057600080fd5b50610f4760048036036040811015610f2757600080fd5b810190808035906020019092919080359060200190929190505050611751565b6040518082815260200191505060405180910390f35b348015610f6957600080fd5b50610f9660048036036020811015610f8057600080fd5b8101908080359060200190929190505050611771565b604051808060200180602001878152602001868152602001858152602001848152602001838103835289818151815260200191508051906020019080838360005b83811015610ff2578082015181840152602081019050610fd7565b50505050905090810190601f16801561101f5780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b8381101561105857808201518184015260208101905061103d565b50505050905090810190601f1680156110855780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156110a557600080fd5b506110ae6117a3565b60405180838152602001821515151581526020019250505060405180910390f35b60006110e58260006117b890919063ffffffff16565b9050919050565b6110f4612dd8565b61110a838360006117d89092919063ffffffff16565b905092915050565b600061112882600061184e90919063ffffffff16565b9050919050565b600061113b600061188e565b905090565b600080606061114f60006118e2565b925092509250909192565b6000611170826000611a1690919063ffffffff16565b9050919050565b60008061118e836000611a3690919063ffffffff16565b91509150915091565b60006111af83836000611aaf9092919063ffffffff16565b905092915050565b60006111cd826000611af190919063ffffffff16565b9050919050565b6111e8816000611b1790919063ffffffff16565b50565b60008073__Old2TellorTransfer____________________63e6c0d7f5909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561127a57600080fd5b505af415801561128e573d6000803e3d6000fd5b505050506040513d60208110156112a457600080fd5b8101908080519060200190929190505050905092915050565b60006112d3826000611caf90919063ffffffff16565b9050919050565b60006112f0826000611ccf90919063ffffffff16565b9050919050565b600061130f83836000611d669092919063ffffffff16565b905092915050565b61131f612dfa565b61133583836000611dd19092919063ffffffff16565b905092915050565b60008073__Old2TellorTransfer____________________63d3a54f059091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156113c457600080fd5b505af41580156113d8573d6000803e3d6000fd5b505050506040513d60208110156113ee57600080fd5b81019080805190602001909291905050509050919050565b60008061141d836000611e7d90919063ffffffff16565b91509150915091565b600061143e83836000611f159092919063ffffffff16565b905092915050565b600061145e83836000611f4e9092919063ffffffff16565b905092915050565b600061147e83836000611f839092919063ffffffff16565b905092915050565b60008073__Old2TellorTransfer____________________63c1364740909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561151557600080fd5b505af4158015611529573d6000803e3d6000fd5b505050506040513d602081101561153f57600080fd5b8101908080519060200190929190505050905092915050565b6000806000606060008061156c6000611fb8565b955095509550955095509550909192939495565b6000611598838360006122c29092919063ffffffff16565b905092915050565b6115b481600061233090919063ffffffff16565b50565b60008060008060008060006115ca612e1c565b60006115e08a600061252b90919063ffffffff16565b9850985098509850985098509850985098509193959799909294969850565b611607612e3f565b6116116000612901565b905090565b600061162e838360006129509092919063ffffffff16565b905092915050565b600061164c82600061298590919063ffffffff16565b9050919050565b60008073__Old2TellorTransfer____________________6321bbd360909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b15801561170e57600080fd5b505af4158015611722573d6000803e3d6000fd5b505050506040513d602081101561173857600080fd5b8101908080519060200190929190505050905092915050565b6000611769838360006129a59092919063ffffffff16565b905092915050565b60608060008060008061178e8760006129da90919063ffffffff16565b95509550955095509550955091939550919395565b6000806117b06000612c39565b915091509091565b600082604201600083815260200190815260200160002054905092915050565b6117e0612dd8565b8360480160008481526020019081526020016000206009016000838152602001908152602001600020600580602002604051908101604052809291908260058015611840576020028201915b81548152602001906001019080831161182c575b505050505090509392505050565b600082603f01600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b600081604001600060405180807f746f74616c5f737570706c790000000000000000000000000000000000000000815250600c01905060405180910390208152602001908152602001600020549050919050565b600080606060006118f285612cfb565b905080856048016000838152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054866048016000848152602001908152602001600020600001808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a015780601f106119d657610100808354040283529160200191611a01565b820191906000526020600020905b8154815290600101906020018083116119e457829003601f168201915b50505050509050935093509350509193909250565b600082604901600083815260200190815260200160002054905092915050565b60008060008460480160008581526020019081526020016000209050600081600301805490501115611a9c57611a90858583600301600185600301805490500381548110611a8057fe5b9060005260206000200154611f83565b60019250925050611aa8565b60008081915092509250505b9250929050565b6000836048016000848152602001908152602001600020600701600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b600082604801600083815260200190815260200160002060030180549050905092915050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611c22576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f742064656974790000000000000000000000000081525060200191505060405180910390fd5b8082603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600082604001600083815260200190815260200160002054905092915050565b60006032821115611d48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f526571756573745120696e6465782069732061626f766520353000000000000081525060200191505060405180910390fd5b82604301600083815260200190815260200160002054905092915050565b600083604101600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b611dd9612dfa565b8360480160008481526020019081526020016000206008016000838152602001908152602001600020600580602002604051908101604052809291908260058015611e6f576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611e25575b505050505090509392505050565b6000808360470160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548460470160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154915091509250929050565b60008360480160008481526020019081526020016000206003018281548110611f3a57fe5b906000526020600020015490509392505050565b600083604401600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600083604801600084815260200190815260200160002060060160008381526020019081526020016000205490509392505050565b60008060006060600080866000015487604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205488604001600060405180807f646966666963756c747900000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020548960480160008b604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205481526020019081526020016000206000018a60480160008c604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020548b60480160008d604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122a65780601f1061227b576101008083540402835291602001916122a6565b820191906000526020600020905b81548152906001019060200180831161228957829003601f168201915b5050505050925095509550955095509550955091939550919395565b600083604401600084815260200190815260200160002060060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461243b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f742064656974790000000000000000000000000081525060200191505060405180910390fd5b8082603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b600080600080600080600061253e612e1c565b6000808b60440160008c8152602001908152602001600020905080600001548160020160009054906101000a900460ff168260020160019054906101000a900460ff168360020160029054906101000a900460ff168460020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180610120016040528089600501600060405180807f726571756573744964000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f76616c756500000000000000000000000000000000000000000000000000000081525060050190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e457865637574696f6e446174650000000000000000000000000000000081525060100190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6e756d6265724f66566f74657300000000000000000000000000000000000000815250600d0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f626c6f636b4e756d626572000000000000000000000000000000000000000000815250600b0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e6572536c6f74000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f71756f72756d000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6665650000000000000000000000000000000000000000000000000000000000815250600301905060405180910390208152602001908152602001600020548152508860010154995099509950995099509950995099509950509295985092959850929598565b612909612e3f565b81600101603380602002604051908101604052809291908260338015612944576020028201915b815481526020019060010190808311612930575b50505050509050919050565b600083604801600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600082604a01600083815260200190815260200160002054905092915050565b600083604801600084815260200190815260200160002060040160008381526020019081526020016000205490509392505050565b606080600080600080600088604801600089815260200190815260200160002090508060000181600101826002015483600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205484600401600060405180807f7265717565737451506f736974696f6e000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205485600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054858054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b7f5780601f10612b5457610100808354040283529160200191612b7f565b820191906000526020600020905b815481529060010190602001808311612b6257829003601f168201915b50505050509550848054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c1b5780601f10612bf057610100808354040283529160200191612c1b565b820191906000526020600020905b815481529060010190602001808311612bfe57829003601f168201915b50505050509450965096509650965096509650509295509295509295565b600080612cf08384604201600086604001600060405180807f74696d654f664c6173744e657756616c756500000000000000000000000000008152506012019050604051809103902081526020019081526020016000205481526020019081526020016000205485604001600060405180807f74696d654f664c6173744e657756616c7565000000000000000000000000000081525060120190506040518091039020815260200190815260200160002054611f83565b600191509150915091565b6000806000612d4884600101603380602002604051908101604052809291908260338015612d3e576020028201915b815481526020019060010190808311612d2a575b5050505050612d6f565b80925081935050508360430160008281526020019081526020016000205492505050919050565b60008082600160338110612d7f57fe5b602002015191506000600190505b6033811015612dd25782848260338110612da357fe5b60200201511115612dc557838160338110612dba57fe5b602002015192508091505b8080600101915050612d8d565b50915091565b6040518060a00160405280600590602082028038833980820191505090505090565b6040518060a00160405280600590602082028038833980820191505090505090565b604051806101200160405280600990602082028038833980820191505090505090565b60405180610660016040528060339060208202803883398082019150509050509056fea265627a7a72315820abe7d76137f581bb5db8c9ff90dfa54ad93e140ecb415d9e21e328a814d0146664736f6c63430005100032",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c8063733bdef011610102578063af0b132711610095578063dd62ed3e11610064578063dd62ed3e14610e7f578063e0ae93c114610f04578063e1eee6d614610f5d578063fc7cf0a014611099576101e3565b8063af0b132714610c45578063b541302914610d84578063c775b54214610dd7578063da37994114610e30576101e3565b8063999cf26c116100d1578063999cf26c14610a5b578063a22e407a14610ace578063a7c438bc14610b81578063ae0a827914610bf4576101e3565b8063733bdef0146108e457806377fbb663146109505780637f6fd5d9146109a957806393fa491514610a02576101e3565b806346eee1c41161017a5780636173c0b8116101495780636173c0b81461073c57806363bb82ad1461078b57806369026d63146107fe57806370a082311461087f576101e3565b806346eee1c4146105de57806347abd7f11461062d5780634ee2cd7e1461067e578063612c8f7f146106ed576101e3565b806319e8e03b116101b657806319e8e03b1461043a5780631db842f0146104d85780633180f8df146105275780633df0777b14610581576101e3565b80630f0b424d146102c457806311c9851214610313578063133bee5e1461039457806318160ddd1461040f575b600080603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060606000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905060008082516020840185600019f43d604051816000823e82600081146102c0578282f35b8282fd5b3480156102d057600080fd5b506102fd600480360360208110156102e757600080fd5b81019080803590602001909291905050506110cf565b6040518082815260200191505060405180910390f35b34801561031f57600080fd5b506103566004803603604081101561033657600080fd5b8101908080359060200190929190803590602001909291905050506110ec565b6040518082600560200280838360005b83811015610381578082015181840152602081019050610366565b5050505090500191505060405180910390f35b3480156103a057600080fd5b506103cd600480360360208110156103b757600080fd5b8101908080359060200190929190505050611112565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561041b57600080fd5b5061042461112f565b6040518082815260200191505060405180910390f35b34801561044657600080fd5b5061044f611140565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561049b578082015181840152602081019050610480565b50505050905090810190601f1680156104c85780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156104e457600080fd5b50610511600480360360208110156104fb57600080fd5b810190808035906020019092919050505061115a565b6040518082815260200191505060405180910390f35b34801561053357600080fd5b506105606004803603602081101561054a57600080fd5b8101908080359060200190929190505050611177565b60405180838152602001821515151581526020019250505060405180910390f35b34801561058d57600080fd5b506105c4600480360360408110156105a457600080fd5b810190808035906020019092919080359060200190929190505050611197565b604051808215151515815260200191505060405180910390f35b3480156105ea57600080fd5b506106176004803603602081101561060157600080fd5b81019080803590602001909291905050506111b7565b6040518082815260200191505060405180910390f35b34801561063957600080fd5b5061067c6004803603602081101561065057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111d4565b005b34801561068a57600080fd5b506106d7600480360360408110156106a157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111eb565b6040518082815260200191505060405180910390f35b3480156106f957600080fd5b506107266004803603602081101561071057600080fd5b81019080803590602001909291905050506112bd565b6040518082815260200191505060405180910390f35b34801561074857600080fd5b506107756004803603602081101561075f57600080fd5b81019080803590602001909291905050506112da565b6040518082815260200191505060405180910390f35b34801561079757600080fd5b506107e4600480360360408110156107ae57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112f7565b604051808215151515815260200191505060405180910390f35b34801561080a57600080fd5b506108416004803603604081101561082157600080fd5b810190808035906020019092919080359060200190929190505050611317565b6040518082600560200280838360005b8381101561086c578082015181840152602081019050610851565b5050505090500191505060405180910390f35b34801561088b57600080fd5b506108ce600480360360208110156108a257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061133d565b6040518082815260200191505060405180910390f35b3480156108f057600080fd5b506109336004803603602081101561090757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611406565b604051808381526020018281526020019250505060405180910390f35b34801561095c57600080fd5b506109936004803603604081101561097357600080fd5b810190808035906020019092919080359060200190929190505050611426565b6040518082815260200191505060405180910390f35b3480156109b557600080fd5b506109ec600480360360408110156109cc57600080fd5b810190808035906020019092919080359060200190929190505050611446565b6040518082815260200191505060405180910390f35b348015610a0e57600080fd5b50610a4560048036036040811015610a2557600080fd5b810190808035906020019092919080359060200190929190505050611466565b6040518082815260200191505060405180910390f35b348015610a6757600080fd5b50610ab460048036036040811015610a7e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611486565b604051808215151515815260200191505060405180910390f35b348015610ada57600080fd5b50610ae3611558565b6040518087815260200186815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610b41578082015181840152602081019050610b26565b50505050905090810190601f168015610b6e5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b348015610b8d57600080fd5b50610bda60048036036040811015610ba457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611580565b604051808215151515815260200191505060405180910390f35b348015610c0057600080fd5b50610c4360048036036020811015610c1757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115a0565b005b348015610c5157600080fd5b50610c7e60048036036020811015610c6857600080fd5b81019080803590602001909291905050506115b7565b604051808a81526020018915151515815260200188151515158152602001871515151581526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600960200280838360005b83811015610d63578082015181840152602081019050610d48565b50505050905001828152602001995050505050505050505060405180910390f35b348015610d9057600080fd5b50610d996115ff565b6040518082603360200280838360005b83811015610dc4578082015181840152602081019050610da9565b5050505090500191505060405180910390f35b348015610de357600080fd5b50610e1a60048036036040811015610dfa57600080fd5b810190808035906020019092919080359060200190929190505050611616565b6040518082815260200191505060405180910390f35b348015610e3c57600080fd5b50610e6960048036036020811015610e5357600080fd5b8101908080359060200190929190505050611636565b6040518082815260200191505060405180910390f35b348015610e8b57600080fd5b50610eee60048036036040811015610ea257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611653565b6040518082815260200191505060405180910390f35b348015610f1057600080fd5b50610f4760048036036040811015610f2757600080fd5b810190808035906020019092919080359060200190929190505050611751565b6040518082815260200191505060405180910390f35b348015610f6957600080fd5b50610f9660048036036020811015610f8057600080fd5b8101908080359060200190929190505050611771565b604051808060200180602001878152602001868152602001858152602001848152602001838103835289818151815260200191508051906020019080838360005b83811015610ff2578082015181840152602081019050610fd7565b50505050905090810190601f16801561101f5780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b8381101561105857808201518184015260208101905061103d565b50505050905090810190601f1680156110855780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156110a557600080fd5b506110ae6117a3565b60405180838152602001821515151581526020019250505060405180910390f35b60006110e58260006117b890919063ffffffff16565b9050919050565b6110f4612dd8565b61110a838360006117d89092919063ffffffff16565b905092915050565b600061112882600061184e90919063ffffffff16565b9050919050565b600061113b600061188e565b905090565b600080606061114f60006118e2565b925092509250909192565b6000611170826000611a1690919063ffffffff16565b9050919050565b60008061118e836000611a3690919063ffffffff16565b91509150915091565b60006111af83836000611aaf9092919063ffffffff16565b905092915050565b60006111cd826000611af190919063ffffffff16565b9050919050565b6111e8816000611b1790919063ffffffff16565b50565b60008073__Old2TellorTransfer____________________63e6c0d7f5909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561127a57600080fd5b505af415801561128e573d6000803e3d6000fd5b505050506040513d60208110156112a457600080fd5b8101908080519060200190929190505050905092915050565b60006112d3826000611caf90919063ffffffff16565b9050919050565b60006112f0826000611ccf90919063ffffffff16565b9050919050565b600061130f83836000611d669092919063ffffffff16565b905092915050565b61131f612dfa565b61133583836000611dd19092919063ffffffff16565b905092915050565b60008073__Old2TellorTransfer____________________63d3a54f059091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156113c457600080fd5b505af41580156113d8573d6000803e3d6000fd5b505050506040513d60208110156113ee57600080fd5b81019080805190602001909291905050509050919050565b60008061141d836000611e7d90919063ffffffff16565b91509150915091565b600061143e83836000611f159092919063ffffffff16565b905092915050565b600061145e83836000611f4e9092919063ffffffff16565b905092915050565b600061147e83836000611f839092919063ffffffff16565b905092915050565b60008073__Old2TellorTransfer____________________63c1364740909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561151557600080fd5b505af4158015611529573d6000803e3d6000fd5b505050506040513d602081101561153f57600080fd5b8101908080519060200190929190505050905092915050565b6000806000606060008061156c6000611fb8565b955095509550955095509550909192939495565b6000611598838360006122c29092919063ffffffff16565b905092915050565b6115b481600061233090919063ffffffff16565b50565b60008060008060008060006115ca612e1c565b60006115e08a600061252b90919063ffffffff16565b9850985098509850985098509850985098509193959799909294969850565b611607612e3f565b6116116000612901565b905090565b600061162e838360006129509092919063ffffffff16565b905092915050565b600061164c82600061298590919063ffffffff16565b9050919050565b60008073__Old2TellorTransfer____________________6321bbd360909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b15801561170e57600080fd5b505af4158015611722573d6000803e3d6000fd5b505050506040513d602081101561173857600080fd5b8101908080519060200190929190505050905092915050565b6000611769838360006129a59092919063ffffffff16565b905092915050565b60608060008060008061178e8760006129da90919063ffffffff16565b95509550955095509550955091939550919395565b6000806117b06000612c39565b915091509091565b600082604201600083815260200190815260200160002054905092915050565b6117e0612dd8565b8360480160008481526020019081526020016000206009016000838152602001908152602001600020600580602002604051908101604052809291908260058015611840576020028201915b81548152602001906001019080831161182c575b505050505090509392505050565b600082603f01600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b600081604001600060405180807f746f74616c5f737570706c790000000000000000000000000000000000000000815250600c01905060405180910390208152602001908152602001600020549050919050565b600080606060006118f285612cfb565b905080856048016000838152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054866048016000848152602001908152602001600020600001808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a015780601f106119d657610100808354040283529160200191611a01565b820191906000526020600020905b8154815290600101906020018083116119e457829003601f168201915b50505050509050935093509350509193909250565b600082604901600083815260200190815260200160002054905092915050565b60008060008460480160008581526020019081526020016000209050600081600301805490501115611a9c57611a90858583600301600185600301805490500381548110611a8057fe5b9060005260206000200154611f83565b60019250925050611aa8565b60008081915092509250505b9250929050565b6000836048016000848152602001908152602001600020600701600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b600082604801600083815260200190815260200160002060030180549050905092915050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611c22576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f742064656974790000000000000000000000000081525060200191505060405180910390fd5b8082603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600082604001600083815260200190815260200160002054905092915050565b60006032821115611d48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f526571756573745120696e6465782069732061626f766520353000000000000081525060200191505060405180910390fd5b82604301600083815260200190815260200160002054905092915050565b600083604101600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b611dd9612dfa565b8360480160008481526020019081526020016000206008016000838152602001908152602001600020600580602002604051908101604052809291908260058015611e6f576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611e25575b505050505090509392505050565b6000808360470160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548460470160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154915091509250929050565b60008360480160008481526020019081526020016000206003018281548110611f3a57fe5b906000526020600020015490509392505050565b600083604401600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600083604801600084815260200190815260200160002060060160008381526020019081526020016000205490509392505050565b60008060006060600080866000015487604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205488604001600060405180807f646966666963756c747900000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020548960480160008b604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205481526020019081526020016000206000018a60480160008c604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020548b60480160008d604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122a65780601f1061227b576101008083540402835291602001916122a6565b820191906000526020600020905b81548152906001019060200180831161228957829003601f168201915b5050505050925095509550955095509550955091939550919395565b600083604401600084815260200190815260200160002060060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461243b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f742064656974790000000000000000000000000081525060200191505060405180910390fd5b8082603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b600080600080600080600061253e612e1c565b6000808b60440160008c8152602001908152602001600020905080600001548160020160009054906101000a900460ff168260020160019054906101000a900460ff168360020160029054906101000a900460ff168460020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180610120016040528089600501600060405180807f726571756573744964000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f76616c756500000000000000000000000000000000000000000000000000000081525060050190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e457865637574696f6e446174650000000000000000000000000000000081525060100190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6e756d6265724f66566f74657300000000000000000000000000000000000000815250600d0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f626c6f636b4e756d626572000000000000000000000000000000000000000000815250600b0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e6572536c6f74000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f71756f72756d000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6665650000000000000000000000000000000000000000000000000000000000815250600301905060405180910390208152602001908152602001600020548152508860010154995099509950995099509950995099509950509295985092959850929598565b612909612e3f565b81600101603380602002604051908101604052809291908260338015612944576020028201915b815481526020019060010190808311612930575b50505050509050919050565b600083604801600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600082604a01600083815260200190815260200160002054905092915050565b600083604801600084815260200190815260200160002060040160008381526020019081526020016000205490509392505050565b606080600080600080600088604801600089815260200190815260200160002090508060000181600101826002015483600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205484600401600060405180807f7265717565737451506f736974696f6e000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205485600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054858054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b7f5780601f10612b5457610100808354040283529160200191612b7f565b820191906000526020600020905b815481529060010190602001808311612b6257829003601f168201915b50505050509550848054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c1b5780601f10612bf057610100808354040283529160200191612c1b565b820191906000526020600020905b815481529060010190602001808311612bfe57829003601f168201915b50505050509450965096509650965096509650509295509295509295565b600080612cf08384604201600086604001600060405180807f74696d654f664c6173744e657756616c756500000000000000000000000000008152506012019050604051809103902081526020019081526020016000205481526020019081526020016000205485604001600060405180807f74696d654f664c6173744e657756616c7565000000000000000000000000000081525060120190506040518091039020815260200190815260200160002054611f83565b600191509150915091565b6000806000612d4884600101603380602002604051908101604052809291908260338015612d3e576020028201915b815481526020019060010190808311612d2a575b5050505050612d6f565b80925081935050508360430160008281526020019081526020016000205492505050919050565b60008082600160338110612d7f57fe5b602002015191506000600190505b6033811015612dd25782848260338110612da357fe5b60200201511115612dc557838160338110612dba57fe5b602002015192508091505b8080600101915050612d8d565b50915091565b6040518060a00160405280600590602082028038833980820191505090505090565b6040518060a00160405280600590602082028038833980820191505090505090565b604051806101200160405280600990602082028038833980820191505090505090565b60405180610660016040528060339060208202803883398082019150509050509056fea265627a7a72315820abe7d76137f581bb5db8c9ff90dfa54ad93e140ecb415d9e21e328a814d0146664736f6c63430005100032",
  "sourceMap": "338:2269:14:-;;;736:327;8:9:-1;5:2;;;30:1;27;20:12;5:2;736:327:14;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;736:327:14;;;;;;;;;;;;;;;;791:6;:11;;;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;791:13:14;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;791:13:14;;;;857:10;815:6;:18;;:39;834:19;;;;;;;;;;;;;;;;;;;815:39;;;;;;;;;;;;:52;;;;;;;;;;;;;;;;;;920:10;878:6;:18;;:39;897:19;;;;;;;;;;;;;;;;;;;878:39;;;;;;;;;;;;:52;;;;;;;;;;;;;;;;;;991:15;941:6;:18;;:47;960:27;;;;;;;;;;;;;;;;;;;941:47;;;;;;;;;;;;:65;;;;;;;;;;;;;;;;;;1022:33;1039:15;1022:33;;;;;;;;;;;;;;;;;;;;;;736:327;338:2269;;;;;;",
  "deployedSourceMap": "338:2269:14:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1870:12;1885:6;:18;;:47;1904:27;;;;;;;;;;;;;;;;;;;1885:47;;;;;;;;;;;;;;;;;;;;;1870:62;;1943:22;1968:8;;1943:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1943:33:14;;;;;;;;2095:1;2092;2080:9;2074:16;2067:4;2056:9;2052:20;2046:4;2042:1;2038:6;2025:72;2123:14;2168:4;2162:11;2210:4;2207:1;2202:3;2187:28;2411:6;2440:1;2435:66;;;;2562:4;2557:3;2550:17;2435:66;2477:4;2472:3;2465:17;8938:153:13;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8938:153:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8938:153:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11723:199;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11723:199:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11723:199:13;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11723:199:13;;;;;;;;;;;;;;;;3479:125;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3479:125:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3479:125:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;14565:101;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14565:101:13;;;:::i;:::-;;;;;;;;;;;;;;;;;;;13489:139;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13489:139:13;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;13489:139:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9314:149;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9314:149:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9314:149:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6681:151;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6681:151:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6681:151:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13907:158;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13907:158:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13907:158:13;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;8286:161;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8286:161:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8286:161:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1273:97:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1273:97:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1273:97:14;;;;;;;;;;;;;;;;;;;:::i;:::-;;2164:155:13;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2164:155:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2164:155:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;13131:115;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13131:115:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13131:115:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8621:153;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8621:153:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8621:153:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2632:142;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2632:142:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2632:142:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7498:213;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7498:213:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7498:213:13;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;7498:213:13;;;;;;;;;;;;;;;;1768:115;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1768:115:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1768:115:13;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11291:136;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11291:136:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11291:136:13;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;12360:193;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12360:193:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12360:193:13;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5934:165;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5934:165:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5934:165:13;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;14287:163;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14287:163:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14287:163:13;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1411:148;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1411:148:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1411:148:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4917:168;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4917:168:13;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4917:168:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2977:146;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2977:146:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2977:146:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1565:127:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1565:127:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1565:127:14;;;;;;;;;;;;;;;;;;;:::i;:::-;;4385:243:13;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4385:243:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4385:243:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4385:243:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9574:110;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9574:110:13;;;:::i;:::-;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;9574:110:13;;;;;;;;;;;;;;;;7074:171;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7074:171:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7074:171:13;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5288:147;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5288:147:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5288:147:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1009:143;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1009:143:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1009:143:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10261:165;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10261:165:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10261:165:13;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10851:192;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10851:192:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10851:192:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10851:192:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10851:192:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6317:115;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6317:115:13;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8938:153;9014:7;9041:42;9072:10;9041:6;:30;;:42;;;;:::i;:::-;9034:49;;8938:153;;;:::o;11723:199::-;11821:17;;:::i;:::-;11858:56;11891:10;11903;11858:6;:32;;:56;;;;;:::i;:::-;11851:63;;11723:199;;;;:::o;3479:125::-;3541:7;3568:28;3590:5;3568:6;:21;;:28;;;;:::i;:::-;3561:35;;3479:125;;;:::o;14565:101::-;14611:7;14638:20;:6;:18;:20::i;:::-;14631:27;;14565:101;:::o;13489:139::-;13542:7;13551;13560:13;13593:27;:6;:25;:27::i;:::-;13586:34;;;;;;13489:139;;;:::o;9314:149::-;9388:7;9415:40;9446:8;9415:6;:30;;:40;;;;:::i;:::-;9408:47;;9314:149;;;:::o;6681:151::-;6753:7;6762:4;6786:38;6813:10;6786:6;:26;;:38;;;;:::i;:::-;6779:45;;;;6681:151;;;:::o;13907:158::-;13991:4;14015:42;14034:10;14046;14015:6;:18;;:42;;;;;:::i;:::-;14008:49;;13907:158;;;;:::o;8286:161::-;8366:7;8393:46;8428:10;8393:6;:34;;:46;;;;:::i;:::-;8386:53;;8286:161;;;:::o;1273:97:14:-;1333:29;1352:9;1333:6;:18;;:29;;;;:::i;:::-;1273:97;:::o;2164:155:13:-;2245:7;2272:6;:18;;;;2291:5;2298:12;2272:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2272:39:13;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2272:39:13;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2272:39:13;;;;;;;;;;;;;;;;2265:46;;2164:155;;;;:::o;13131:115::-;13187:7;13214:24;13232:5;13214:6;:17;;:24;;;;:::i;:::-;13207:31;;13131:115;;;:::o;8621:153::-;8697:7;8724:42;8759:6;8724;:34;;:42;;;;:::i;:::-;8717:49;;8621:153;;;:::o;2632:142::-;2708:4;2732:34;2747:10;2759:6;2732;:14;;:34;;;;;:::i;:::-;2725:41;;2632:142;;;;:::o;7498:213::-;7603:17;;:::i;:::-;7640:63;7680:10;7692;7640:6;:39;;:63;;;;;:::i;:::-;7633:70;;7498:213;;;;:::o;1768:115::-;1825:7;1852:6;:16;;;;1869:5;1852:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1852:23:13;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1852:23:13;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1852:23:13;;;;;;;;;;;;;;;;1845:30;;1768:115;;;:::o;11291:136::-;11354:7;11363;11390:29;11411:7;11390:6;:20;;:29;;;;:::i;:::-;11383:36;;;;11291:136;;;:::o;12360:193::-;12460:7;12487:58;12526:10;12538:6;12487;:38;;:58;;;;;:::i;:::-;12480:65;;12360:193;;;;:::o;5934:165::-;6020:7;6047:44;6073:10;6085:5;6047:6;:25;;:44;;;;;:::i;:::-;6040:51;;5934:165;;;;:::o;14287:163::-;14372:7;14399:43;14419:10;14431;14399:6;:19;;:43;;;;;:::i;:::-;14392:50;;14287:163;;;;:::o;1411:148::-;1490:4;1514:6;:21;;;;1536:5;1543:7;1514:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1514:37:13;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1514:37:13;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1514:37:13;;;;;;;;;;;;;;;;1507:44;;1411:148;;;;:::o;4917:168::-;4971:7;4980;4989;4998:13;5013:7;5022;5049:28;:6;:26;:28::i;:::-;5042:35;;;;;;;;;;;;4917:168;;;;;;:::o;2977:146::-;3055:4;3079:36;3094:10;3106:8;3079:6;:14;;:36;;;;;:::i;:::-;3072:43;;2977:146;;;;:::o;1565:127:14:-;1640:44;1668:15;1640:6;:27;;:44;;;;:::i;:::-;1565:127;:::o;4385:243:13:-;4480:7;4489:4;4495;4501;4507:7;4516;4525;4534:17;;:::i;:::-;4553:6;4584:36;4609:10;4584:6;:24;;:36;;;;:::i;:::-;4577:43;;;;;;;;;;;;;;;;;;4385:243;;;;;;;;;;;:::o;9574:110::-;9618:18;;:::i;:::-;9656:20;:6;:18;:20::i;:::-;9649:27;;9574:110;:::o;7074:171::-;7163:7;7190:47;7214:10;7226;7190:6;:23;;:47;;;;;:::i;:::-;7183:54;;7074:171;;;;:::o;5288:147::-;5361:7;5388:39;5421:5;5388:6;:32;;:39;;;;:::i;:::-;5381:46;;5288:147;;;:::o;1009:143::-;1084:7;1111:6;:16;;;;1128:5;1135:8;1111:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1111:33:13;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1111:33:13;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1111:33:13;;;;;;;;;;;;;;;;1104:40;;1009:143;;;;:::o;10261:165::-;10347:7;10374:44;10400:10;10412:5;10374:6;:25;;:44;;;;;:::i;:::-;10367:51;;10261:165;;;;:::o;10851:192::-;10918:13;10933;10948:7;10957;10966;10975;11002:33;11024:10;11002:6;:21;;:33;;;;:::i;:::-;10995:40;;;;;;;;;;;;10851:192;;;;;;;:::o;6317:115::-;6367:7;6376:4;6400:24;:6;:22;:24::i;:::-;6393:31;;;;6317:115;;:::o;11112:200:17:-;11240:7;11267:4;:25;;:37;11293:10;11267:37;;;;;;;;;;;;11260:44;;11112:200;;;;:::o;14667:288::-;14844:17;;:::i;:::-;14886:4;:19;;:31;14906:10;14886:31;;;;;;;;;;;:49;;:61;14936:10;14886:61;;;;;;;;;;;14879:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14667:288;;;;;:::o;2974:172::-;3088:7;3115:4;:16;;:23;3132:5;3115:23;;;;;;;;;;;;;;;;;;;;;3108:30;;2974:172;;;;:::o;18759:171::-;18855:7;18882:4;:13;;:40;18896:25;;;;;;;;;;;;;;;;;;;18882:40;;;;;;;;;;;;18875:47;;18759:171;;;:::o;16692:398::-;16795:7;16804;16813:13;16839:20;16862:21;16878:4;16862:15;:21::i;:::-;16839:44;;16916:12;16943:4;:19;;:33;16963:12;16943:33;;;;;;;;;;;:45;;:68;16989:21;;;;;;;;;;;;;;;;;;;16943:68;;;;;;;;;;;;17026:4;:19;;:33;17046:12;17026:33;;;;;;;;;;;:45;;16894:188;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16692:398;;;;;:::o;11531:200::-;11659:7;11686:4;:25;;:37;11712:10;11686:37;;;;;;;;;;;;11679:44;;11531:200;;;;:::o;8135:476::-;8259:7;8268:4;8285:42;8330:4;:19;;:31;8350:10;8330:31;;;;;;;;;;;8285:76;;8412:1;8376:8;:26;;:33;;;;:37;8372:232;;;8438:97;8451:4;8457:10;8469:8;:26;;8532:1;8496:8;:26;;:33;;;;:37;8469:65;;;;;;;;;;;;;;;;8438:12;:97::i;:::-;8537:4;8430:112;;;;;;;8372:232;8583:1;8586:5;8575:17;;;;;;;;8135:476;;;;;;:::o;17917:221::-;18053:4;18077;:19;;:31;18097:10;18077:31;;;;;;;;;;;:41;;:53;18119:10;18077:53;;;;;;;;;;;;;;;;;;;;;18070:60;;17917:221;;;;;:::o;10289:223::-;10421:7;10448:4;:19;;:31;10468:10;10448:31;;;;;;;;;;;:49;;:56;;;;10441:63;;10289:223;;;;:::o;848:263::-;1009:10;968:51;;:4;:16;;:37;985:19;;;;;;;;;;;;;;;;;;;968:37;;;;;;;;;;;;;;;;;;;;;:51;;;960:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1094:9;1054:4;:16;;:37;1071:19;;;;;;;;;;;;;;;;;;;1054:37;;;;;;;;;;;;:49;;;;;;;;;;;;;;;;;;848:263;;:::o;16284:165::-;16394:7;16421:4;:13;;:20;16435:5;16421:20;;;;;;;;;;;;16414:27;;16284:165;;;;:::o;10686:262::-;10814:7;10852:2;10842:6;:12;;10834:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10903:4;:29;;:37;10933:6;10903:37;;;;;;;;;;;;10896:44;;10686:262;;;;:::o;1996:202::-;2124:4;2148;:22;;:34;2171:10;2148:34;;;;;;;;;;;:42;2183:6;2148:42;;;;;;;;;;;;;;;;;;;;;;;;;2141:49;;1996:202;;;;;:::o;9371:291::-;9555:17;;:::i;:::-;9597:4;:19;;:31;9617:10;9597:31;;;;;;;;;;;:45;;:57;9643:10;9597:57;;;;;;;;;;;9590:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9371:291;;;;;:::o;14130:241::-;14245:7;14254;14282:4;:18;;:27;14301:7;14282:27;;;;;;;;;;;;;;;:41;;;14325:4;:18;;:27;14344:7;14325:27;;;;;;;;;;;;;;;:37;;;14274:89;;;;14130:241;;;;;:::o;15430:276::-;15609:7;15641:4;:19;;:31;15661:10;15641:31;;;;;;;;;;;:49;;15691:6;15641:57;;;;;;;;;;;;;;;;15634:64;;15430:276;;;;;:::o;7018:257::-;7183:7;7215:4;:17;;:29;7233:10;7215:29;;;;;;;;;;;:45;;:52;7261:5;7215:52;;;;;;;;;;;;7208:59;;7018:257;;;;;:::o;18385:259::-;18549:7;18581:4;:19;;:31;18601:10;18581:31;;;;;;;;;;;:43;;:55;18625:10;18581:55;;;;;;;;;;;;18574:62;;18385:259;;;;;:::o;5416:706::-;5547:7;5556;5565;5574:13;5589:7;5598;5645:4;:21;;;5681:4;:13;;:44;5695:29;;;;;;;;;;;;;;;;;;;5681:44;;;;;;;;;;;;5740:4;:13;;:38;5754:23;;;;;;;;;;;;;;;;;;;5740:38;;;;;;;;;;;;5793:4;:19;;:65;5813:4;:13;;:44;5827:29;;;;;;;;;;;;;;;;;;;5813:44;;;;;;;;;;;;5793:65;;;;;;;;;;;:77;;5885:4;:19;;:65;5905:4;:13;;:44;5919:29;;;;;;;;;;;;;;;;;;;5905:44;;;;;;;;;;;;5885:65;;;;;;;;;;;:77;;:103;5963:24;;;;;;;;;;;;;;;;;;;5885:103;;;;;;;;;;;;6003:4;:19;;:65;6023:4;:13;;:44;6037:29;;;;;;;;;;;;;;;;;;;6023:44;;;;;;;;;;;;6003:65;;;;;;;;;;;:77;;:100;6081:21;;;;;;;;;;;;;;;;;;;6003:100;;;;;;;;;;;;5623:491;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5416:706;;;;;;;:::o;2411:207::-;2541:4;2565;:17;;:29;2583:10;2565:29;;;;;;;;;;;:35;;:45;2601:8;2565:45;;;;;;;;;;;;;;;;;;;;;;;;;2558:52;;2411:207;;;;;:::o;1316:341::-;1492:10;1451:51;;:4;:16;;:37;1468:19;;;;;;;;;;;;;;;;;;;1451:37;;;;;;;;;;;;;;;;;;;;;:51;;;1443:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1585:15;1537:4;:16;;:45;1554:27;;;;;;;;;;;;;;;;;;;1537:45;;;;;;;;;;;;:63;;;;;;;;;;;;;;;;;;1616:33;1633:15;1616:33;;;;;;;;;;;;;;;;;;;;;;1316:341;;:::o;3927:1200::-;4076:7;4085:4;4091;4097;4103:7;4112;4121;4130:17;;:::i;:::-;4149:6;4173:38;4214:4;:17;;:29;4232:10;4214:29;;;;;;;;;;;4173:70;;4276:4;:9;;;4300:4;:13;;;;;;;;;;;;4328:4;:22;;;;;;;;;;;;4365:4;:15;;;;;;;;;;;;4395:4;:18;;;;;;;;;;;;4428:4;:19;;;;;;;;;;;;4462:4;:24;;;;;;;;;;;;4254:865;;;;;;;;4520:4;:20;;:44;4541:22;;;;;;;;;;;;;;;;;;;4520:44;;;;;;;;;;;;4254:865;;;;4583:4;:20;;:44;4604:22;;;;;;;;;;;;;;;;;;;4583:44;;;;;;;;;;;;4254:865;;;;4646:4;:20;;:40;4667:18;;;;;;;;;;;;;;;;;;;4646:40;;;;;;;;;;;;4254:865;;;;4705:4;:20;;:51;4726:29;;;;;;;;;;;;;;;;;;;4705:51;;;;;;;;;;;;4254:865;;;;4775:4;:20;;:48;4796:26;;;;;;;;;;;;;;;;;;;4775:48;;;;;;;;;;;;4254:865;;;;4842:4;:20;;:46;4863:24;;;;;;;;;;;;;;;;;;;4842:46;;;;;;;;;;;;4254:865;;;;4907:4;:20;;:44;4928:22;;;;;;;;;;;;;;;;;;;4907:44;;;;;;;;;;;;4254:865;;;;4970:4;:20;;:41;4991:19;;;;;;;;;;;;;;;;;;;4970:41;;;;;;;;;;;;4254:865;;;;5030:4;:20;;:38;5051:16;;;;;;;;;;;;;;;;;;;5030:38;;;;;;;;;;;;4254:865;;;5098:4;:10;;;4254:865;;;;;;;;;;;;;;;;;;;3927:1200;;;;;;;;;;;:::o;11842:155::-;11938:18;;:::i;:::-;11976:4;:13;;11969:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11842:155;;;:::o;8853:265::-;9021:7;9053:4;:19;;:31;9073:10;9053:31;;;;;;;;;;;:45;;:57;9099:10;9053:57;;;;;;;;;;;;9046:64;;8853:265;;;;;:::o;6325:194::-;6450:7;6477:4;:27;;:34;6505:5;6477:34;;;;;;;;;;;;6470:41;;6325:194;;;;:::o;12574:255::-;12739:7;12771:4;:19;;:31;12791:10;12771:31;;;;;;;;;;;:43;;:50;12815:5;12771:50;;;;;;;;;;;;12764:57;;12574:255;;;;;:::o;13254:628::-;13400:13;13415;13430:7;13439;13448;13457;13482:42;13527:4;:19;;:31;13547:10;13527:31;;;;;;;;;;;13482:76;;13591:8;:20;;13626:8;:19;;13660:8;:18;;;13693:8;:20;;:46;13714:24;;;;;;;;;;;;;;;;;;;13693:46;;;;;;;;;;;;13754:8;:20;;:51;13775:29;;;;;;;;;;;;;;;;;;;13754:51;;;;;;;;;;;;13820:8;:20;;:43;13841:21;;;;;;;;;;;;;;;;;;;13820:43;;;;;;;;;;;;13569:305;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13254:628;;;;;;;;:::o;7493:393::-;7593:7;7602:4;7641:207;7672:4;7695;:25;;:73;7721:4;:13;;:46;7735:31;;;;;;;;;;;;;;;;;;;7721:46;;;;;;;;;;;;7695:73;;;;;;;;;;;;7787:4;:13;;:46;7801:31;;;;;;;;;;;;;;;;;;;7787:46;;;;;;;;;;;;7641:12;:207::i;:::-;7863:4;7619:259;;;;7493:393;;;:::o;17338:300::-;17438:18;17469:12;17492:14;17534:35;17555:4;:13;;17534:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:20;:35::i;:::-;17517:52;;;;;;;;17593:4;:29;;:37;17623:6;17593:37;;;;;;;;;;;;17580:50;;17338:300;;;;;:::o;776:303:22:-;840:11;853:16;888:4;893:1;888:7;;;;;;;;;;;882:13;;911:9;923:1;911:13;;906:166;930:11;926:1;:15;906:166;;;977:3;967:4;972:1;967:7;;;;;;;;;;;:13;963:98;;;1007:4;1012:1;1007:7;;;;;;;;;;;1001:13;;1044:1;1033:12;;963:98;943:3;;;;;;;906:166;;;;776:303;;;:::o;338:2269:14:-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;338:2269:14;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;338:2269:14;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;338:2269:14;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;338:2269:14;;;;:::o",
  "source": "pragma solidity ^0.5.0;\r\n\r\nimport \"./Old2TellorGetters.sol\";\r\n\r\n/**\r\n* @title Tellor Master\r\n* @dev This is the Master contract with all tellor getter functions and delegate call to Tellor.\r\n* The logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer,\r\n* TellorGettersLibrary, and TellorStake\r\n*/\r\ncontract OldTellorMaster2 is Old2TellorGetters {\r\n    event NewTellorAddress(address _newTellor);\r\n\r\n    /**\r\n    * @dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\r\n    * account, the tellor contract to the Tellor master address and owner to the Tellor master owner address\r\n    * @param _tellorContract is the address for the tellor contract\r\n    */\r\n    constructor(address _tellorContract) public {\r\n        tellor.init();\r\n        tellor.addressVars[keccak256(\"_owner\")] = msg.sender;\r\n        tellor.addressVars[keccak256(\"_deity\")] = msg.sender;\r\n        tellor.addressVars[keccak256(\"tellorContract\")] = _tellorContract;\r\n        emit NewTellorAddress(_tellorContract);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp\r\n    * @dev Only needs to be in library\r\n    * @param _newDeity the new Deity in the contract\r\n    */\r\n\r\n    function changeDeity(address _newDeity) external {\r\n        tellor.changeDeity(_newDeity);\r\n    }\r\n\r\n    /**\r\n    * @dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\r\n    * @param _tellorContract the address of the new Tellor Contract\r\n    */\r\n    function changeTellorContract(address _tellorContract) external {\r\n        tellor.changeTellorContract(_tellorContract);\r\n    }\r\n\r\n    /**\r\n    * @dev This is the fallback function that allows contracts to call the tellor contract at the address stored\r\n    */\r\n    function() external payable {\r\n        address addr = tellor.addressVars[keccak256(\"tellorContract\")];\r\n        bytes memory _calldata = msg.data;\r\n        assembly {\r\n            let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\r\n            let size := returndatasize\r\n            let ptr := mload(0x40)\r\n            returndatacopy(ptr, 0, size)\r\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\r\n            // if the call returned error data, forward it\r\n            switch result\r\n                case 0 {\r\n                    revert(ptr, size)\r\n                }\r\n                default {\r\n                    return(ptr, size)\r\n                }\r\n        }\r\n    }\r\n}\r\n",
  "sourcePath": "C:\\company\\code\\tellorlegacy\\contracts\\oldContracts2\\Old2TellorMaster.sol",
  "ast": {
    "absolutePath": "/C/company/code/tellorlegacy/contracts/oldContracts2/Old2TellorMaster.sol",
    "exportedSymbols": {
      "OldTellorMaster2": [
        6614
      ]
    },
    "id": 6615,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6516,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:14"
      },
      {
        "absolutePath": "/C/company/code/tellorlegacy/contracts/oldContracts2/Old2TellorGetters.sol",
        "file": "./Old2TellorGetters.sol",
        "id": 6517,
        "nodeType": "ImportDirective",
        "scope": 6615,
        "sourceUnit": 6515,
        "src": "27:33:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6518,
              "name": "Old2TellorGetters",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6514,
              "src": "367:17:14",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Old2TellorGetters_$6514",
                "typeString": "contract Old2TellorGetters"
              }
            },
            "id": 6519,
            "nodeType": "InheritanceSpecifier",
            "src": "367:17:14"
          }
        ],
        "contractDependencies": [
          6514
        ],
        "contractKind": "contract",
        "documentation": "@title Tellor Master\n@dev This is the Master contract with all tellor getter functions and delegate call to Tellor.\nThe logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer,\nTellorGettersLibrary, and TellorStake",
        "fullyImplemented": true,
        "id": 6614,
        "linearizedBaseContracts": [
          6614,
          6514
        ],
        "name": "OldTellorMaster2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 6523,
            "name": "NewTellorAddress",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 6522,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6521,
                  "indexed": false,
                  "name": "_newTellor",
                  "nodeType": "VariableDeclaration",
                  "scope": 6523,
                  "src": "415:18:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6520,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "415:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "414:20:14"
            },
            "src": "392:43:14"
          },
          {
            "body": {
              "id": 6569,
              "nodeType": "Block",
              "src": "780:283:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 6528,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6045,
                        "src": "791:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                          "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6530,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "init",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10651,
                      "src": "791:11:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$",
                        "typeString": "function (struct Old2TellorStorage.TellorStorageStruct storage pointer)"
                      }
                    },
                    "id": 6531,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "791:13:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6532,
                  "nodeType": "ExpressionStatement",
                  "src": "791:13:14"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6542,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 6533,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6045,
                          "src": "815:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                            "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 6538,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10953,
                        "src": "815:18:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 6539,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6f776e6572",
                            "id": 6536,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "844:8:14",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            },
                            "value": "_owner"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            }
                          ],
                          "id": 6535,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 18962,
                          "src": "834:9:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 6537,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "834:19:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "815:39:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 6540,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 18968,
                        "src": "857:3:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 6541,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "857:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "815:52:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 6543,
                  "nodeType": "ExpressionStatement",
                  "src": "815:52:14"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6553,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 6544,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6045,
                          "src": "878:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                            "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 6549,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10953,
                        "src": "878:18:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 6550,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6465697479",
                            "id": 6547,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "907:8:14",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            },
                            "value": "_deity"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            }
                          ],
                          "id": 6546,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 18962,
                          "src": "897:9:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 6548,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "897:19:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "878:39:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 6551,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 18968,
                        "src": "920:3:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 6552,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "920:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "878:52:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 6554,
                  "nodeType": "ExpressionStatement",
                  "src": "878:52:14"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6563,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 6555,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6045,
                          "src": "941:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                            "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 6560,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10953,
                        "src": "941:18:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 6561,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "74656c6c6f72436f6e7472616374",
                            "id": 6558,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "970:16:14",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            },
                            "value": "tellorContract"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            }
                          ],
                          "id": 6557,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 18962,
                          "src": "960:9:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 6559,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "960:27:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "941:47:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 6562,
                      "name": "_tellorContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6525,
                      "src": "991:15:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "941:65:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 6564,
                  "nodeType": "ExpressionStatement",
                  "src": "941:65:14"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6566,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6525,
                        "src": "1039:15:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 6565,
                      "name": "NewTellorAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6523,
                      "src": "1022:16:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 6567,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1022:33:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6568,
                  "nodeType": "EmitStatement",
                  "src": "1017:38:14"
                }
              ]
            },
            "documentation": "@dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\naccount, the tellor contract to the Tellor master address and owner to the Tellor master owner address\n@param _tellorContract is the address for the tellor contract",
            "id": 6570,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6526,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6525,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 6570,
                  "src": "748:23:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6524,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "748:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "747:25:14"
            },
            "returnParameters": {
              "id": 6527,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "780:0:14"
            },
            "scope": 6614,
            "src": "736:327:14",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 6581,
              "nodeType": "Block",
              "src": "1322:48:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6578,
                        "name": "_newDeity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6572,
                        "src": "1352:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 6575,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6045,
                        "src": "1333:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                          "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6577,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeDeity",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7839,
                      "src": "1333:18:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$",
                        "typeString": "function (struct Old2TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 6579,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1333:29:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6580,
                  "nodeType": "ExpressionStatement",
                  "src": "1333:29:14"
                }
              ]
            },
            "documentation": "@dev Gets the 5 miners who mined the value for the specified requestId/_timestamp\n@dev Only needs to be in library\n@param _newDeity the new Deity in the contract",
            "id": 6582,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeDeity",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6573,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6572,
                  "name": "_newDeity",
                  "nodeType": "VariableDeclaration",
                  "scope": 6582,
                  "src": "1294:17:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6571,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1294:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1293:19:14"
            },
            "returnParameters": {
              "id": 6574,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1322:0:14"
            },
            "scope": 6614,
            "src": "1273:97:14",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 6593,
              "nodeType": "Block",
              "src": "1629:63:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6590,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6584,
                        "src": "1668:15:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 6587,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6045,
                        "src": "1640:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                          "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6589,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeTellorContract",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7874,
                      "src": "1640:27:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$",
                        "typeString": "function (struct Old2TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 6591,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1640:44:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6592,
                  "nodeType": "ExpressionStatement",
                  "src": "1640:44:14"
                }
              ]
            },
            "documentation": "@dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\n@param _tellorContract the address of the new Tellor Contract",
            "id": 6594,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeTellorContract",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6585,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6584,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 6594,
                  "src": "1595:23:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6583,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1595:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1594:25:14"
            },
            "returnParameters": {
              "id": 6586,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1629:0:14"
            },
            "scope": 6614,
            "src": "1565:127:14",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 6612,
              "nodeType": "Block",
              "src": "1859:745:14",
              "statements": [
                {
                  "assignments": [
                    6598
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 6598,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 6612,
                      "src": "1870:12:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 6597,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1870:7:14",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 6605,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 6599,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6045,
                        "src": "1885:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                          "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6600,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "addressVars",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10953,
                      "src": "1885:18:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 6604,
                    "indexExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "74656c6c6f72436f6e7472616374",
                          "id": 6602,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1914:16:14",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          },
                          "value": "tellorContract"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          }
                        ],
                        "id": 6601,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 18962,
                        "src": "1904:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 6603,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1904:27:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1885:47:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1870:62:14"
                },
                {
                  "assignments": [
                    6607
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 6607,
                      "name": "_calldata",
                      "nodeType": "VariableDeclaration",
                      "scope": 6612,
                      "src": "1943:22:14",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 6606,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1943:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 6610,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 6608,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18968,
                      "src": "1968:3:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 6609,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "data",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "1968:8:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_calldata_ptr",
                      "typeString": "bytes calldata"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1943:33:14"
                },
                {
                  "externalReferences": [
                    {
                      "_calldata": {
                        "declaration": 6607,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2080:9:14",
                        "valueSize": 1
                      }
                    },
                    {
                      "_calldata": {
                        "declaration": 6607,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2056:9:14",
                        "valueSize": 1
                      }
                    },
                    {
                      "addr": {
                        "declaration": 6598,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2046:4:14",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 6611,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n    let size := returndatasize()\n    let ptr := mload(0x40)\n    returndatacopy(ptr, 0, size)\n    switch result\n    case 0 { revert(ptr, size) }\n    default { return(ptr, size) }\n}",
                  "src": "1987:610:14"
                }
              ]
            },
            "documentation": "@dev This is the fallback function that allows contracts to call the tellor contract at the address stored",
            "id": 6613,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6595,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1839:2:14"
            },
            "returnParameters": {
              "id": 6596,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1859:0:14"
            },
            "scope": 6614,
            "src": "1831:773:14",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 6615,
        "src": "338:2269:14"
      }
    ],
    "src": "0:2609:14"
  },
  "legacyAST": {
    "absolutePath": "/C/company/code/tellorlegacy/contracts/oldContracts2/Old2TellorMaster.sol",
    "exportedSymbols": {
      "OldTellorMaster2": [
        6614
      ]
    },
    "id": 6615,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6516,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:14"
      },
      {
        "absolutePath": "/C/company/code/tellorlegacy/contracts/oldContracts2/Old2TellorGetters.sol",
        "file": "./Old2TellorGetters.sol",
        "id": 6517,
        "nodeType": "ImportDirective",
        "scope": 6615,
        "sourceUnit": 6515,
        "src": "27:33:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6518,
              "name": "Old2TellorGetters",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6514,
              "src": "367:17:14",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Old2TellorGetters_$6514",
                "typeString": "contract Old2TellorGetters"
              }
            },
            "id": 6519,
            "nodeType": "InheritanceSpecifier",
            "src": "367:17:14"
          }
        ],
        "contractDependencies": [
          6514
        ],
        "contractKind": "contract",
        "documentation": "@title Tellor Master\n@dev This is the Master contract with all tellor getter functions and delegate call to Tellor.\nThe logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer,\nTellorGettersLibrary, and TellorStake",
        "fullyImplemented": true,
        "id": 6614,
        "linearizedBaseContracts": [
          6614,
          6514
        ],
        "name": "OldTellorMaster2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 6523,
            "name": "NewTellorAddress",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 6522,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6521,
                  "indexed": false,
                  "name": "_newTellor",
                  "nodeType": "VariableDeclaration",
                  "scope": 6523,
                  "src": "415:18:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6520,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "415:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "414:20:14"
            },
            "src": "392:43:14"
          },
          {
            "body": {
              "id": 6569,
              "nodeType": "Block",
              "src": "780:283:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 6528,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6045,
                        "src": "791:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                          "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6530,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "init",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10651,
                      "src": "791:11:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$",
                        "typeString": "function (struct Old2TellorStorage.TellorStorageStruct storage pointer)"
                      }
                    },
                    "id": 6531,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "791:13:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6532,
                  "nodeType": "ExpressionStatement",
                  "src": "791:13:14"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6542,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 6533,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6045,
                          "src": "815:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                            "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 6538,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10953,
                        "src": "815:18:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 6539,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6f776e6572",
                            "id": 6536,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "844:8:14",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            },
                            "value": "_owner"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            }
                          ],
                          "id": 6535,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 18962,
                          "src": "834:9:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 6537,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "834:19:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "815:39:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 6540,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 18968,
                        "src": "857:3:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 6541,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "857:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "815:52:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 6543,
                  "nodeType": "ExpressionStatement",
                  "src": "815:52:14"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6553,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 6544,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6045,
                          "src": "878:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                            "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 6549,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10953,
                        "src": "878:18:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 6550,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6465697479",
                            "id": 6547,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "907:8:14",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            },
                            "value": "_deity"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            }
                          ],
                          "id": 6546,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 18962,
                          "src": "897:9:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 6548,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "897:19:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "878:39:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 6551,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 18968,
                        "src": "920:3:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 6552,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "920:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "878:52:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 6554,
                  "nodeType": "ExpressionStatement",
                  "src": "878:52:14"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6563,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 6555,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6045,
                          "src": "941:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                            "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 6560,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10953,
                        "src": "941:18:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 6561,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "74656c6c6f72436f6e7472616374",
                            "id": 6558,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "970:16:14",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            },
                            "value": "tellorContract"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            }
                          ],
                          "id": 6557,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 18962,
                          "src": "960:9:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 6559,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "960:27:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "941:47:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 6562,
                      "name": "_tellorContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6525,
                      "src": "991:15:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "941:65:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 6564,
                  "nodeType": "ExpressionStatement",
                  "src": "941:65:14"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6566,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6525,
                        "src": "1039:15:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 6565,
                      "name": "NewTellorAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6523,
                      "src": "1022:16:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 6567,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1022:33:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6568,
                  "nodeType": "EmitStatement",
                  "src": "1017:38:14"
                }
              ]
            },
            "documentation": "@dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\naccount, the tellor contract to the Tellor master address and owner to the Tellor master owner address\n@param _tellorContract is the address for the tellor contract",
            "id": 6570,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6526,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6525,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 6570,
                  "src": "748:23:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6524,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "748:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "747:25:14"
            },
            "returnParameters": {
              "id": 6527,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "780:0:14"
            },
            "scope": 6614,
            "src": "736:327:14",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 6581,
              "nodeType": "Block",
              "src": "1322:48:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6578,
                        "name": "_newDeity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6572,
                        "src": "1352:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 6575,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6045,
                        "src": "1333:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                          "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6577,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeDeity",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7839,
                      "src": "1333:18:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$",
                        "typeString": "function (struct Old2TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 6579,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1333:29:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6580,
                  "nodeType": "ExpressionStatement",
                  "src": "1333:29:14"
                }
              ]
            },
            "documentation": "@dev Gets the 5 miners who mined the value for the specified requestId/_timestamp\n@dev Only needs to be in library\n@param _newDeity the new Deity in the contract",
            "id": 6582,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeDeity",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6573,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6572,
                  "name": "_newDeity",
                  "nodeType": "VariableDeclaration",
                  "scope": 6582,
                  "src": "1294:17:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6571,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1294:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1293:19:14"
            },
            "returnParameters": {
              "id": 6574,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1322:0:14"
            },
            "scope": 6614,
            "src": "1273:97:14",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 6593,
              "nodeType": "Block",
              "src": "1629:63:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6590,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6584,
                        "src": "1668:15:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 6587,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6045,
                        "src": "1640:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                          "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6589,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeTellorContract",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7874,
                      "src": "1640:27:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$",
                        "typeString": "function (struct Old2TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 6591,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1640:44:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6592,
                  "nodeType": "ExpressionStatement",
                  "src": "1640:44:14"
                }
              ]
            },
            "documentation": "@dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\n@param _tellorContract the address of the new Tellor Contract",
            "id": 6594,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeTellorContract",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6585,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6584,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 6594,
                  "src": "1595:23:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6583,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1595:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1594:25:14"
            },
            "returnParameters": {
              "id": 6586,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1629:0:14"
            },
            "scope": 6614,
            "src": "1565:127:14",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 6612,
              "nodeType": "Block",
              "src": "1859:745:14",
              "statements": [
                {
                  "assignments": [
                    6598
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 6598,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 6612,
                      "src": "1870:12:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 6597,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1870:7:14",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 6605,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 6599,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6045,
                        "src": "1885:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                          "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6600,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "addressVars",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10953,
                      "src": "1885:18:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 6604,
                    "indexExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "74656c6c6f72436f6e7472616374",
                          "id": 6602,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1914:16:14",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          },
                          "value": "tellorContract"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          }
                        ],
                        "id": 6601,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 18962,
                        "src": "1904:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 6603,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1904:27:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1885:47:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1870:62:14"
                },
                {
                  "assignments": [
                    6607
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 6607,
                      "name": "_calldata",
                      "nodeType": "VariableDeclaration",
                      "scope": 6612,
                      "src": "1943:22:14",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 6606,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1943:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 6610,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 6608,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18968,
                      "src": "1968:3:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 6609,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "data",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "1968:8:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_calldata_ptr",
                      "typeString": "bytes calldata"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1943:33:14"
                },
                {
                  "externalReferences": [
                    {
                      "_calldata": {
                        "declaration": 6607,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2080:9:14",
                        "valueSize": 1
                      }
                    },
                    {
                      "_calldata": {
                        "declaration": 6607,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2056:9:14",
                        "valueSize": 1
                      }
                    },
                    {
                      "addr": {
                        "declaration": 6598,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2046:4:14",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 6611,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n    let size := returndatasize()\n    let ptr := mload(0x40)\n    returndatacopy(ptr, 0, size)\n    switch result\n    case 0 { revert(ptr, size) }\n    default { return(ptr, size) }\n}",
                  "src": "1987:610:14"
                }
              ]
            },
            "documentation": "@dev This is the fallback function that allows contracts to call the tellor contract at the address stored",
            "id": 6613,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6595,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1839:2:14"
            },
            "returnParameters": {
              "id": 6596,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1859:0:14"
            },
            "scope": 6614,
            "src": "1831:773:14",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 6615,
        "src": "338:2269:14"
      }
    ],
    "src": "0:2609:14"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.23",
  "updatedAt": "2020-10-04T01:22:39.967Z",
  "devdoc": {
    "details": "This is the Master contract with all tellor getter functions and delegate call to Tellor. The logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer, TellorGettersLibrary, and TellorStake",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "_spender": "address",
          "_user": "address"
        },
        "return": "Returns the remaining allowance of tokens granted to the _spender from the _user"
      },
      "allowedToTrade(address,uint256)": {
        "details": "This function returns whether or not a given user is allowed to trade a given amount",
        "params": {
          "_amount": "uint of amount",
          "_user": "address"
        },
        "return": "true if the user is alloed to trade the amount specified"
      },
      "balanceOf(address)": {
        "details": "Gets balance of owner specified",
        "params": {
          "_user": "is the owner address used to look up the balance"
        },
        "return": "Returns the balance associated with the passed in _user"
      },
      "balanceOfAt(address,uint256)": {
        "details": "Queries the balance of _user at a specific _blockNumber",
        "params": {
          "_blockNumber": "The block number when the balance is queried",
          "_user": "The address from which the balance will be retrieved"
        },
        "return": "The balance at _blockNumber"
      },
      "changeDeity(address)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestampOnly needs to be in library",
        "params": {
          "_newDeity": "the new Deity in the contract"
        }
      },
      "changeTellorContract(address)": {
        "details": "allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized",
        "params": {
          "_tellorContract": "the address of the new Tellor Contract"
        }
      },
      "constructor": {
        "details": "The constructor sets the original `tellorStorageOwner` of the contract to the sender account, the tellor contract to the Tellor master address and owner to the Tellor master owner address",
        "params": {
          "_tellorContract": "is the address for the tellor contract"
        }
      },
      "didMine(bytes32,address)": {
        "details": "This function tells you if a given challenge has been completed by a given miner",
        "params": {
          "_challenge": "the challenge to search for",
          "_miner": "address that you want to know if they solved the challenge"
        },
        "return": "true if the _miner address provided solved the"
      },
      "didVote(uint256,address)": {
        "details": "Checks if an address voted in a given dispute",
        "params": {
          "_address": "to look up",
          "_disputeId": "to look up"
        },
        "return": "bool of whether or not party voted"
      },
      "getAddressVars(bytes32)": {
        "details": "allows Tellor to read data from the addressVars mapping",
        "params": {
          "_data": "is the keccak256(\"variable_name\") of the variable that is being accessed. These are examples of how the variables are saved within other functions: addressVars[keccak256(\"_owner\")] addressVars[keccak256(\"tellorContract\")]"
        }
      },
      "getAllDisputeVars(uint256)": {
        "details": "Gets all dispute variables",
        "params": {
          "_disputeId": "to look up"
        },
        "return": "bytes32 hash of disputebool executed where true if it has been voted onbool disputeVotePassedbool isPropFork true if the dispute is a proposed forkaddress of reportedMineraddress of reportingPartyaddress of proposedForkAddressuint of requestIduint of timestampuint of valueuint of minExecutionDateuint of numberOfVotesuint of blocknumberuint of minerSlotuint of quorumuint of feeint count of the current tally"
      },
      "getCurrentVariables()": {
        "details": "Getter function for variables for the requestId being currently mined(currentRequestId)",
        "return": "current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request"
      },
      "getDisputeIdByDisputeHash(bytes32)": {
        "details": "Checks if a given hash of miner,requestId has been disputed",
        "params": {
          "_hash": "is the sha256(abi.encodePacked(_miners[2],_requestId));"
        },
        "return": "uint disputeId"
      },
      "getDisputeUintVars(uint256,bytes32)": {
        "details": "Checks for uint variables in the disputeUintVars mapping based on the disuputeId",
        "params": {
          "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is the variables/strings used to save the data in the mapping. The variables names are commented out under the disputeUintVars under the Dispute struct",
          "_disputeId": "is the dispute id;"
        },
        "return": "uint value for the bytes32 data submitted"
      },
      "getLastNewValue()": {
        "details": "Gets the a value for the latest timestamp available",
        "return": "value for timestamp of last proof of work submitedtrue if the is a timestamp for the lastNewValue"
      },
      "getLastNewValueById(uint256)": {
        "details": "Gets the a value for the latest timestamp available",
        "params": {
          "_requestId": "being requested"
        },
        "return": "value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't"
      },
      "getMinedBlockNum(uint256,uint256)": {
        "details": "Gets blocknumber for mined timestamp",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestamp to look up blocknumber"
        },
        "return": "uint of the blocknumber which the dispute was mined"
      },
      "getMinersByRequestIdAndTimestamp(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestamp to look up miners for"
        },
        "return": "the 5 miners' addresses"
      },
      "getNewValueCountbyRequestId(uint256)": {
        "details": "Counts the number of values that have been submited for the request if called for the currentRequest being mined it can tell you how many miners have submitted a value for that request so far",
        "params": {
          "_requestId": "the requestId to look up"
        },
        "return": "uint count of the number of values received for the requestId"
      },
      "getRequestIdByQueryHash(bytes32)": {
        "details": "Getter function for requestId based on the queryHash",
        "params": {
          "_request": "is the hash(of string api and granularity) to check if a request already exists"
        },
        "return": "uint requestId"
      },
      "getRequestIdByRequestQIndex(uint256)": {
        "details": "Getter function for the specified requestQ index",
        "params": {
          "_index": "to look up in the requestQ array"
        },
        "return": "uint of reqeuestId"
      },
      "getRequestIdByTimestamp(uint256)": {
        "details": "Getter function for requestId based on timestamp",
        "params": {
          "_timestamp": "to check requestId"
        },
        "return": "uint of reqeuestId"
      },
      "getRequestQ()": {
        "details": "Getter function for the requestQ array",
        "return": "the requestQ arrray"
      },
      "getRequestUintVars(uint256,bytes32)": {
        "details": "Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct for the requestId specified",
        "params": {
          "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is the variables/strings used to save the data in the mapping. The variables names are commented out under the apiUintVars under the requestDetails struct",
          "_requestId": "to look up"
        },
        "return": "uint value of the apiUintVars specified in _data for the requestId specified"
      },
      "getRequestVars(uint256)": {
        "details": "Gets the API struct variables that are not mappings",
        "params": {
          "_requestId": "to look up"
        },
        "return": "string of api to querystring of symbol of api to querybytes32 hash of stringbytes32 of the granularity(decimal places) requesteduint of index in requestQ arrayuint of current payout/tip for this requestId"
      },
      "getStakerInfo(address)": {
        "details": "This function allows users to retireve all information about a staker",
        "params": {
          "_staker": "address of staker inquiring about"
        },
        "return": "uint current state of stakeruint startDate of staking"
      },
      "getSubmissionsByTimestamp(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestampt to look up miners for"
        },
        "return": "address[5] array of 5 addresses ofminers that mined the requestId"
      },
      "getTimestampbyRequestIDandIndex(uint256,uint256)": {
        "details": "Gets the timestamp for the value based on their index",
        "params": {
          "_index": "is the value index to look up",
          "_requestID": "is the requestId to look up"
        },
        "return": "uint timestamp"
      },
      "getUintVar(bytes32)": {
        "details": "Getter for the variables saved under the TellorStorageStruct uintVars variable",
        "params": {
          "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is the variables/strings used to save the data in the mapping. The variables names are commented out under the uintVars under the TellorStorageStruct struct This is an example of how data is saved into the mapping within other functions: self.uintVars[keccak256(\"stakerCount\")]"
        },
        "return": "uint of specified variable"
      },
      "getVariablesOnDeck()": {
        "details": "Getter function for next requestId on queue/request with highest payout at time the function is called",
        "return": "onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string"
      },
      "isInDispute(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestamp to look up miners for"
        },
        "return": "bool true if requestId/timestamp is under dispute"
      },
      "retrieveData(uint256,uint256)": {
        "details": "Retreive value from oracle based on timestamp",
        "params": {
          "_requestId": "being requested",
          "_timestamp": "to retreive data/value from"
        },
        "return": "value for timestamp submitted"
      },
      "totalSupply()": {
        "details": "Getter for the total_supply of oracle tokens",
        "return": "uint total supply"
      }
    },
    "title": "Tellor Master"
  },
  "userdoc": {
    "methods": {}
  }
}