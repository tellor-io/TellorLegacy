{
  "contractName": "OldTellorMaster2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tellorContract",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newTellor",
          "type": "address"
        }
      ],
      "name": "NewTellorAddress",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "allowedToTrade",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_challenge",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_miner",
          "type": "address"
        }
      ],
      "name": "didMine",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "didVote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getAddressVars",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        }
      ],
      "name": "getAllDisputeVars",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[9]",
          "name": "",
          "type": "uint256[9]"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentVariables",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "getDisputeIdByDisputeHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getDisputeUintVars",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getLastNewValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getLastNewValueById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getMinedBlockNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getMinersByRequestIdAndTimestamp",
      "outputs": [
        {
          "internalType": "address[5]",
          "name": "",
          "type": "address[5]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getNewValueCountbyRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_request",
          "type": "bytes32"
        }
      ],
      "name": "getRequestIdByQueryHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getRequestIdByRequestQIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getRequestIdByTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRequestQ",
      "outputs": [
        {
          "internalType": "uint256[51]",
          "name": "",
          "type": "uint256[51]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getRequestUintVars",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestVars",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getStakerInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getSubmissionsByTimestamp",
      "outputs": [
        {
          "internalType": "uint256[5]",
          "name": "",
          "type": "uint256[5]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTimestampbyRequestIDandIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getUintVar",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVariablesOnDeck",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "isInDispute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "retrieveData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_newDeity",
          "type": "address"
        }
      ],
      "name": "changeDeity",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_tellorContract",
          "type": "address"
        }
      ],
      "name": "changeTellorContract",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tellorContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTellor\",\"type\":\"address\"}],\"name\":\"NewTellorAddress\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allowedToTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDeity\",\"type\":\"address\"}],\"name\":\"changeDeity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tellorContract\",\"type\":\"address\"}],\"name\":\"changeTellorContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_challenge\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_miner\",\"type\":\"address\"}],\"name\":\"didMine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"didVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getAddressVars\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getAllDisputeVars\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[9]\",\"name\":\"\",\"type\":\"uint256[9]\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentVariables\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getDisputeIdByDisputeHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getDisputeUintVars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastNewValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getLastNewValueById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinedBlockNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinersByRequestIdAndTimestamp\",\"outputs\":[{\"internalType\":\"address[5]\",\"name\":\"\",\"type\":\"address[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getNewValueCountbyRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_request\",\"type\":\"bytes32\"}],\"name\":\"getRequestIdByQueryHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRequestIdByRequestQIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getRequestIdByTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRequestQ\",\"outputs\":[{\"internalType\":\"uint256[51]\",\"name\":\"\",\"type\":\"uint256[51]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getRequestUintVars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestVars\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getSubmissionsByTimestamp\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTimestampbyRequestIDandIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getUintVar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVariablesOnDeck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"isInDispute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"retrieveData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the Master contract with all tellor getter functions and delegate call to Tellor. The logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer, TellorGettersLibrary, and TellorStake\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"_spender\":\"address\",\"_user\":\"address\"},\"return\":\"Returns the remaining allowance of tokens granted to the _spender from the _user\"},\"allowedToTrade(address,uint256)\":{\"details\":\"This function returns whether or not a given user is allowed to trade a given amount\",\"params\":{\"_amount\":\"uint of amount\",\"_user\":\"address\"},\"return\":\"true if the user is alloed to trade the amount specified\"},\"balanceOf(address)\":{\"details\":\"Gets balance of owner specified\",\"params\":{\"_user\":\"is the owner address used to look up the balance\"},\"return\":\"Returns the balance associated with the passed in _user\"},\"balanceOfAt(address,uint256)\":{\"details\":\"Queries the balance of _user at a specific _blockNumber\",\"params\":{\"_blockNumber\":\"The block number when the balance is queried\",\"_user\":\"The address from which the balance will be retrieved\"},\"return\":\"The balance at _blockNumber\"},\"changeDeity(address)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestampOnly needs to be in library\",\"params\":{\"_newDeity\":\"the new Deity in the contract\"}},\"changeTellorContract(address)\":{\"details\":\"allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\",\"params\":{\"_tellorContract\":\"the address of the new Tellor Contract\"}},\"constructor\":{\"details\":\"The constructor sets the original `tellorStorageOwner` of the contract to the sender account, the tellor contract to the Tellor master address and owner to the Tellor master owner address\",\"params\":{\"_tellorContract\":\"is the address for the tellor contract\"}},\"didMine(bytes32,address)\":{\"details\":\"This function tells you if a given challenge has been completed by a given miner\",\"params\":{\"_challenge\":\"the challenge to search for\",\"_miner\":\"address that you want to know if they solved the challenge\"},\"return\":\"true if the _miner address provided solved the\"},\"didVote(uint256,address)\":{\"details\":\"Checks if an address voted in a given dispute\",\"params\":{\"_address\":\"to look up\",\"_disputeId\":\"to look up\"},\"return\":\"bool of whether or not party voted\"},\"getAddressVars(bytes32)\":{\"details\":\"allows Tellor to read data from the addressVars mapping\",\"params\":{\"_data\":\"is the keccak256(\\\"variable_name\\\") of the variable that is being accessed. These are examples of how the variables are saved within other functions: addressVars[keccak256(\\\"_owner\\\")] addressVars[keccak256(\\\"tellorContract\\\")]\"}},\"getAllDisputeVars(uint256)\":{\"details\":\"Gets all dispute variables\",\"params\":{\"_disputeId\":\"to look up\"},\"return\":\"bytes32 hash of disputebool executed where true if it has been voted onbool disputeVotePassedbool isPropFork true if the dispute is a proposed forkaddress of reportedMineraddress of reportingPartyaddress of proposedForkAddressuint of requestIduint of timestampuint of valueuint of minExecutionDateuint of numberOfVotesuint of blocknumberuint of minerSlotuint of quorumuint of feeint count of the current tally\"},\"getCurrentVariables()\":{\"details\":\"Getter function for variables for the requestId being currently mined(currentRequestId)\",\"return\":\"current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request\"},\"getDisputeIdByDisputeHash(bytes32)\":{\"details\":\"Checks if a given hash of miner,requestId has been disputed\",\"params\":{\"_hash\":\"is the sha256(abi.encodePacked(_miners[2],_requestId));\"},\"return\":\"uint disputeId\"},\"getDisputeUintVars(uint256,bytes32)\":{\"details\":\"Checks for uint variables in the disputeUintVars mapping based on the disuputeId\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is the variables/strings used to save the data in the mapping. The variables names are commented out under the disputeUintVars under the Dispute struct\",\"_disputeId\":\"is the dispute id;\"},\"return\":\"uint value for the bytes32 data submitted\"},\"getLastNewValue()\":{\"details\":\"Gets the a value for the latest timestamp available\",\"return\":\"value for timestamp of last proof of work submitedtrue if the is a timestamp for the lastNewValue\"},\"getLastNewValueById(uint256)\":{\"details\":\"Gets the a value for the latest timestamp available\",\"params\":{\"_requestId\":\"being requested\"},\"return\":\"value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't\"},\"getMinedBlockNum(uint256,uint256)\":{\"details\":\"Gets blocknumber for mined timestamp\",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up blocknumber\"},\"return\":\"uint of the blocknumber which the dispute was mined\"},\"getMinersByRequestIdAndTimestamp(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp\",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up miners for\"},\"return\":\"the 5 miners' addresses\"},\"getNewValueCountbyRequestId(uint256)\":{\"details\":\"Counts the number of values that have been submited for the request if called for the currentRequest being mined it can tell you how many miners have submitted a value for that request so far\",\"params\":{\"_requestId\":\"the requestId to look up\"},\"return\":\"uint count of the number of values received for the requestId\"},\"getRequestIdByQueryHash(bytes32)\":{\"details\":\"Getter function for requestId based on the queryHash\",\"params\":{\"_request\":\"is the hash(of string api and granularity) to check if a request already exists\"},\"return\":\"uint requestId\"},\"getRequestIdByRequestQIndex(uint256)\":{\"details\":\"Getter function for the specified requestQ index\",\"params\":{\"_index\":\"to look up in the requestQ array\"},\"return\":\"uint of reqeuestId\"},\"getRequestIdByTimestamp(uint256)\":{\"details\":\"Getter function for requestId based on timestamp\",\"params\":{\"_timestamp\":\"to check requestId\"},\"return\":\"uint of reqeuestId\"},\"getRequestQ()\":{\"details\":\"Getter function for the requestQ array\",\"return\":\"the requestQ arrray\"},\"getRequestUintVars(uint256,bytes32)\":{\"details\":\"Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct for the requestId specified\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is the variables/strings used to save the data in the mapping. The variables names are commented out under the apiUintVars under the requestDetails struct\",\"_requestId\":\"to look up\"},\"return\":\"uint value of the apiUintVars specified in _data for the requestId specified\"},\"getRequestVars(uint256)\":{\"details\":\"Gets the API struct variables that are not mappings\",\"params\":{\"_requestId\":\"to look up\"},\"return\":\"string of api to querystring of symbol of api to querybytes32 hash of stringbytes32 of the granularity(decimal places) requesteduint of index in requestQ arrayuint of current payout/tip for this requestId\"},\"getStakerInfo(address)\":{\"details\":\"This function allows users to retireve all information about a staker\",\"params\":{\"_staker\":\"address of staker inquiring about\"},\"return\":\"uint current state of stakeruint startDate of staking\"},\"getSubmissionsByTimestamp(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp\",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestampt to look up miners for\"},\"return\":\"address[5] array of 5 addresses ofminers that mined the requestId\"},\"getTimestampbyRequestIDandIndex(uint256,uint256)\":{\"details\":\"Gets the timestamp for the value based on their index\",\"params\":{\"_index\":\"is the value index to look up\",\"_requestID\":\"is the requestId to look up\"},\"return\":\"uint timestamp\"},\"getUintVar(bytes32)\":{\"details\":\"Getter for the variables saved under the TellorStorageStruct uintVars variable\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is the variables/strings used to save the data in the mapping. The variables names are commented out under the uintVars under the TellorStorageStruct struct This is an example of how data is saved into the mapping within other functions: self.uintVars[keccak256(\\\"stakerCount\\\")]\"},\"return\":\"uint of specified variable\"},\"getVariablesOnDeck()\":{\"details\":\"Getter function for next requestId on queue/request with highest payout at time the function is called\",\"return\":\"onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string\"},\"isInDispute(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp\",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up miners for\"},\"return\":\"bool true if requestId/timestamp is under dispute\"},\"retrieveData(uint256,uint256)\":{\"details\":\"Retreive value from oracle based on timestamp\",\"params\":{\"_requestId\":\"being requested\",\"_timestamp\":\"to retreive data/value from\"},\"return\":\"value for timestamp submitted\"},\"totalSupply()\":{\"details\":\"Getter for the total_supply of oracle tokens\",\"return\":\"uint total supply\"}},\"title\":\"Tellor Master\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/jgcarv/Dev/Tellor/TellorLegacy/contracts/oldContracts2/Old2TellorMaster.sol\":\"OldTellorMaster2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/jgcarv/Dev/Tellor/TellorLegacy/contracts/oldContracts2/Old2TellorGetters.sol\":{\"keccak256\":\"0x6270c5d5e4e6ea46c0811a29b41c45b2a5675312bf5be2b9500144c07ce34aa6\",\"urls\":[\"bzz-raw://bb2ee0cc82611b7a2ec025295a5c56c38251b76cf84878828a9531aa690e3024\",\"dweb:/ipfs/QmRJaoMUkYH2M9pvUKMiVFq6CyxuLUiCZrd2F4bK8xTBM5\"]},\"/home/jgcarv/Dev/Tellor/TellorLegacy/contracts/oldContracts2/Old2TellorMaster.sol\":{\"keccak256\":\"0x0e9583dd7f84874823e11f0d0f74304bb830ea3ecc808e9a8f32c972cbf4f2f4\",\"urls\":[\"bzz-raw://bcfef95a4574276b389422b195aca7e90fceb2ea5edd7de2937d93025a24c24c\",\"dweb:/ipfs/QmYWiY3dYm7yMtFTNAp6Vk647HhvmCEtzDWWnS33Qz6e5f\"]},\"/home/jgcarv/Dev/Tellor/TellorLegacy/contracts/oldContracts2/libraries/Old2SafeMath.sol\":{\"keccak256\":\"0x8d4814c19619c2b944c082dcab398522bd5127c38df68ebcb0c1ecbf493e4070\",\"urls\":[\"bzz-raw://6373e87ed1f950550563ca51178ecc056ab55bae111f421ed3842f8da5465836\",\"dweb:/ipfs/QmZ76LJXuPUgVnk9S8Bfoynr8FQrUw3WsWtG1pGeM8MhPt\"]},\"/home/jgcarv/Dev/Tellor/TellorLegacy/contracts/oldContracts2/libraries/Old2TellorDispute.sol\":{\"keccak256\":\"0x63e21ed62fd8378674f49b018f37a130b5fceeb1ef6fb07149de59ecc7a4431c\",\"urls\":[\"bzz-raw://1733b3a02a293b168b8bbd0f4a64ea01abb78ece94b171ce789e48190783303d\",\"dweb:/ipfs/QmSAyCbpHcsP3fe2wcBY8W9oX7r1Rep6qywT5iJo4Yp9jy\"]},\"/home/jgcarv/Dev/Tellor/TellorLegacy/contracts/oldContracts2/libraries/Old2TellorGettersLibrary.sol\":{\"keccak256\":\"0x6b3fb94245e07e82ca23018e55c0687386646906563c8b4ac79e4ded2d7ca208\",\"urls\":[\"bzz-raw://e511955ad3065b5450e6b9170f2697ae357aa23e3e450331633637b8939f8bca\",\"dweb:/ipfs/QmbzrMvmfoefonBYDv23WW4fU2dSYd7RuZVddaAXTLtt59\"]},\"/home/jgcarv/Dev/Tellor/TellorLegacy/contracts/oldContracts2/libraries/Old2TellorStake.sol\":{\"keccak256\":\"0xe17e1be962b224ade6a0977a6ed377655d6ab4c0d7e9eff638a49465c5094970\",\"urls\":[\"bzz-raw://2f74e0d15faa4faf70d751f1d89f969f00ee8b4046066026c37b91c4d4880dac\",\"dweb:/ipfs/QmV2rEcLqmAAxTkDK6CVt1d6JryMG2U2KATTzAXXtNbZ1N\"]},\"/home/jgcarv/Dev/Tellor/TellorLegacy/contracts/oldContracts2/libraries/Old2TellorStorage.sol\":{\"keccak256\":\"0x7d36645848c33941bb50bda50afb592f0219e3a1acb7577e4ff19e0c1ea1e7fe\",\"urls\":[\"bzz-raw://e11112f5b78b1a388bcc2a8ff6982bed1fc679a50b335a3fbbb6227ecbd6783c\",\"dweb:/ipfs/QmRo2TUbDhQnq7a9Z5t26K7f2yeLYA5WrazEhP6ehgyXZa\"]},\"/home/jgcarv/Dev/Tellor/TellorLegacy/contracts/oldContracts2/libraries/Old2TellorTransfer.sol\":{\"keccak256\":\"0x54784cc337c8804d60ff800a42bce70cefbd1fd4c711048cdd482167eaaa23c2\",\"urls\":[\"bzz-raw://7c7170dfe8a670af2fcef07cf5477a6caf7a827f070da36f9cc9713551bb73e5\",\"dweb:/ipfs/QmXWXa7nWAse8mod5UtEoXZWPhnb5fdNUnUefnA4TgN3ec\"]},\"/home/jgcarv/Dev/Tellor/TellorLegacy/contracts/oldContracts2/libraries/Old2Utilities.sol\":{\"keccak256\":\"0x74d60c23b179f6d0a75703ca45c13765745245af7a91f97adbad4cd7c49220de\",\"urls\":[\"bzz-raw://d26f4d07db98e3b52f99c990b8128226d768e689939a464e8a70b75a7c3dea49\",\"dweb:/ipfs/QmaA6s81tCx13cNBipTr8Au1VyVXHTmftcJwk1tsVaS6ZM\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162003159380380620031598339818101604052602081101561003557600080fd5b8101908080519060200190929190505050600073__Old2TellorStake_______________________63a991c6fd90916040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b15801561009857600080fd5b505af41580156100ac573d6000803e3d6000fd5b50505050336000603f01600060405180807f5f6f776e6572000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150612e9780620002c26000396000f3fe6080604052600436106101e35760003560e01c8063733bdef011610102578063af0b132711610095578063dd62ed3e11610064578063dd62ed3e14610e7f578063e0ae93c114610f04578063e1eee6d614610f5d578063fc7cf0a014611099576101e3565b8063af0b132714610c45578063b541302914610d84578063c775b54214610dd7578063da37994114610e30576101e3565b8063999cf26c116100d1578063999cf26c14610a5b578063a22e407a14610ace578063a7c438bc14610b81578063ae0a827914610bf4576101e3565b8063733bdef0146108e457806377fbb663146109505780637f6fd5d9146109a957806393fa491514610a02576101e3565b806346eee1c41161017a5780636173c0b8116101495780636173c0b81461073c57806363bb82ad1461078b57806369026d63146107fe57806370a082311461087f576101e3565b806346eee1c4146105de57806347abd7f11461062d5780634ee2cd7e1461067e578063612c8f7f146106ed576101e3565b806319e8e03b116101b657806319e8e03b1461043a5780631db842f0146104d85780633180f8df146105275780633df0777b14610581576101e3565b80630f0b424d146102c457806311c9851214610313578063133bee5e1461039457806318160ddd1461040f575b600080603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060606000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905060008082516020840185600019f43d604051816000823e82600081146102c0578282f35b8282fd5b3480156102d057600080fd5b506102fd600480360360208110156102e757600080fd5b81019080803590602001909291905050506110cf565b6040518082815260200191505060405180910390f35b34801561031f57600080fd5b506103566004803603604081101561033657600080fd5b8101908080359060200190929190803590602001909291905050506110ec565b6040518082600560200280838360005b83811015610381578082015181840152602081019050610366565b5050505090500191505060405180910390f35b3480156103a057600080fd5b506103cd600480360360208110156103b757600080fd5b8101908080359060200190929190505050611112565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561041b57600080fd5b5061042461112f565b6040518082815260200191505060405180910390f35b34801561044657600080fd5b5061044f611140565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561049b578082015181840152602081019050610480565b50505050905090810190601f1680156104c85780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156104e457600080fd5b50610511600480360360208110156104fb57600080fd5b810190808035906020019092919050505061115a565b6040518082815260200191505060405180910390f35b34801561053357600080fd5b506105606004803603602081101561054a57600080fd5b8101908080359060200190929190505050611177565b60405180838152602001821515151581526020019250505060405180910390f35b34801561058d57600080fd5b506105c4600480360360408110156105a457600080fd5b810190808035906020019092919080359060200190929190505050611197565b604051808215151515815260200191505060405180910390f35b3480156105ea57600080fd5b506106176004803603602081101561060157600080fd5b81019080803590602001909291905050506111b7565b6040518082815260200191505060405180910390f35b34801561063957600080fd5b5061067c6004803603602081101561065057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111d4565b005b34801561068a57600080fd5b506106d7600480360360408110156106a157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111eb565b6040518082815260200191505060405180910390f35b3480156106f957600080fd5b506107266004803603602081101561071057600080fd5b81019080803590602001909291905050506112bd565b6040518082815260200191505060405180910390f35b34801561074857600080fd5b506107756004803603602081101561075f57600080fd5b81019080803590602001909291905050506112da565b6040518082815260200191505060405180910390f35b34801561079757600080fd5b506107e4600480360360408110156107ae57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112f7565b604051808215151515815260200191505060405180910390f35b34801561080a57600080fd5b506108416004803603604081101561082157600080fd5b810190808035906020019092919080359060200190929190505050611317565b6040518082600560200280838360005b8381101561086c578082015181840152602081019050610851565b5050505090500191505060405180910390f35b34801561088b57600080fd5b506108ce600480360360208110156108a257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061133d565b6040518082815260200191505060405180910390f35b3480156108f057600080fd5b506109336004803603602081101561090757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611406565b604051808381526020018281526020019250505060405180910390f35b34801561095c57600080fd5b506109936004803603604081101561097357600080fd5b810190808035906020019092919080359060200190929190505050611426565b6040518082815260200191505060405180910390f35b3480156109b557600080fd5b506109ec600480360360408110156109cc57600080fd5b810190808035906020019092919080359060200190929190505050611446565b6040518082815260200191505060405180910390f35b348015610a0e57600080fd5b50610a4560048036036040811015610a2557600080fd5b810190808035906020019092919080359060200190929190505050611466565b6040518082815260200191505060405180910390f35b348015610a6757600080fd5b50610ab460048036036040811015610a7e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611486565b604051808215151515815260200191505060405180910390f35b348015610ada57600080fd5b50610ae3611558565b6040518087815260200186815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610b41578082015181840152602081019050610b26565b50505050905090810190601f168015610b6e5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b348015610b8d57600080fd5b50610bda60048036036040811015610ba457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611580565b604051808215151515815260200191505060405180910390f35b348015610c0057600080fd5b50610c4360048036036020811015610c1757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115a0565b005b348015610c5157600080fd5b50610c7e60048036036020811015610c6857600080fd5b81019080803590602001909291905050506115b7565b604051808a81526020018915151515815260200188151515158152602001871515151581526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600960200280838360005b83811015610d63578082015181840152602081019050610d48565b50505050905001828152602001995050505050505050505060405180910390f35b348015610d9057600080fd5b50610d996115ff565b6040518082603360200280838360005b83811015610dc4578082015181840152602081019050610da9565b5050505090500191505060405180910390f35b348015610de357600080fd5b50610e1a60048036036040811015610dfa57600080fd5b810190808035906020019092919080359060200190929190505050611616565b6040518082815260200191505060405180910390f35b348015610e3c57600080fd5b50610e6960048036036020811015610e5357600080fd5b8101908080359060200190929190505050611636565b6040518082815260200191505060405180910390f35b348015610e8b57600080fd5b50610eee60048036036040811015610ea257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611653565b6040518082815260200191505060405180910390f35b348015610f1057600080fd5b50610f4760048036036040811015610f2757600080fd5b810190808035906020019092919080359060200190929190505050611751565b6040518082815260200191505060405180910390f35b348015610f6957600080fd5b50610f9660048036036020811015610f8057600080fd5b8101908080359060200190929190505050611771565b604051808060200180602001878152602001868152602001858152602001848152602001838103835289818151815260200191508051906020019080838360005b83811015610ff2578082015181840152602081019050610fd7565b50505050905090810190601f16801561101f5780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b8381101561105857808201518184015260208101905061103d565b50505050905090810190601f1680156110855780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156110a557600080fd5b506110ae6117a3565b60405180838152602001821515151581526020019250505060405180910390f35b60006110e58260006117b890919063ffffffff16565b9050919050565b6110f4612dd8565b61110a838360006117d89092919063ffffffff16565b905092915050565b600061112882600061184e90919063ffffffff16565b9050919050565b600061113b600061188e565b905090565b600080606061114f60006118e2565b925092509250909192565b6000611170826000611a1690919063ffffffff16565b9050919050565b60008061118e836000611a3690919063ffffffff16565b91509150915091565b60006111af83836000611aaf9092919063ffffffff16565b905092915050565b60006111cd826000611af190919063ffffffff16565b9050919050565b6111e8816000611b1790919063ffffffff16565b50565b60008073__Old2TellorTransfer____________________63e6c0d7f5909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561127a57600080fd5b505af415801561128e573d6000803e3d6000fd5b505050506040513d60208110156112a457600080fd5b8101908080519060200190929190505050905092915050565b60006112d3826000611caf90919063ffffffff16565b9050919050565b60006112f0826000611ccf90919063ffffffff16565b9050919050565b600061130f83836000611d669092919063ffffffff16565b905092915050565b61131f612dfa565b61133583836000611dd19092919063ffffffff16565b905092915050565b60008073__Old2TellorTransfer____________________63d3a54f059091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156113c457600080fd5b505af41580156113d8573d6000803e3d6000fd5b505050506040513d60208110156113ee57600080fd5b81019080805190602001909291905050509050919050565b60008061141d836000611e7d90919063ffffffff16565b91509150915091565b600061143e83836000611f159092919063ffffffff16565b905092915050565b600061145e83836000611f4e9092919063ffffffff16565b905092915050565b600061147e83836000611f839092919063ffffffff16565b905092915050565b60008073__Old2TellorTransfer____________________63c1364740909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561151557600080fd5b505af4158015611529573d6000803e3d6000fd5b505050506040513d602081101561153f57600080fd5b8101908080519060200190929190505050905092915050565b6000806000606060008061156c6000611fb8565b955095509550955095509550909192939495565b6000611598838360006122c29092919063ffffffff16565b905092915050565b6115b481600061233090919063ffffffff16565b50565b60008060008060008060006115ca612e1c565b60006115e08a600061252b90919063ffffffff16565b9850985098509850985098509850985098509193959799909294969850565b611607612e3f565b6116116000612901565b905090565b600061162e838360006129509092919063ffffffff16565b905092915050565b600061164c82600061298590919063ffffffff16565b9050919050565b60008073__Old2TellorTransfer____________________6321bbd360909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b15801561170e57600080fd5b505af4158015611722573d6000803e3d6000fd5b505050506040513d602081101561173857600080fd5b8101908080519060200190929190505050905092915050565b6000611769838360006129a59092919063ffffffff16565b905092915050565b60608060008060008061178e8760006129da90919063ffffffff16565b95509550955095509550955091939550919395565b6000806117b06000612c39565b915091509091565b600082604201600083815260200190815260200160002054905092915050565b6117e0612dd8565b8360480160008481526020019081526020016000206009016000838152602001908152602001600020600580602002604051908101604052809291908260058015611840576020028201915b81548152602001906001019080831161182c575b505050505090509392505050565b600082603f01600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b600081604001600060405180807f746f74616c5f737570706c790000000000000000000000000000000000000000815250600c01905060405180910390208152602001908152602001600020549050919050565b600080606060006118f285612cfb565b905080856048016000838152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054866048016000848152602001908152602001600020600001808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a015780601f106119d657610100808354040283529160200191611a01565b820191906000526020600020905b8154815290600101906020018083116119e457829003601f168201915b50505050509050935093509350509193909250565b600082604901600083815260200190815260200160002054905092915050565b60008060008460480160008581526020019081526020016000209050600081600301805490501115611a9c57611a90858583600301600185600301805490500381548110611a8057fe5b9060005260206000200154611f83565b60019250925050611aa8565b60008081915092509250505b9250929050565b6000836048016000848152602001908152602001600020600701600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b600082604801600083815260200190815260200160002060030180549050905092915050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611c22576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f742064656974790000000000000000000000000081525060200191505060405180910390fd5b8082603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600082604001600083815260200190815260200160002054905092915050565b60006032821115611d48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f526571756573745120696e6465782069732061626f766520353000000000000081525060200191505060405180910390fd5b82604301600083815260200190815260200160002054905092915050565b600083604101600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b611dd9612dfa565b8360480160008481526020019081526020016000206008016000838152602001908152602001600020600580602002604051908101604052809291908260058015611e6f576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611e25575b505050505090509392505050565b6000808360470160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548460470160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154915091509250929050565b60008360480160008481526020019081526020016000206003018281548110611f3a57fe5b906000526020600020015490509392505050565b600083604401600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600083604801600084815260200190815260200160002060060160008381526020019081526020016000205490509392505050565b60008060006060600080866000015487604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205488604001600060405180807f646966666963756c747900000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020548960480160008b604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205481526020019081526020016000206000018a60480160008c604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020548b60480160008d604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122a65780601f1061227b576101008083540402835291602001916122a6565b820191906000526020600020905b81548152906001019060200180831161228957829003601f168201915b5050505050925095509550955095509550955091939550919395565b600083604401600084815260200190815260200160002060060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461243b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f742064656974790000000000000000000000000081525060200191505060405180910390fd5b8082603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b600080600080600080600061253e612e1c565b6000808b60440160008c8152602001908152602001600020905080600001548160020160009054906101000a900460ff168260020160019054906101000a900460ff168360020160029054906101000a900460ff168460020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180610120016040528089600501600060405180807f726571756573744964000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f76616c756500000000000000000000000000000000000000000000000000000081525060050190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e457865637574696f6e446174650000000000000000000000000000000081525060100190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6e756d6265724f66566f74657300000000000000000000000000000000000000815250600d0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f626c6f636b4e756d626572000000000000000000000000000000000000000000815250600b0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e6572536c6f74000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f71756f72756d000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6665650000000000000000000000000000000000000000000000000000000000815250600301905060405180910390208152602001908152602001600020548152508860010154995099509950995099509950995099509950509295985092959850929598565b612909612e3f565b81600101603380602002604051908101604052809291908260338015612944576020028201915b815481526020019060010190808311612930575b50505050509050919050565b600083604801600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600082604a01600083815260200190815260200160002054905092915050565b600083604801600084815260200190815260200160002060040160008381526020019081526020016000205490509392505050565b606080600080600080600088604801600089815260200190815260200160002090508060000181600101826002015483600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205484600401600060405180807f7265717565737451506f736974696f6e000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205485600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054858054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b7f5780601f10612b5457610100808354040283529160200191612b7f565b820191906000526020600020905b815481529060010190602001808311612b6257829003601f168201915b50505050509550848054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c1b5780601f10612bf057610100808354040283529160200191612c1b565b820191906000526020600020905b815481529060010190602001808311612bfe57829003601f168201915b50505050509450965096509650965096509650509295509295509295565b600080612cf08384604201600086604001600060405180807f74696d654f664c6173744e657756616c756500000000000000000000000000008152506012019050604051809103902081526020019081526020016000205481526020019081526020016000205485604001600060405180807f74696d654f664c6173744e657756616c7565000000000000000000000000000081525060120190506040518091039020815260200190815260200160002054611f83565b600191509150915091565b6000806000612d4884600101603380602002604051908101604052809291908260338015612d3e576020028201915b815481526020019060010190808311612d2a575b5050505050612d6f565b80925081935050508360430160008281526020019081526020016000205492505050919050565b60008082600160338110612d7f57fe5b602002015191506000600190505b6033811015612dd25782848260338110612da357fe5b60200201511115612dc557838160338110612dba57fe5b602002015192508091505b8080600101915050612d8d565b50915091565b6040518060a00160405280600590602082028038833980820191505090505090565b6040518060a00160405280600590602082028038833980820191505090505090565b604051806101200160405280600990602082028038833980820191505090505090565b60405180610660016040528060339060208202803883398082019150509050509056fea265627a7a72315820b969341f542b0845f97dde9c6325f1c40b5db9a3c965ac0d745146f5b3d79feb64736f6c63430005100032",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c8063733bdef011610102578063af0b132711610095578063dd62ed3e11610064578063dd62ed3e14610e7f578063e0ae93c114610f04578063e1eee6d614610f5d578063fc7cf0a014611099576101e3565b8063af0b132714610c45578063b541302914610d84578063c775b54214610dd7578063da37994114610e30576101e3565b8063999cf26c116100d1578063999cf26c14610a5b578063a22e407a14610ace578063a7c438bc14610b81578063ae0a827914610bf4576101e3565b8063733bdef0146108e457806377fbb663146109505780637f6fd5d9146109a957806393fa491514610a02576101e3565b806346eee1c41161017a5780636173c0b8116101495780636173c0b81461073c57806363bb82ad1461078b57806369026d63146107fe57806370a082311461087f576101e3565b806346eee1c4146105de57806347abd7f11461062d5780634ee2cd7e1461067e578063612c8f7f146106ed576101e3565b806319e8e03b116101b657806319e8e03b1461043a5780631db842f0146104d85780633180f8df146105275780633df0777b14610581576101e3565b80630f0b424d146102c457806311c9851214610313578063133bee5e1461039457806318160ddd1461040f575b600080603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060606000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905060008082516020840185600019f43d604051816000823e82600081146102c0578282f35b8282fd5b3480156102d057600080fd5b506102fd600480360360208110156102e757600080fd5b81019080803590602001909291905050506110cf565b6040518082815260200191505060405180910390f35b34801561031f57600080fd5b506103566004803603604081101561033657600080fd5b8101908080359060200190929190803590602001909291905050506110ec565b6040518082600560200280838360005b83811015610381578082015181840152602081019050610366565b5050505090500191505060405180910390f35b3480156103a057600080fd5b506103cd600480360360208110156103b757600080fd5b8101908080359060200190929190505050611112565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561041b57600080fd5b5061042461112f565b6040518082815260200191505060405180910390f35b34801561044657600080fd5b5061044f611140565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561049b578082015181840152602081019050610480565b50505050905090810190601f1680156104c85780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156104e457600080fd5b50610511600480360360208110156104fb57600080fd5b810190808035906020019092919050505061115a565b6040518082815260200191505060405180910390f35b34801561053357600080fd5b506105606004803603602081101561054a57600080fd5b8101908080359060200190929190505050611177565b60405180838152602001821515151581526020019250505060405180910390f35b34801561058d57600080fd5b506105c4600480360360408110156105a457600080fd5b810190808035906020019092919080359060200190929190505050611197565b604051808215151515815260200191505060405180910390f35b3480156105ea57600080fd5b506106176004803603602081101561060157600080fd5b81019080803590602001909291905050506111b7565b6040518082815260200191505060405180910390f35b34801561063957600080fd5b5061067c6004803603602081101561065057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111d4565b005b34801561068a57600080fd5b506106d7600480360360408110156106a157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111eb565b6040518082815260200191505060405180910390f35b3480156106f957600080fd5b506107266004803603602081101561071057600080fd5b81019080803590602001909291905050506112bd565b6040518082815260200191505060405180910390f35b34801561074857600080fd5b506107756004803603602081101561075f57600080fd5b81019080803590602001909291905050506112da565b6040518082815260200191505060405180910390f35b34801561079757600080fd5b506107e4600480360360408110156107ae57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112f7565b604051808215151515815260200191505060405180910390f35b34801561080a57600080fd5b506108416004803603604081101561082157600080fd5b810190808035906020019092919080359060200190929190505050611317565b6040518082600560200280838360005b8381101561086c578082015181840152602081019050610851565b5050505090500191505060405180910390f35b34801561088b57600080fd5b506108ce600480360360208110156108a257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061133d565b6040518082815260200191505060405180910390f35b3480156108f057600080fd5b506109336004803603602081101561090757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611406565b604051808381526020018281526020019250505060405180910390f35b34801561095c57600080fd5b506109936004803603604081101561097357600080fd5b810190808035906020019092919080359060200190929190505050611426565b6040518082815260200191505060405180910390f35b3480156109b557600080fd5b506109ec600480360360408110156109cc57600080fd5b810190808035906020019092919080359060200190929190505050611446565b6040518082815260200191505060405180910390f35b348015610a0e57600080fd5b50610a4560048036036040811015610a2557600080fd5b810190808035906020019092919080359060200190929190505050611466565b6040518082815260200191505060405180910390f35b348015610a6757600080fd5b50610ab460048036036040811015610a7e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611486565b604051808215151515815260200191505060405180910390f35b348015610ada57600080fd5b50610ae3611558565b6040518087815260200186815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610b41578082015181840152602081019050610b26565b50505050905090810190601f168015610b6e5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b348015610b8d57600080fd5b50610bda60048036036040811015610ba457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611580565b604051808215151515815260200191505060405180910390f35b348015610c0057600080fd5b50610c4360048036036020811015610c1757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115a0565b005b348015610c5157600080fd5b50610c7e60048036036020811015610c6857600080fd5b81019080803590602001909291905050506115b7565b604051808a81526020018915151515815260200188151515158152602001871515151581526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600960200280838360005b83811015610d63578082015181840152602081019050610d48565b50505050905001828152602001995050505050505050505060405180910390f35b348015610d9057600080fd5b50610d996115ff565b6040518082603360200280838360005b83811015610dc4578082015181840152602081019050610da9565b5050505090500191505060405180910390f35b348015610de357600080fd5b50610e1a60048036036040811015610dfa57600080fd5b810190808035906020019092919080359060200190929190505050611616565b6040518082815260200191505060405180910390f35b348015610e3c57600080fd5b50610e6960048036036020811015610e5357600080fd5b8101908080359060200190929190505050611636565b6040518082815260200191505060405180910390f35b348015610e8b57600080fd5b50610eee60048036036040811015610ea257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611653565b6040518082815260200191505060405180910390f35b348015610f1057600080fd5b50610f4760048036036040811015610f2757600080fd5b810190808035906020019092919080359060200190929190505050611751565b6040518082815260200191505060405180910390f35b348015610f6957600080fd5b50610f9660048036036020811015610f8057600080fd5b8101908080359060200190929190505050611771565b604051808060200180602001878152602001868152602001858152602001848152602001838103835289818151815260200191508051906020019080838360005b83811015610ff2578082015181840152602081019050610fd7565b50505050905090810190601f16801561101f5780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b8381101561105857808201518184015260208101905061103d565b50505050905090810190601f1680156110855780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156110a557600080fd5b506110ae6117a3565b60405180838152602001821515151581526020019250505060405180910390f35b60006110e58260006117b890919063ffffffff16565b9050919050565b6110f4612dd8565b61110a838360006117d89092919063ffffffff16565b905092915050565b600061112882600061184e90919063ffffffff16565b9050919050565b600061113b600061188e565b905090565b600080606061114f60006118e2565b925092509250909192565b6000611170826000611a1690919063ffffffff16565b9050919050565b60008061118e836000611a3690919063ffffffff16565b91509150915091565b60006111af83836000611aaf9092919063ffffffff16565b905092915050565b60006111cd826000611af190919063ffffffff16565b9050919050565b6111e8816000611b1790919063ffffffff16565b50565b60008073__Old2TellorTransfer____________________63e6c0d7f5909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561127a57600080fd5b505af415801561128e573d6000803e3d6000fd5b505050506040513d60208110156112a457600080fd5b8101908080519060200190929190505050905092915050565b60006112d3826000611caf90919063ffffffff16565b9050919050565b60006112f0826000611ccf90919063ffffffff16565b9050919050565b600061130f83836000611d669092919063ffffffff16565b905092915050565b61131f612dfa565b61133583836000611dd19092919063ffffffff16565b905092915050565b60008073__Old2TellorTransfer____________________63d3a54f059091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156113c457600080fd5b505af41580156113d8573d6000803e3d6000fd5b505050506040513d60208110156113ee57600080fd5b81019080805190602001909291905050509050919050565b60008061141d836000611e7d90919063ffffffff16565b91509150915091565b600061143e83836000611f159092919063ffffffff16565b905092915050565b600061145e83836000611f4e9092919063ffffffff16565b905092915050565b600061147e83836000611f839092919063ffffffff16565b905092915050565b60008073__Old2TellorTransfer____________________63c1364740909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561151557600080fd5b505af4158015611529573d6000803e3d6000fd5b505050506040513d602081101561153f57600080fd5b8101908080519060200190929190505050905092915050565b6000806000606060008061156c6000611fb8565b955095509550955095509550909192939495565b6000611598838360006122c29092919063ffffffff16565b905092915050565b6115b481600061233090919063ffffffff16565b50565b60008060008060008060006115ca612e1c565b60006115e08a600061252b90919063ffffffff16565b9850985098509850985098509850985098509193959799909294969850565b611607612e3f565b6116116000612901565b905090565b600061162e838360006129509092919063ffffffff16565b905092915050565b600061164c82600061298590919063ffffffff16565b9050919050565b60008073__Old2TellorTransfer____________________6321bbd360909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b15801561170e57600080fd5b505af4158015611722573d6000803e3d6000fd5b505050506040513d602081101561173857600080fd5b8101908080519060200190929190505050905092915050565b6000611769838360006129a59092919063ffffffff16565b905092915050565b60608060008060008061178e8760006129da90919063ffffffff16565b95509550955095509550955091939550919395565b6000806117b06000612c39565b915091509091565b600082604201600083815260200190815260200160002054905092915050565b6117e0612dd8565b8360480160008481526020019081526020016000206009016000838152602001908152602001600020600580602002604051908101604052809291908260058015611840576020028201915b81548152602001906001019080831161182c575b505050505090509392505050565b600082603f01600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b600081604001600060405180807f746f74616c5f737570706c790000000000000000000000000000000000000000815250600c01905060405180910390208152602001908152602001600020549050919050565b600080606060006118f285612cfb565b905080856048016000838152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054866048016000848152602001908152602001600020600001808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a015780601f106119d657610100808354040283529160200191611a01565b820191906000526020600020905b8154815290600101906020018083116119e457829003601f168201915b50505050509050935093509350509193909250565b600082604901600083815260200190815260200160002054905092915050565b60008060008460480160008581526020019081526020016000209050600081600301805490501115611a9c57611a90858583600301600185600301805490500381548110611a8057fe5b9060005260206000200154611f83565b60019250925050611aa8565b60008081915092509250505b9250929050565b6000836048016000848152602001908152602001600020600701600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b600082604801600083815260200190815260200160002060030180549050905092915050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611c22576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f742064656974790000000000000000000000000081525060200191505060405180910390fd5b8082603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600082604001600083815260200190815260200160002054905092915050565b60006032821115611d48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f526571756573745120696e6465782069732061626f766520353000000000000081525060200191505060405180910390fd5b82604301600083815260200190815260200160002054905092915050565b600083604101600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b611dd9612dfa565b8360480160008481526020019081526020016000206008016000838152602001908152602001600020600580602002604051908101604052809291908260058015611e6f576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611e25575b505050505090509392505050565b6000808360470160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548460470160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154915091509250929050565b60008360480160008481526020019081526020016000206003018281548110611f3a57fe5b906000526020600020015490509392505050565b600083604401600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600083604801600084815260200190815260200160002060060160008381526020019081526020016000205490509392505050565b60008060006060600080866000015487604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205488604001600060405180807f646966666963756c747900000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020548960480160008b604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205481526020019081526020016000206000018a60480160008c604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020548b60480160008d604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122a65780601f1061227b576101008083540402835291602001916122a6565b820191906000526020600020905b81548152906001019060200180831161228957829003601f168201915b5050505050925095509550955095509550955091939550919395565b600083604401600084815260200190815260200160002060060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461243b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f742064656974790000000000000000000000000081525060200191505060405180910390fd5b8082603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b600080600080600080600061253e612e1c565b6000808b60440160008c8152602001908152602001600020905080600001548160020160009054906101000a900460ff168260020160019054906101000a900460ff168360020160029054906101000a900460ff168460020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180610120016040528089600501600060405180807f726571756573744964000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f76616c756500000000000000000000000000000000000000000000000000000081525060050190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e457865637574696f6e446174650000000000000000000000000000000081525060100190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6e756d6265724f66566f74657300000000000000000000000000000000000000815250600d0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f626c6f636b4e756d626572000000000000000000000000000000000000000000815250600b0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e6572536c6f74000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f71756f72756d000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6665650000000000000000000000000000000000000000000000000000000000815250600301905060405180910390208152602001908152602001600020548152508860010154995099509950995099509950995099509950509295985092959850929598565b612909612e3f565b81600101603380602002604051908101604052809291908260338015612944576020028201915b815481526020019060010190808311612930575b50505050509050919050565b600083604801600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600082604a01600083815260200190815260200160002054905092915050565b600083604801600084815260200190815260200160002060040160008381526020019081526020016000205490509392505050565b606080600080600080600088604801600089815260200190815260200160002090508060000181600101826002015483600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205484600401600060405180807f7265717565737451506f736974696f6e000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205485600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054858054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b7f5780601f10612b5457610100808354040283529160200191612b7f565b820191906000526020600020905b815481529060010190602001808311612b6257829003601f168201915b50505050509550848054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c1b5780601f10612bf057610100808354040283529160200191612c1b565b820191906000526020600020905b815481529060010190602001808311612bfe57829003601f168201915b50505050509450965096509650965096509650509295509295509295565b600080612cf08384604201600086604001600060405180807f74696d654f664c6173744e657756616c756500000000000000000000000000008152506012019050604051809103902081526020019081526020016000205481526020019081526020016000205485604001600060405180807f74696d654f664c6173744e657756616c7565000000000000000000000000000081525060120190506040518091039020815260200190815260200160002054611f83565b600191509150915091565b6000806000612d4884600101603380602002604051908101604052809291908260338015612d3e576020028201915b815481526020019060010190808311612d2a575b5050505050612d6f565b80925081935050508360430160008281526020019081526020016000205492505050919050565b60008082600160338110612d7f57fe5b602002015191506000600190505b6033811015612dd25782848260338110612da357fe5b60200201511115612dc557838160338110612dba57fe5b602002015192508091505b8080600101915050612d8d565b50915091565b6040518060a00160405280600590602082028038833980820191505090505090565b6040518060a00160405280600590602082028038833980820191505090505090565b604051806101200160405280600990602082028038833980820191505090505090565b60405180610660016040528060339060208202803883398082019150509050509056fea265627a7a72315820b969341f542b0845f97dde9c6325f1c40b5db9a3c965ac0d745146f5b3d79feb64736f6c63430005100032",
  "sourceMap": "328:2213:14:-;;;718:321;8:9:-1;5:2;;;30:1;27;20:12;5:2;718:321:14;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;718:321:14;;;;;;;;;;;;;;;;772:6;:11;;;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;772:13:14;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;772:13:14;;;;837:10;795:6;:18;;:39;814:19;;;;;;;;;;;;;;;;;;;795:39;;;;;;;;;;;;:52;;;;;;;;;;;;;;;;;;899:10;857:6;:18;;:39;876:19;;;;;;;;;;;;;;;;;;;857:39;;;;;;;;;;;;:52;;;;;;;;;;;;;;;;;;969:15;919:6;:18;;:47;938:27;;;;;;;;;;;;;;;;;;;919:47;;;;;;;;;;;;:65;;;;;;;;;;;;;;;;;;999:33;1016:15;999:33;;;;;;;;;;;;;;;;;;;;;;718:321;328:2213;;;;;;",
  "deployedSourceMap": "328:2213:14:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1822:12;1837:6;:18;;:47;1856:27;;;;;;;;;;;;;;;;;;;1837:47;;;;;;;;;;;;;;;;;;;;;1822:62;;1894:22;1919:8;;1894:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1894:33:14;;;;;;;;2044:1;2041;2029:9;2023:16;2016:4;2005:9;2001:20;1995:4;1991:1;1987:6;1974:72;2071:14;2115:4;2109:11;2156:4;2153:1;2148:3;2133:28;2354:6;2382:1;2377:64;;;;2500:4;2495:3;2488:17;2377:64;2418:4;2413:3;2406:17;8718:151:13;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8718:151:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8718:151:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11439:197;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11439:197:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11439:197:13;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11439:197:13;;;;;;;;;;;;;;;;3392:123;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3392:123:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3392:123:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;14214:99;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14214:99:13;;;:::i;:::-;;;;;;;;;;;;;;;;;;;13166:137;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13166:137:13;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;13166:137:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9085:147;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9085:147:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9085:147:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6518:149;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6518:149:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6518:149:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13574:156;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13574:156:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13574:156:13;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;8084:159;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8084:159:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8084:159:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1241:95:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1241:95:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1241:95:14;;;;;;;;;;;;;;;;;;;:::i;:::-;;2108:153:13;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2108:153:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2108:153:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;12816:113;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12816:113:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12816:113:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8410:151;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8410:151:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8410:151:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2566:140;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2566:140:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2566:140:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7315:211;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7315:211:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7315:211:13;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;7315:211:13;;;;;;;;;;;;;;;;1722:113;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1722:113:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1722:113:13;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11017:134;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11017:134:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11017:134:13;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;12058:191;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12058:191:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12058:191:13;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5789:163;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5789:163:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5789:163:13;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;13944:161;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13944:161:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13944:161:13;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1374:146;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1374:146:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1374:146:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4793:166;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4793:166:13;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4793:166:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2901:144;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2901:144:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2901:144:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1525:125:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1525:125:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1525:125:14;;;;;;;;;;;;;;;;;;;:::i;:::-;;4273:237:13;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4273:237:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4273:237:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4273:237:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9337:108;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9337:108:13;;;:::i;:::-;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;9337:108:13;;;;;;;;;;;;;;;;6901:169;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6901:169:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6901:169:13;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5155:145;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5155:145:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5155:145:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;982:141;;8:9:-1;5:2;;;30:1;27;20:12;5:2;982:141:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;982:141:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10011:163;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10011:163:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10011:163:13;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10587:190;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10587:190:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10587:190:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10587:190:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10587:190:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6163:113;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6163:113:13;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8718:151;8794:7;8820:42;8851:10;8820:6;:30;;:42;;;;:::i;:::-;8813:49;;8718:151;;;:::o;11439:197::-;11537:17;;:::i;:::-;11573:56;11606:10;11618;11573:6;:32;;:56;;;;;:::i;:::-;11566:63;;11439:197;;;;:::o;3392:123::-;3454:7;3480:28;3502:5;3480:6;:21;;:28;;;;:::i;:::-;3473:35;;3392:123;;;:::o;14214:99::-;14260:7;14286:20;:6;:18;:20::i;:::-;14279:27;;14214:99;:::o;13166:137::-;13219:7;13228;13237:13;13269:27;:6;:25;:27::i;:::-;13262:34;;;;;;13166:137;;;:::o;9085:147::-;9159:7;9185:40;9216:8;9185:6;:30;;:40;;;;:::i;:::-;9178:47;;9085:147;;;:::o;6518:149::-;6590:7;6599:4;6622:38;6649:10;6622:6;:26;;:38;;;;:::i;:::-;6615:45;;;;6518:149;;;:::o;13574:156::-;13658:4;13681:42;13700:10;13712;13681:6;:18;;:42;;;;;:::i;:::-;13674:49;;13574:156;;;;:::o;8084:159::-;8164:7;8190:46;8225:10;8190:6;:34;;:46;;;;:::i;:::-;8183:53;;8084:159;;;:::o;1241:95:14:-;1300:29;1319:9;1300:6;:18;;:29;;;;:::i;:::-;1241:95;:::o;2108:153:13:-;2189:7;2215:6;:18;;;;2234:5;2241:12;2215:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2215:39:13;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2215:39:13;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2215:39:13;;;;;;;;;;;;;;;;2208:46;;2108:153;;;;:::o;12816:113::-;12872:7;12898:24;12916:5;12898:6;:17;;:24;;;;:::i;:::-;12891:31;;12816:113;;;:::o;8410:151::-;8486:7;8512:42;8547:6;8512;:34;;:42;;;;:::i;:::-;8505:49;;8410:151;;;:::o;2566:140::-;2642:4;2665:34;2680:10;2692:6;2665;:14;;:34;;;;;:::i;:::-;2658:41;;2566:140;;;;:::o;7315:211::-;7420:17;;:::i;:::-;7456:63;7496:10;7508;7456:6;:39;;:63;;;;;:::i;:::-;7449:70;;7315:211;;;;:::o;1722:113::-;1779:7;1805:6;:16;;;;1822:5;1805:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1805:23:13;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1805:23:13;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1805:23:13;;;;;;;;;;;;;;;;1798:30;;1722:113;;;:::o;11017:134::-;11080:7;11089;11115:29;11136:7;11115:6;:20;;:29;;;;:::i;:::-;11108:36;;;;11017:134;;;:::o;12058:191::-;12158:7;12184:58;12223:10;12235:6;12184;:38;;:58;;;;;:::i;:::-;12177:65;;12058:191;;;;:::o;5789:163::-;5875:7;5901:44;5927:10;5939:5;5901:6;:25;;:44;;;;;:::i;:::-;5894:51;;5789:163;;;;:::o;13944:161::-;14029:7;14055:43;14075:10;14087;14055:6;:19;;:43;;;;;:::i;:::-;14048:50;;13944:161;;;;:::o;1374:146::-;1453:4;1476:6;:21;;;;1498:5;1505:7;1476:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1476:37:13;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1476:37:13;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1476:37:13;;;;;;;;;;;;;;;;1469:44;;1374:146;;;;:::o;4793:166::-;4847:7;4856;4865;4874:13;4889:7;4898;4924:28;:6;:26;:28::i;:::-;4917:35;;;;;;;;;;;;4793:166;;;;;;:::o;2901:144::-;2979:4;3002:36;3017:10;3029:8;3002:6;:14;;:36;;;;;:::i;:::-;2995:43;;2901:144;;;;:::o;1525:125:14:-;1599:44;1627:15;1599:6;:27;;:44;;;;:::i;:::-;1525:125;:::o;4273:237:13:-;4365:7;4374:4;4380;4386;4392:7;4401;4410;4419:17;;:::i;:::-;4438:6;4467:36;4492:10;4467:6;:24;;:36;;;;:::i;:::-;4460:43;;;;;;;;;;;;;;;;;;4273:237;;;;;;;;;;;:::o;9337:108::-;9381:18;;:::i;:::-;9418:20;:6;:18;:20::i;:::-;9411:27;;9337:108;:::o;6901:169::-;6990:7;7016:47;7040:10;7052;7016:6;:23;;:47;;;;;:::i;:::-;7009:54;;6901:169;;;;:::o;5155:145::-;5228:7;5254:39;5287:5;5254:6;:32;;:39;;;;:::i;:::-;5247:46;;5155:145;;;:::o;982:141::-;1057:7;1083:6;:16;;;;1100:5;1107:8;1083:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1083:33:13;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1083:33:13;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1083:33:13;;;;;;;;;;;;;;;;1076:40;;982:141;;;;:::o;10011:163::-;10097:7;10123:44;10149:10;10161:5;10123:6;:25;;:44;;;;;:::i;:::-;10116:51;;10011:163;;;;:::o;10587:190::-;10654:13;10669;10684:7;10693;10702;10711;10737:33;10759:10;10737:6;:21;;:33;;;;:::i;:::-;10730:40;;;;;;;;;;;;10587:190;;;;;;;:::o;6163:113::-;6213:7;6222:4;6245:24;:6;:22;:24::i;:::-;6238:31;;;;6163:113;;:::o;10853:198:17:-;10981:7;11007:4;:25;;:37;11033:10;11007:37;;;;;;;;;;;;11000:44;;10853:198;;;;:::o;14328:282::-;14502:17;;:::i;:::-;14542:4;:19;;:31;14562:10;14542:31;;;;;;;;;;;:49;;:61;14592:10;14542:61;;;;;;;;;;;14535:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14328:282;;;;;:::o;2905:170::-;3019:7;3045:4;:16;;:23;3062:5;3045:23;;;;;;;;;;;;;;;;;;;;;3038:30;;2905:170;;;;:::o;18325:169::-;18421:7;18447:4;:13;;:40;18461:25;;;;;;;;;;;;;;;;;;;18447:40;;;;;;;;;;;;18440:47;;18325:169;;;:::o;16306:391::-;16409:7;16418;16427:13;16452:20;16475:21;16491:4;16475:15;:21::i;:::-;16452:44;;16527:12;16553:4;:19;;:33;16573:12;16553:33;;;;;;;;;;;:45;;:68;16599:21;;;;;;;;;;;;;;;;;;;16553:68;;;;;;;;;;;;16635:4;:19;;:33;16655:12;16635:33;;;;;;;;;;;:45;;16506:184;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16306:391;;;;;:::o;11263:198::-;11391:7;11417:4;:25;;:37;11443:10;11417:37;;;;;;;;;;;;11410:44;;11263:198;;;;:::o;7947:469::-;8071:7;8080:4;8096:42;8141:4;:19;;:31;8161:10;8141:31;;;;;;;;;;;8096:76;;8222:1;8186:8;:26;;:33;;;;:37;8182:228;;;8247:97;8260:4;8266:10;8278:8;:26;;8341:1;8305:8;:26;;:33;;;;:37;8278:65;;;;;;;;;;;;;;;;8247:12;:97::i;:::-;8346:4;8239:112;;;;;;;8182:228;8390:1;8393:5;8382:17;;;;;;;;7947:469;;;;;;:::o;17505:219::-;17641:4;17664;:19;;:31;17684:10;17664:31;;;;;;;;;;;:41;;:53;17706:10;17664:53;;;;;;;;;;;;;;;;;;;;;17657:60;;17505:219;;;;;:::o;10049:221::-;10181:7;10207:4;:19;;:31;10227:10;10207:31;;;;;;;;;;;:49;;:56;;;;10200:63;;10049:221;;;;:::o;824:260::-;984:10;943:51;;:4;:16;;:37;960:19;;;;;;;;;;;;;;;;;;;943:37;;;;;;;;;;;;;;;;;;;;;:51;;;935:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1068:9;1028:4;:16;;:37;1045:19;;;;;;;;;;;;;;;;;;;1028:37;;;;;;;;;;;;:49;;;;;;;;;;;;;;;;;;824:260;;:::o;15906:163::-;16016:7;16042:4;:13;;:20;16056:5;16042:20;;;;;;;;;;;;16035:27;;15906:163;;;;:::o;10437:259::-;10565:7;10602:2;10592:6;:12;;10584:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10652:4;:29;;:37;10682:6;10652:37;;;;;;;;;;;;10645:44;;10437:259;;;;:::o;1948:200::-;2076:4;2099;:22;;:34;2122:10;2099:34;;;;;;;;;;;:42;2134:6;2099:42;;;;;;;;;;;;;;;;;;;;;;;;;2092:49;;1948:200;;;;;:::o;9154:285::-;9335:17;;:::i;:::-;9375:4;:19;;:31;9395:10;9375:31;;;;;;;;;;;:45;;:57;9421:10;9375:57;;;;;;;;;;;9368:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9154:285;;;;;:::o;13801:239::-;13916:7;13925;13952:4;:18;;:27;13971:7;13952:27;;;;;;;;;;;;;;;:41;;;13995:4;:18;;:27;14014:7;13995:27;;;;;;;;;;;;;;;:37;;;13944:89;;;;13801:239;;;;;:::o;15069:270::-;15245:7;15275:4;:19;;:31;15295:10;15275:31;;;;;;;;;;;:49;;15325:6;15275:57;;;;;;;;;;;;;;;;15268:64;;15069:270;;;;;:::o;6859:251::-;7021:7;7051:4;:17;;:29;7069:10;7051:29;;;;;;;;;;;:45;;:52;7097:5;7051:52;;;;;;;;;;;;7044:59;;6859:251;;;;;:::o;17963:253::-;18124:7;18154:4;:19;;:31;18174:10;18154:31;;;;;;;;;;;:43;;:55;18198:10;18154:55;;;;;;;;;;;;18147:62;;17963:253;;;;;:::o;5289:693::-;5417:7;5426;5435;5444:13;5459:7;5468;5512:4;:21;;;5547:4;:13;;:44;5561:29;;;;;;;;;;;;;;;;;;;5547:44;;;;;;;;;;;;5605:4;:13;;:38;5619:23;;;;;;;;;;;;;;;;;;;5605:38;;;;;;;;;;;;5657:4;:19;;:65;5677:4;:13;;:44;5691:29;;;;;;;;;;;;;;;;;;;5677:44;;;;;;;;;;;;5657:65;;;;;;;;;;;:77;;5748:4;:19;;:65;5768:4;:13;;:44;5782:29;;;;;;;;;;;;;;;;;;;5768:44;;;;;;;;;;;;5748:65;;;;;;;;;;;:77;;:103;5826:24;;;;;;;;;;;;;;;;;;;5748:103;;;;;;;;;;;;5865:4;:19;;:65;5885:4;:13;;:44;5899:29;;;;;;;;;;;;;;;;;;;5885:44;;;;;;;;;;;;5865:65;;;;;;;;;;;:77;;:100;5943:21;;;;;;;;;;;;;;;;;;;5865:100;;;;;;;;;;;;5491:484;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5289:693;;;;;;;:::o;2353:205::-;2483:4;2506;:17;;:29;2524:10;2506:29;;;;;;;;;;;:35;;:45;2542:8;2506:45;;;;;;;;;;;;;;;;;;;;;;;;;2499:52;;2353:205;;;;;:::o;1282:337::-;1457:10;1416:51;;:4;:16;;:37;1433:19;;;;;;;;;;;;;;;;;;;1416:37;;;;;;;;;;;;;;;;;;;;;:51;;;1408:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1549:15;1501:4;:16;;:45;1518:27;;;;;;;;;;;;;;;;;;;1501:45;;;;;;;;;;;;:63;;;;;;;;;;;;;;;;;;1579:33;1596:15;1579:33;;;;;;;;;;;;;;;;;;;;;;1282:337;;:::o;3833:1173::-;3979:7;3988:4;3994;4000;4006:7;4015;4024;4033:17;;:::i;:::-;4052:6;4074:38;4115:4;:17;;:29;4133:10;4115:29;;;;;;;;;;;4074:70;;4175:4;:9;;;4198:4;:13;;;;;;;;;;;;4225:4;:22;;;;;;;;;;;;4261:4;:15;;;;;;;;;;;;4290:4;:18;;;;;;;;;;;;4322:4;:19;;;;;;;;;;;;4355:4;:24;;;;;;;;;;;;4154:845;;;;;;;;4411:4;:20;;:44;4432:22;;;;;;;;;;;;;;;;;;;4411:44;;;;;;;;;;;;4154:845;;;;4473:4;:20;;:44;4494:22;;;;;;;;;;;;;;;;;;;4473:44;;;;;;;;;;;;4154:845;;;;4535:4;:20;;:40;4556:18;;;;;;;;;;;;;;;;;;;4535:40;;;;;;;;;;;;4154:845;;;;4593:4;:20;;:51;4614:29;;;;;;;;;;;;;;;;;;;4593:51;;;;;;;;;;;;4154:845;;;;4662:4;:20;;:48;4683:26;;;;;;;;;;;;;;;;;;;4662:48;;;;;;;;;;;;4154:845;;;;4728:4;:20;;:46;4749:24;;;;;;;;;;;;;;;;;;;4728:46;;;;;;;;;;;;4154:845;;;;4792:4;:20;;:44;4813:22;;;;;;;;;;;;;;;;;;;4792:44;;;;;;;;;;;;4154:845;;;;4854:4;:20;;:41;4875:19;;;;;;;;;;;;;;;;;;;4854:41;;;;;;;;;;;;4154:845;;;;4913:4;:20;;:38;4934:16;;;;;;;;;;;;;;;;;;;4913:38;;;;;;;;;;;;4154:845;;;4979:4;:10;;;4154:845;;;;;;;;;;;;;;;;;;;3833:1173;;;;;;;;;;;:::o;11566:153::-;11662:18;;:::i;:::-;11699:4;:13;;11692:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11566:153;;;:::o;8650:259::-;8815:7;8845:4;:19;;:31;8865:10;8845:31;;;;;;;;;;;:45;;:57;8891:10;8845:57;;;;;;;;;;;;8838:64;;8650:259;;;;;:::o;6178:192::-;6303:7;6329:4;:27;;:34;6357:5;6329:34;;;;;;;;;;;;6322:41;;6178:192;;;;:::o;12285:249::-;12447:7;12477:4;:19;;:31;12497:10;12477:31;;;;;;;;;;;:43;;:50;12521:5;12477:50;;;;;;;;;;;;12470:57;;12285:249;;;;;:::o;12947:614::-;13090:13;13105;13120:7;13129;13138;13147;13170:42;13215:4;:19;;:31;13235:10;13215:31;;;;;;;;;;;13170:76;;13277:8;:20;;13311:8;:19;;13344:8;:18;;;13376:8;:20;;:46;13397:24;;;;;;;;;;;;;;;;;;;13376:46;;;;;;;;;;;;13436:8;:20;;:51;13457:29;;;;;;;;;;;;;;;;;;;13436:51;;;;;;;;;;;;13501:8;:20;;:43;13522:21;;;;;;;;;;;;;;;;;;;13501:43;;;;;;;;;;;;13256:298;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12947:614;;;;;;;;:::o;7321:384::-;7421:7;7430:4;7467:203;7497:4;7519;:25;;:73;7545:4;:13;;:46;7559:31;;;;;;;;;;;;;;;;;;;7545:46;;;;;;;;;;;;7519:73;;;;;;;;;;;;7610:4;:13;;:46;7624:31;;;;;;;;;;;;;;;;;;;7610:46;;;;;;;;;;;;7467:12;:203::i;:::-;7684:4;7446:252;;;;7321:384;;;:::o;16939:295::-;17039:18;17069:12;17091:14;17132:35;17153:4;:13;;17132:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:20;:35::i;:::-;17115:52;;;;;;;;17190:4;:29;;:37;17220:6;17190:37;;;;;;;;;;;;17177:50;;16939:295;;;;;:::o;759::22:-;823:11;836:16;870:4;875:1;870:7;;;;;;;;;;;864:13;;892:9;904:1;892:13;;887:161;911:11;907:1;:15;887:161;;;957:3;947:4;952:1;947:7;;;;;;;;;;;:13;943:95;;;986:4;991:1;986:7;;;;;;;;;;;980:13;;1022:1;1011:12;;943:95;924:3;;;;;;;887:161;;;;759:295;;;:::o;328:2213:14:-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;328:2213:14;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;328:2213:14;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;328:2213:14;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;328:2213:14;;;;:::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./Old2TellorGetters.sol\";\n\n/**\n* @title Tellor Master\n* @dev This is the Master contract with all tellor getter functions and delegate call to Tellor.\n* The logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer,\n* TellorGettersLibrary, and TellorStake\n*/\ncontract OldTellorMaster2 is Old2TellorGetters {\n    event NewTellorAddress(address _newTellor);\n\n    /**\n    * @dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\n    * account, the tellor contract to the Tellor master address and owner to the Tellor master owner address\n    * @param _tellorContract is the address for the tellor contract\n    */\n    constructor(address _tellorContract) public {\n        tellor.init();\n        tellor.addressVars[keccak256(\"_owner\")] = msg.sender;\n        tellor.addressVars[keccak256(\"_deity\")] = msg.sender;\n        tellor.addressVars[keccak256(\"tellorContract\")] = _tellorContract;\n        emit NewTellorAddress(_tellorContract);\n    }\n\n    /**\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp\n    * @dev Only needs to be in library\n    * @param _newDeity the new Deity in the contract\n    */\n\n    function changeDeity(address _newDeity) external {\n        tellor.changeDeity(_newDeity);\n    }\n\n    /**\n    * @dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\n    * @param _tellorContract the address of the new Tellor Contract\n    */\n    function changeTellorContract(address _tellorContract) external {\n        tellor.changeTellorContract(_tellorContract);\n    }\n\n    /**\n    * @dev This is the fallback function that allows contracts to call the tellor contract at the address stored\n    */\n    function() external payable {\n        address addr = tellor.addressVars[keccak256(\"tellorContract\")];\n        bytes memory _calldata = msg.data;\n        assembly {\n            let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n            let size := returndatasize\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, size)\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\n            // if the call returned error data, forward it\n            switch result\n                case 0 {\n                    revert(ptr, size)\n                }\n                default {\n                    return(ptr, size)\n                }\n        }\n    }\n}\n",
  "sourcePath": "/home/jgcarv/Dev/Tellor/TellorLegacy/contracts/oldContracts2/Old2TellorMaster.sol",
  "ast": {
    "absolutePath": "/home/jgcarv/Dev/Tellor/TellorLegacy/contracts/oldContracts2/Old2TellorMaster.sol",
    "exportedSymbols": {
      "OldTellorMaster2": [
        6614
      ]
    },
    "id": 6615,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6516,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:14"
      },
      {
        "absolutePath": "/home/jgcarv/Dev/Tellor/TellorLegacy/contracts/oldContracts2/Old2TellorGetters.sol",
        "file": "./Old2TellorGetters.sol",
        "id": 6517,
        "nodeType": "ImportDirective",
        "scope": 6615,
        "sourceUnit": 6515,
        "src": "25:33:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6518,
              "name": "Old2TellorGetters",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6514,
              "src": "357:17:14",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Old2TellorGetters_$6514",
                "typeString": "contract Old2TellorGetters"
              }
            },
            "id": 6519,
            "nodeType": "InheritanceSpecifier",
            "src": "357:17:14"
          }
        ],
        "contractDependencies": [
          6514
        ],
        "contractKind": "contract",
        "documentation": "@title Tellor Master\n@dev This is the Master contract with all tellor getter functions and delegate call to Tellor.\nThe logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer,\nTellorGettersLibrary, and TellorStake",
        "fullyImplemented": true,
        "id": 6614,
        "linearizedBaseContracts": [
          6614,
          6514
        ],
        "name": "OldTellorMaster2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 6523,
            "name": "NewTellorAddress",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 6522,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6521,
                  "indexed": false,
                  "name": "_newTellor",
                  "nodeType": "VariableDeclaration",
                  "scope": 6523,
                  "src": "404:18:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6520,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "404:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "403:20:14"
            },
            "src": "381:43:14"
          },
          {
            "body": {
              "id": 6569,
              "nodeType": "Block",
              "src": "762:277:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 6528,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6045,
                        "src": "772:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                          "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6530,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "init",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10651,
                      "src": "772:11:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$",
                        "typeString": "function (struct Old2TellorStorage.TellorStorageStruct storage pointer)"
                      }
                    },
                    "id": 6531,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "772:13:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6532,
                  "nodeType": "ExpressionStatement",
                  "src": "772:13:14"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6542,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 6533,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6045,
                          "src": "795:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                            "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 6538,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10953,
                        "src": "795:18:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 6539,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6f776e6572",
                            "id": 6536,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "824:8:14",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            },
                            "value": "_owner"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            }
                          ],
                          "id": 6535,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 11653,
                          "src": "814:9:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 6537,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "814:19:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "795:39:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 6540,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11659,
                        "src": "837:3:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 6541,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "837:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "795:52:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 6543,
                  "nodeType": "ExpressionStatement",
                  "src": "795:52:14"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6553,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 6544,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6045,
                          "src": "857:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                            "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 6549,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10953,
                        "src": "857:18:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 6550,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6465697479",
                            "id": 6547,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "886:8:14",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            },
                            "value": "_deity"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            }
                          ],
                          "id": 6546,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 11653,
                          "src": "876:9:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 6548,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "876:19:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "857:39:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 6551,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11659,
                        "src": "899:3:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 6552,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "899:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "857:52:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 6554,
                  "nodeType": "ExpressionStatement",
                  "src": "857:52:14"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6563,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 6555,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6045,
                          "src": "919:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                            "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 6560,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10953,
                        "src": "919:18:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 6561,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "74656c6c6f72436f6e7472616374",
                            "id": 6558,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "948:16:14",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            },
                            "value": "tellorContract"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            }
                          ],
                          "id": 6557,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 11653,
                          "src": "938:9:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 6559,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "938:27:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "919:47:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 6562,
                      "name": "_tellorContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6525,
                      "src": "969:15:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "919:65:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 6564,
                  "nodeType": "ExpressionStatement",
                  "src": "919:65:14"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6566,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6525,
                        "src": "1016:15:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 6565,
                      "name": "NewTellorAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6523,
                      "src": "999:16:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 6567,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "999:33:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6568,
                  "nodeType": "EmitStatement",
                  "src": "994:38:14"
                }
              ]
            },
            "documentation": "@dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\naccount, the tellor contract to the Tellor master address and owner to the Tellor master owner address\n@param _tellorContract is the address for the tellor contract",
            "id": 6570,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6526,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6525,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 6570,
                  "src": "730:23:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6524,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "730:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "729:25:14"
            },
            "returnParameters": {
              "id": 6527,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "762:0:14"
            },
            "scope": 6614,
            "src": "718:321:14",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 6581,
              "nodeType": "Block",
              "src": "1290:46:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6578,
                        "name": "_newDeity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6572,
                        "src": "1319:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 6575,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6045,
                        "src": "1300:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                          "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6577,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeDeity",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7839,
                      "src": "1300:18:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$",
                        "typeString": "function (struct Old2TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 6579,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1300:29:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6580,
                  "nodeType": "ExpressionStatement",
                  "src": "1300:29:14"
                }
              ]
            },
            "documentation": "@dev Gets the 5 miners who mined the value for the specified requestId/_timestamp\n@dev Only needs to be in library\n@param _newDeity the new Deity in the contract",
            "id": 6582,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeDeity",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6573,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6572,
                  "name": "_newDeity",
                  "nodeType": "VariableDeclaration",
                  "scope": 6582,
                  "src": "1262:17:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6571,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1262:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1261:19:14"
            },
            "returnParameters": {
              "id": 6574,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1290:0:14"
            },
            "scope": 6614,
            "src": "1241:95:14",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 6593,
              "nodeType": "Block",
              "src": "1589:61:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6590,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6584,
                        "src": "1627:15:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 6587,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6045,
                        "src": "1599:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                          "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6589,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeTellorContract",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7874,
                      "src": "1599:27:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$",
                        "typeString": "function (struct Old2TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 6591,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1599:44:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6592,
                  "nodeType": "ExpressionStatement",
                  "src": "1599:44:14"
                }
              ]
            },
            "documentation": "@dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\n@param _tellorContract the address of the new Tellor Contract",
            "id": 6594,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeTellorContract",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6585,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6584,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 6594,
                  "src": "1555:23:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6583,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1555:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1554:25:14"
            },
            "returnParameters": {
              "id": 6586,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1589:0:14"
            },
            "scope": 6614,
            "src": "1525:125:14",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 6612,
              "nodeType": "Block",
              "src": "1812:727:14",
              "statements": [
                {
                  "assignments": [
                    6598
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 6598,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 6612,
                      "src": "1822:12:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 6597,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1822:7:14",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 6605,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 6599,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6045,
                        "src": "1837:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                          "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6600,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "addressVars",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10953,
                      "src": "1837:18:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 6604,
                    "indexExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "74656c6c6f72436f6e7472616374",
                          "id": 6602,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1866:16:14",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          },
                          "value": "tellorContract"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          }
                        ],
                        "id": 6601,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11653,
                        "src": "1856:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 6603,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1856:27:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1837:47:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1822:62:14"
                },
                {
                  "assignments": [
                    6607
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 6607,
                      "name": "_calldata",
                      "nodeType": "VariableDeclaration",
                      "scope": 6612,
                      "src": "1894:22:14",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 6606,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1894:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 6610,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 6608,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11659,
                      "src": "1919:3:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 6609,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "data",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "1919:8:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_calldata_ptr",
                      "typeString": "bytes calldata"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1894:33:14"
                },
                {
                  "externalReferences": [
                    {
                      "_calldata": {
                        "declaration": 6607,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2029:9:14",
                        "valueSize": 1
                      }
                    },
                    {
                      "_calldata": {
                        "declaration": 6607,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2005:9:14",
                        "valueSize": 1
                      }
                    },
                    {
                      "addr": {
                        "declaration": 6598,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1995:4:14",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 6611,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n    let size := returndatasize()\n    let ptr := mload(0x40)\n    returndatacopy(ptr, 0, size)\n    switch result\n    case 0 { revert(ptr, size) }\n    default { return(ptr, size) }\n}",
                  "src": "1937:596:14"
                }
              ]
            },
            "documentation": "@dev This is the fallback function that allows contracts to call the tellor contract at the address stored",
            "id": 6613,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6595,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1792:2:14"
            },
            "returnParameters": {
              "id": 6596,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1812:0:14"
            },
            "scope": 6614,
            "src": "1784:755:14",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 6615,
        "src": "328:2213:14"
      }
    ],
    "src": "0:2542:14"
  },
  "legacyAST": {
    "absolutePath": "/home/jgcarv/Dev/Tellor/TellorLegacy/contracts/oldContracts2/Old2TellorMaster.sol",
    "exportedSymbols": {
      "OldTellorMaster2": [
        6614
      ]
    },
    "id": 6615,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6516,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:14"
      },
      {
        "absolutePath": "/home/jgcarv/Dev/Tellor/TellorLegacy/contracts/oldContracts2/Old2TellorGetters.sol",
        "file": "./Old2TellorGetters.sol",
        "id": 6517,
        "nodeType": "ImportDirective",
        "scope": 6615,
        "sourceUnit": 6515,
        "src": "25:33:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6518,
              "name": "Old2TellorGetters",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6514,
              "src": "357:17:14",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Old2TellorGetters_$6514",
                "typeString": "contract Old2TellorGetters"
              }
            },
            "id": 6519,
            "nodeType": "InheritanceSpecifier",
            "src": "357:17:14"
          }
        ],
        "contractDependencies": [
          6514
        ],
        "contractKind": "contract",
        "documentation": "@title Tellor Master\n@dev This is the Master contract with all tellor getter functions and delegate call to Tellor.\nThe logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer,\nTellorGettersLibrary, and TellorStake",
        "fullyImplemented": true,
        "id": 6614,
        "linearizedBaseContracts": [
          6614,
          6514
        ],
        "name": "OldTellorMaster2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 6523,
            "name": "NewTellorAddress",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 6522,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6521,
                  "indexed": false,
                  "name": "_newTellor",
                  "nodeType": "VariableDeclaration",
                  "scope": 6523,
                  "src": "404:18:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6520,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "404:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "403:20:14"
            },
            "src": "381:43:14"
          },
          {
            "body": {
              "id": 6569,
              "nodeType": "Block",
              "src": "762:277:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 6528,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6045,
                        "src": "772:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                          "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6530,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "init",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10651,
                      "src": "772:11:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$",
                        "typeString": "function (struct Old2TellorStorage.TellorStorageStruct storage pointer)"
                      }
                    },
                    "id": 6531,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "772:13:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6532,
                  "nodeType": "ExpressionStatement",
                  "src": "772:13:14"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6542,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 6533,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6045,
                          "src": "795:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                            "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 6538,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10953,
                        "src": "795:18:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 6539,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6f776e6572",
                            "id": 6536,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "824:8:14",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            },
                            "value": "_owner"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            }
                          ],
                          "id": 6535,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 11653,
                          "src": "814:9:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 6537,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "814:19:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "795:39:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 6540,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11659,
                        "src": "837:3:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 6541,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "837:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "795:52:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 6543,
                  "nodeType": "ExpressionStatement",
                  "src": "795:52:14"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6553,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 6544,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6045,
                          "src": "857:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                            "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 6549,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10953,
                        "src": "857:18:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 6550,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6465697479",
                            "id": 6547,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "886:8:14",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            },
                            "value": "_deity"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            }
                          ],
                          "id": 6546,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 11653,
                          "src": "876:9:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 6548,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "876:19:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "857:39:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 6551,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11659,
                        "src": "899:3:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 6552,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "899:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "857:52:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 6554,
                  "nodeType": "ExpressionStatement",
                  "src": "857:52:14"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6563,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 6555,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6045,
                          "src": "919:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                            "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 6560,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10953,
                        "src": "919:18:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 6561,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "74656c6c6f72436f6e7472616374",
                            "id": 6558,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "948:16:14",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            },
                            "value": "tellorContract"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            }
                          ],
                          "id": 6557,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 11653,
                          "src": "938:9:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 6559,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "938:27:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "919:47:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 6562,
                      "name": "_tellorContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6525,
                      "src": "969:15:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "919:65:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 6564,
                  "nodeType": "ExpressionStatement",
                  "src": "919:65:14"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6566,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6525,
                        "src": "1016:15:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 6565,
                      "name": "NewTellorAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6523,
                      "src": "999:16:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 6567,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "999:33:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6568,
                  "nodeType": "EmitStatement",
                  "src": "994:38:14"
                }
              ]
            },
            "documentation": "@dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\naccount, the tellor contract to the Tellor master address and owner to the Tellor master owner address\n@param _tellorContract is the address for the tellor contract",
            "id": 6570,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6526,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6525,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 6570,
                  "src": "730:23:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6524,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "730:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "729:25:14"
            },
            "returnParameters": {
              "id": 6527,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "762:0:14"
            },
            "scope": 6614,
            "src": "718:321:14",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 6581,
              "nodeType": "Block",
              "src": "1290:46:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6578,
                        "name": "_newDeity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6572,
                        "src": "1319:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 6575,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6045,
                        "src": "1300:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                          "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6577,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeDeity",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7839,
                      "src": "1300:18:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$",
                        "typeString": "function (struct Old2TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 6579,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1300:29:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6580,
                  "nodeType": "ExpressionStatement",
                  "src": "1300:29:14"
                }
              ]
            },
            "documentation": "@dev Gets the 5 miners who mined the value for the specified requestId/_timestamp\n@dev Only needs to be in library\n@param _newDeity the new Deity in the contract",
            "id": 6582,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeDeity",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6573,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6572,
                  "name": "_newDeity",
                  "nodeType": "VariableDeclaration",
                  "scope": 6582,
                  "src": "1262:17:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6571,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1262:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1261:19:14"
            },
            "returnParameters": {
              "id": 6574,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1290:0:14"
            },
            "scope": 6614,
            "src": "1241:95:14",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 6593,
              "nodeType": "Block",
              "src": "1589:61:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6590,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6584,
                        "src": "1627:15:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 6587,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6045,
                        "src": "1599:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                          "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6589,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeTellorContract",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7874,
                      "src": "1599:27:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$11003_storage_ptr_$",
                        "typeString": "function (struct Old2TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 6591,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1599:44:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6592,
                  "nodeType": "ExpressionStatement",
                  "src": "1599:44:14"
                }
              ]
            },
            "documentation": "@dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\n@param _tellorContract the address of the new Tellor Contract",
            "id": 6594,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeTellorContract",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6585,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6584,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 6594,
                  "src": "1555:23:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6583,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1555:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1554:25:14"
            },
            "returnParameters": {
              "id": 6586,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1589:0:14"
            },
            "scope": 6614,
            "src": "1525:125:14",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 6612,
              "nodeType": "Block",
              "src": "1812:727:14",
              "statements": [
                {
                  "assignments": [
                    6598
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 6598,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 6612,
                      "src": "1822:12:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 6597,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1822:7:14",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 6605,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 6599,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6045,
                        "src": "1837:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11003_storage",
                          "typeString": "struct Old2TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6600,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "addressVars",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10953,
                      "src": "1837:18:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 6604,
                    "indexExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "74656c6c6f72436f6e7472616374",
                          "id": 6602,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1866:16:14",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          },
                          "value": "tellorContract"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          }
                        ],
                        "id": 6601,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11653,
                        "src": "1856:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 6603,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1856:27:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1837:47:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1822:62:14"
                },
                {
                  "assignments": [
                    6607
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 6607,
                      "name": "_calldata",
                      "nodeType": "VariableDeclaration",
                      "scope": 6612,
                      "src": "1894:22:14",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 6606,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1894:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 6610,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 6608,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11659,
                      "src": "1919:3:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 6609,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "data",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "1919:8:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_calldata_ptr",
                      "typeString": "bytes calldata"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1894:33:14"
                },
                {
                  "externalReferences": [
                    {
                      "_calldata": {
                        "declaration": 6607,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2029:9:14",
                        "valueSize": 1
                      }
                    },
                    {
                      "_calldata": {
                        "declaration": 6607,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2005:9:14",
                        "valueSize": 1
                      }
                    },
                    {
                      "addr": {
                        "declaration": 6598,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1995:4:14",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 6611,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n    let size := returndatasize()\n    let ptr := mload(0x40)\n    returndatacopy(ptr, 0, size)\n    switch result\n    case 0 { revert(ptr, size) }\n    default { return(ptr, size) }\n}",
                  "src": "1937:596:14"
                }
              ]
            },
            "documentation": "@dev This is the fallback function that allows contracts to call the tellor contract at the address stored",
            "id": 6613,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6595,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1792:2:14"
            },
            "returnParameters": {
              "id": 6596,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1812:0:14"
            },
            "scope": 6614,
            "src": "1784:755:14",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 6615,
        "src": "328:2213:14"
      }
    ],
    "src": "0:2542:14"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.2.3",
  "updatedAt": "2020-10-01T13:38:06.671Z",
  "devdoc": {
    "details": "This is the Master contract with all tellor getter functions and delegate call to Tellor. The logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer, TellorGettersLibrary, and TellorStake",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "_spender": "address",
          "_user": "address"
        },
        "return": "Returns the remaining allowance of tokens granted to the _spender from the _user"
      },
      "allowedToTrade(address,uint256)": {
        "details": "This function returns whether or not a given user is allowed to trade a given amount",
        "params": {
          "_amount": "uint of amount",
          "_user": "address"
        },
        "return": "true if the user is alloed to trade the amount specified"
      },
      "balanceOf(address)": {
        "details": "Gets balance of owner specified",
        "params": {
          "_user": "is the owner address used to look up the balance"
        },
        "return": "Returns the balance associated with the passed in _user"
      },
      "balanceOfAt(address,uint256)": {
        "details": "Queries the balance of _user at a specific _blockNumber",
        "params": {
          "_blockNumber": "The block number when the balance is queried",
          "_user": "The address from which the balance will be retrieved"
        },
        "return": "The balance at _blockNumber"
      },
      "changeDeity(address)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestampOnly needs to be in library",
        "params": {
          "_newDeity": "the new Deity in the contract"
        }
      },
      "changeTellorContract(address)": {
        "details": "allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized",
        "params": {
          "_tellorContract": "the address of the new Tellor Contract"
        }
      },
      "constructor": {
        "details": "The constructor sets the original `tellorStorageOwner` of the contract to the sender account, the tellor contract to the Tellor master address and owner to the Tellor master owner address",
        "params": {
          "_tellorContract": "is the address for the tellor contract"
        }
      },
      "didMine(bytes32,address)": {
        "details": "This function tells you if a given challenge has been completed by a given miner",
        "params": {
          "_challenge": "the challenge to search for",
          "_miner": "address that you want to know if they solved the challenge"
        },
        "return": "true if the _miner address provided solved the"
      },
      "didVote(uint256,address)": {
        "details": "Checks if an address voted in a given dispute",
        "params": {
          "_address": "to look up",
          "_disputeId": "to look up"
        },
        "return": "bool of whether or not party voted"
      },
      "getAddressVars(bytes32)": {
        "details": "allows Tellor to read data from the addressVars mapping",
        "params": {
          "_data": "is the keccak256(\"variable_name\") of the variable that is being accessed. These are examples of how the variables are saved within other functions: addressVars[keccak256(\"_owner\")] addressVars[keccak256(\"tellorContract\")]"
        }
      },
      "getAllDisputeVars(uint256)": {
        "details": "Gets all dispute variables",
        "params": {
          "_disputeId": "to look up"
        },
        "return": "bytes32 hash of disputebool executed where true if it has been voted onbool disputeVotePassedbool isPropFork true if the dispute is a proposed forkaddress of reportedMineraddress of reportingPartyaddress of proposedForkAddressuint of requestIduint of timestampuint of valueuint of minExecutionDateuint of numberOfVotesuint of blocknumberuint of minerSlotuint of quorumuint of feeint count of the current tally"
      },
      "getCurrentVariables()": {
        "details": "Getter function for variables for the requestId being currently mined(currentRequestId)",
        "return": "current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request"
      },
      "getDisputeIdByDisputeHash(bytes32)": {
        "details": "Checks if a given hash of miner,requestId has been disputed",
        "params": {
          "_hash": "is the sha256(abi.encodePacked(_miners[2],_requestId));"
        },
        "return": "uint disputeId"
      },
      "getDisputeUintVars(uint256,bytes32)": {
        "details": "Checks for uint variables in the disputeUintVars mapping based on the disuputeId",
        "params": {
          "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is the variables/strings used to save the data in the mapping. The variables names are commented out under the disputeUintVars under the Dispute struct",
          "_disputeId": "is the dispute id;"
        },
        "return": "uint value for the bytes32 data submitted"
      },
      "getLastNewValue()": {
        "details": "Gets the a value for the latest timestamp available",
        "return": "value for timestamp of last proof of work submitedtrue if the is a timestamp for the lastNewValue"
      },
      "getLastNewValueById(uint256)": {
        "details": "Gets the a value for the latest timestamp available",
        "params": {
          "_requestId": "being requested"
        },
        "return": "value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't"
      },
      "getMinedBlockNum(uint256,uint256)": {
        "details": "Gets blocknumber for mined timestamp",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestamp to look up blocknumber"
        },
        "return": "uint of the blocknumber which the dispute was mined"
      },
      "getMinersByRequestIdAndTimestamp(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestamp to look up miners for"
        },
        "return": "the 5 miners' addresses"
      },
      "getNewValueCountbyRequestId(uint256)": {
        "details": "Counts the number of values that have been submited for the request if called for the currentRequest being mined it can tell you how many miners have submitted a value for that request so far",
        "params": {
          "_requestId": "the requestId to look up"
        },
        "return": "uint count of the number of values received for the requestId"
      },
      "getRequestIdByQueryHash(bytes32)": {
        "details": "Getter function for requestId based on the queryHash",
        "params": {
          "_request": "is the hash(of string api and granularity) to check if a request already exists"
        },
        "return": "uint requestId"
      },
      "getRequestIdByRequestQIndex(uint256)": {
        "details": "Getter function for the specified requestQ index",
        "params": {
          "_index": "to look up in the requestQ array"
        },
        "return": "uint of reqeuestId"
      },
      "getRequestIdByTimestamp(uint256)": {
        "details": "Getter function for requestId based on timestamp",
        "params": {
          "_timestamp": "to check requestId"
        },
        "return": "uint of reqeuestId"
      },
      "getRequestQ()": {
        "details": "Getter function for the requestQ array",
        "return": "the requestQ arrray"
      },
      "getRequestUintVars(uint256,bytes32)": {
        "details": "Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct for the requestId specified",
        "params": {
          "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is the variables/strings used to save the data in the mapping. The variables names are commented out under the apiUintVars under the requestDetails struct",
          "_requestId": "to look up"
        },
        "return": "uint value of the apiUintVars specified in _data for the requestId specified"
      },
      "getRequestVars(uint256)": {
        "details": "Gets the API struct variables that are not mappings",
        "params": {
          "_requestId": "to look up"
        },
        "return": "string of api to querystring of symbol of api to querybytes32 hash of stringbytes32 of the granularity(decimal places) requesteduint of index in requestQ arrayuint of current payout/tip for this requestId"
      },
      "getStakerInfo(address)": {
        "details": "This function allows users to retireve all information about a staker",
        "params": {
          "_staker": "address of staker inquiring about"
        },
        "return": "uint current state of stakeruint startDate of staking"
      },
      "getSubmissionsByTimestamp(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestampt to look up miners for"
        },
        "return": "address[5] array of 5 addresses ofminers that mined the requestId"
      },
      "getTimestampbyRequestIDandIndex(uint256,uint256)": {
        "details": "Gets the timestamp for the value based on their index",
        "params": {
          "_index": "is the value index to look up",
          "_requestID": "is the requestId to look up"
        },
        "return": "uint timestamp"
      },
      "getUintVar(bytes32)": {
        "details": "Getter for the variables saved under the TellorStorageStruct uintVars variable",
        "params": {
          "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is the variables/strings used to save the data in the mapping. The variables names are commented out under the uintVars under the TellorStorageStruct struct This is an example of how data is saved into the mapping within other functions: self.uintVars[keccak256(\"stakerCount\")]"
        },
        "return": "uint of specified variable"
      },
      "getVariablesOnDeck()": {
        "details": "Getter function for next requestId on queue/request with highest payout at time the function is called",
        "return": "onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string"
      },
      "isInDispute(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestamp to look up miners for"
        },
        "return": "bool true if requestId/timestamp is under dispute"
      },
      "retrieveData(uint256,uint256)": {
        "details": "Retreive value from oracle based on timestamp",
        "params": {
          "_requestId": "being requested",
          "_timestamp": "to retreive data/value from"
        },
        "return": "value for timestamp submitted"
      },
      "totalSupply()": {
        "details": "Getter for the total_supply of oracle tokens",
        "return": "uint total supply"
      }
    },
    "title": "Tellor Master"
  },
  "userdoc": {
    "methods": {}
  }
}